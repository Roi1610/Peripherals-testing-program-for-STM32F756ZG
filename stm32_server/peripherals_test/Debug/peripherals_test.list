
peripherals_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a68  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  08017c38  08017c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a804  0801a804  0001c1c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a804  0801a804  0001b804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a80c  0801a80c  0001c1c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a80c  0801a80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a810  0801a810  0001b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0801a814  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  0801a89c  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0801a93c  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000890c  200001c8  0801a9dc  0001c1c8  2**2
                  ALLOC
 12 ._user_heap_stack 000060e4  20008ad4  0801a9dc  0001cad4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001c1c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033cb6  00000000  00000000  0001c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008691  00000000  00000000  0004feae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002710  00000000  00000000  00058540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ed6  00000000  00000000  0005ac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000388c9  00000000  00000000  0005cb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004162f  00000000  00000000  000953ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116e32  00000000  00000000  000d6a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ed850  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a950  00000000  00000000  001ed894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  001f81e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017c20 	.word	0x08017c20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	08017c20 	.word	0x08017c20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061a:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061c:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 800061e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000626:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000628:	2201      	movs	r2, #1
 800062a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063a:	480e      	ldr	r0, [pc, #56]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063c:	f001 fd6a 	bl	8002114 <HAL_ADC_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000646:	f000 fbfd 	bl	8000e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064e:	2301      	movs	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065c:	f002 f824 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000666:	f000 fbed 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200001e4 	.word	0x200001e4
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a31      	ldr	r2, [pc, #196]	@ (8000764 <HAL_ADC_MspInit+0xe4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d15b      	bne.n	800075a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b31      	ldr	r3, [pc, #196]	@ (8000768 <HAL_ADC_MspInit+0xe8>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a30      	ldr	r2, [pc, #192]	@ (8000768 <HAL_ADC_MspInit+0xe8>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <HAL_ADC_MspInit+0xe8>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <HAL_ADC_MspInit+0xe8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a2a      	ldr	r2, [pc, #168]	@ (8000768 <HAL_ADC_MspInit+0xe8>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <HAL_ADC_MspInit+0xe8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4821      	ldr	r0, [pc, #132]	@ (800076c <HAL_ADC_MspInit+0xec>)
 80006e6:	f004 fa37 	bl	8004b58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 80006ec:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <HAL_ADC_MspInit+0xf4>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 800071c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000720:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072e:	4810      	ldr	r0, [pc, #64]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 8000730:	f002 fbac 	bl	8002e8c <HAL_DMA_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800073a:	f000 fb83 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 8000742:	639a      	str	r2, [r3, #56]	@ 0x38
 8000744:	4a0a      	ldr	r2, [pc, #40]	@ (8000770 <HAL_ADC_MspInit+0xf0>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2012      	movs	r0, #18
 8000750:	f002 fb65 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000754:	2012      	movs	r0, #18
 8000756:	f002 fb7e 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40012000 	.word	0x40012000
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	2000022c 	.word	0x2000022c
 8000774:	40026470 	.word	0x40026470

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b32      	ldr	r3, [pc, #200]	@ (8000848 <MX_DMA_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a31      	ldr	r2, [pc, #196]	@ (8000848 <MX_DMA_Init+0xd0>)
 8000784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <MX_DMA_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000796:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <MX_DMA_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a2b      	ldr	r2, [pc, #172]	@ (8000848 <MX_DMA_Init+0xd0>)
 800079c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <MX_DMA_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	200b      	movs	r0, #11
 80007b4:	f002 fb33 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007b8:	200b      	movs	r0, #11
 80007ba:	f002 fb4c 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	200e      	movs	r0, #14
 80007c4:	f002 fb2b 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007c8:	200e      	movs	r0, #14
 80007ca:	f002 fb44 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	200f      	movs	r0, #15
 80007d4:	f002 fb23 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007d8:	200f      	movs	r0, #15
 80007da:	f002 fb3c 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2010      	movs	r0, #16
 80007e4:	f002 fb1b 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007e8:	2010      	movs	r0, #16
 80007ea:	f002 fb34 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2011      	movs	r0, #17
 80007f4:	f002 fb13 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007f8:	2011      	movs	r0, #17
 80007fa:	f002 fb2c 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	202f      	movs	r0, #47	@ 0x2f
 8000804:	f002 fb0b 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000808:	202f      	movs	r0, #47	@ 0x2f
 800080a:	f002 fb24 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2038      	movs	r0, #56	@ 0x38
 8000814:	f002 fb03 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000818:	2038      	movs	r0, #56	@ 0x38
 800081a:	f002 fb1c 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	203b      	movs	r0, #59	@ 0x3b
 8000824:	f002 fafb 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000828:	203b      	movs	r0, #59	@ 0x3b
 800082a:	f002 fb14 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	203c      	movs	r0, #60	@ 0x3c
 8000834:	f002 faf3 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000838:	203c      	movs	r0, #60	@ 0x3c
 800083a:	f002 fb0c 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b4d      	ldr	r3, [pc, #308]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a4c      	ldr	r2, [pc, #304]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b4a      	ldr	r3, [pc, #296]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	4b47      	ldr	r3, [pc, #284]	@ (8000998 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a46      	ldr	r2, [pc, #280]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b44      	ldr	r3, [pc, #272]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b41      	ldr	r3, [pc, #260]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a40      	ldr	r2, [pc, #256]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b38      	ldr	r3, [pc, #224]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b35      	ldr	r3, [pc, #212]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a34      	ldr	r2, [pc, #208]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2e      	ldr	r2, [pc, #184]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a28      	ldr	r2, [pc, #160]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000910:	4822      	ldr	r0, [pc, #136]	@ (800099c <MX_GPIO_Init+0x150>)
 8000912:	f004 facd 	bl	8004eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	4821      	ldr	r0, [pc, #132]	@ (80009a0 <MX_GPIO_Init+0x154>)
 800091c:	f004 fac8 	bl	8004eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481b      	ldr	r0, [pc, #108]	@ (80009a4 <MX_GPIO_Init+0x158>)
 8000938:	f004 f90e 	bl	8004b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800093c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	@ (800099c <MX_GPIO_Init+0x150>)
 8000956:	f004 f8ff 	bl	8004b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <MX_GPIO_Init+0x154>)
 8000972:	f004 f8f1 	bl	8004b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_GPIO_Init+0x154>)
 800098a:	f004 f8e5 	bl	8004b58 <HAL_GPIO_Init>

}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	@ 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800

080009a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000a20 <MX_I2C1_Init+0x78>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <MX_I2C1_Init+0x7c>)
 80009b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b8:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e2:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009e4:	f004 fa7e 	bl	8004ee4 <HAL_I2C_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ee:	f000 fa29 	bl	8000e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009f6:	f006 f8bf 	bl	8006b78 <HAL_I2CEx_ConfigAnalogFilter>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a00:	f000 fa20 	bl	8000e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_I2C1_Init+0x74>)
 8000a08:	f006 f901 	bl	8006c0e <HAL_I2CEx_ConfigDigitalFilter>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 fa17 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000028c 	.word	0x2000028c
 8000a20:	40005400 	.word	0x40005400
 8000a24:	00808cd2 	.word	0x00808cd2

08000a28 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa0 <MX_I2C2_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a34:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <MX_I2C2_Init+0x7c>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a62:	480e      	ldr	r0, [pc, #56]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a64:	f004 fa3e 	bl	8004ee4 <HAL_I2C_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 f9e9 	bl	8000e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4809      	ldr	r0, [pc, #36]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a76:	f006 f87f 	bl	8006b78 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a80:	f000 f9e0 	bl	8000e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_I2C2_Init+0x74>)
 8000a88:	f006 f8c1 	bl	8006c0e <HAL_I2CEx_ConfigDigitalFilter>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 f9d7 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200002e0 	.word	0x200002e0
 8000aa0:	40005800 	.word	0x40005800
 8000aa4:	00808cd2 	.word	0x00808cd2

08000aa8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	@ (8000b20 <MX_I2C4_Init+0x78>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <MX_I2C4_Init+0x7c>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 4;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ae2:	480e      	ldr	r0, [pc, #56]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000ae4:	f004 f9fe 	bl	8004ee4 <HAL_I2C_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000aee:	f000 f9a9 	bl	8000e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000af6:	f006 f83f 	bl	8006b78 <HAL_I2CEx_ConfigAnalogFilter>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b00:	f000 f9a0 	bl	8000e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_I2C4_Init+0x74>)
 8000b08:	f006 f881 	bl	8006c0e <HAL_I2CEx_ConfigDigitalFilter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b12:	f000 f997 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000334 	.word	0x20000334
 8000b20:	40006000 	.word	0x40006000
 8000b24:	00808cd2 	.word	0x00808cd2

08000b28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0320 	add.w	r3, r7, #32
 8000b44:	2284      	movs	r2, #132	@ 0x84
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f016 f9c6 	bl	8016eda <memset>
  if(i2cHandle->Instance==I2C1)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a6e      	ldr	r2, [pc, #440]	@ (8000d0c <HAL_I2C_MspInit+0x1e4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d13e      	bne.n	8000bd6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b5c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	f107 0320 	add.w	r3, r7, #32
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f006 feb1 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000b74:	f000 f966 	bl	8000e44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b65      	ldr	r3, [pc, #404]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a64      	ldr	r2, [pc, #400]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b62      	ldr	r3, [pc, #392]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b98:	2312      	movs	r3, #18
 8000b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000baa:	2304      	movs	r3, #4
 8000bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4857      	ldr	r0, [pc, #348]	@ (8000d14 <HAL_I2C_MspInit+0x1ec>)
 8000bb8:	f003 ffce 	bl	8004b58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbc:	4b54      	ldr	r3, [pc, #336]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	4a53      	ldr	r2, [pc, #332]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000bc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc8:	4b51      	ldr	r3, [pc, #324]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000bd4:	e096      	b.n	8000d04 <HAL_I2C_MspInit+0x1dc>
  else if(i2cHandle->Instance==I2C2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a4f      	ldr	r2, [pc, #316]	@ (8000d18 <HAL_I2C_MspInit+0x1f0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d146      	bne.n	8000c6e <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000be4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bec:	f107 0320 	add.w	r3, r7, #32
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 fe6d 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8000bfc:	f000 f922 	bl	8000e44 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	4b43      	ldr	r3, [pc, #268]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	4a42      	ldr	r2, [pc, #264]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0c:	4b40      	ldr	r3, [pc, #256]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c20:	2312      	movs	r3, #18
 8000c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c32:	2304      	movs	r3, #4
 8000c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4835      	ldr	r0, [pc, #212]	@ (8000d14 <HAL_I2C_MspInit+0x1ec>)
 8000c40:	f003 ff8a 	bl	8004b58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c44:	4b32      	ldr	r3, [pc, #200]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	4a31      	ldr	r2, [pc, #196]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000c4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c50:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2021      	movs	r0, #33	@ 0x21
 8000c62:	f002 f8dc 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000c66:	2021      	movs	r0, #33	@ 0x21
 8000c68:	f002 f8f5 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8000c6c:	e04a      	b.n	8000d04 <HAL_I2C_MspInit+0x1dc>
  else if(i2cHandle->Instance==I2C4)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a2a      	ldr	r2, [pc, #168]	@ (8000d1c <HAL_I2C_MspInit+0x1f4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d145      	bne.n	8000d04 <HAL_I2C_MspInit+0x1dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c7c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f006 fe21 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_I2C_MspInit+0x170>
      Error_Handler();
 8000c94:	f000 f8d6 	bl	8000e44 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000c9e:	f043 0320 	orr.w	r3, r3, #32
 8000ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	f003 0320 	and.w	r3, r3, #32
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cb0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	2312      	movs	r3, #18
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4812      	ldr	r0, [pc, #72]	@ (8000d20 <HAL_I2C_MspInit+0x1f8>)
 8000cd8:	f003 ff3e 	bl	8004b58 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_I2C_MspInit+0x1e8>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	205f      	movs	r0, #95	@ 0x5f
 8000cfa:	f002 f890 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000cfe:	205f      	movs	r0, #95	@ 0x5f
 8000d00:	f002 f8a9 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8000d04:	bf00      	nop
 8000d06:	37b8      	adds	r7, #184	@ 0xb8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40005800 	.word	0x40005800
 8000d1c:	40006000 	.word	0x40006000
 8000d20:	40021400 	.word	0x40021400

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d28:	f001 f973 	bl	8002012 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2c:	f000 f822 	bl	8000d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f7ff fd8c 	bl	800084c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d34:	f7ff fd20 	bl	8000778 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d38:	f7ff fe36 	bl	80009a8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000d3c:	f000 fd56 	bl	80017ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d40:	f000 ff90 	bl	8001c64 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000d44:	f00a fbbe 	bl	800b4c4 <MX_LWIP_Init>
  MX_USART2_UART_Init();
 8000d48:	f000 fd20 	bl	800178c <MX_USART2_UART_Init>
  MX_UART5_Init();
 8000d4c:	f000 fcee 	bl	800172c <MX_UART5_Init>
  MX_SPI1_Init();
 8000d50:	f000 f87e 	bl	8000e50 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d54:	f000 f8ba 	bl	8000ecc <MX_SPI2_Init>
  MX_I2C2_Init();
 8000d58:	f7ff fe66 	bl	8000a28 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000d5c:	f7ff fea4 	bl	8000aa8 <MX_I2C4_Init>
  MX_ADC1_Init();
 8000d60:	f7ff fc3c 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8000d64:	f000 fc84 	bl	8001670 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  udp_server_init();
 8000d68:	f015 f972 	bl	8016050 <udp_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000d6c:	f00a fcea 	bl	800b744 <MX_LWIP_Process>
 8000d70:	e7fc      	b.n	8000d6c <main+0x48>
	...

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b094      	sub	sp, #80	@ 0x50
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	2230      	movs	r2, #48	@ 0x30
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f016 f8a9 	bl	8016eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d98:	f006 f8c0 	bl	8006f1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <SystemClock_Config+0xc8>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	4a26      	ldr	r2, [pc, #152]	@ (8000e3c <SystemClock_Config+0xc8>)
 8000da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da8:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <SystemClock_Config+0xc8>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db4:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <SystemClock_Config+0xcc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dbc:	4a20      	ldr	r2, [pc, #128]	@ (8000e40 <SystemClock_Config+0xcc>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <SystemClock_Config+0xcc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de4:	2304      	movs	r3, #4
 8000de6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000de8:	2348      	movs	r3, #72	@ 0x48
 8000dea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000df0:	2303      	movs	r3, #3
 8000df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0320 	add.w	r3, r7, #32
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f006 f89f 	bl	8006f3c <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e04:	f000 f81e 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2102      	movs	r1, #2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f006 fb2d 	bl	8007484 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e30:	f000 f808 	bl	8000e44 <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3750      	adds	r7, #80	@ 0x50
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40007000 	.word	0x40007000

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <Error_Handler+0x8>

08000e50 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <MX_SPI1_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000eaa:	2208      	movs	r2, #8
 8000eac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000eb0:	f007 f8fe 	bl	80080b0 <HAL_SPI_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f7ff ffc3 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000388 	.word	0x20000388
 8000ec8:	40013000 	.word	0x40013000

08000ecc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <MX_SPI2_Init+0x70>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000edc:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000ee4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ee8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eea:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efc:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000f12:	2207      	movs	r2, #7
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_SPI2_Init+0x6c>)
 8000f24:	f007 f8c4 	bl	80080b0 <HAL_SPI_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000f2e:	f7ff ff89 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200003ec 	.word	0x200003ec
 8000f3c:	40003800 	.word	0x40003800

08000f40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	@ 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a60      	ldr	r2, [pc, #384]	@ (80010e0 <HAL_SPI_MspInit+0x1a0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	f040 80ce 	bne.w	8001100 <HAL_SPI_MspInit+0x1c0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b5f      	ldr	r3, [pc, #380]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f68:	4a5e      	ldr	r2, [pc, #376]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000f6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f70:	4b5c      	ldr	r3, [pc, #368]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b59      	ldr	r3, [pc, #356]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4a58      	ldr	r2, [pc, #352]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f88:	4b56      	ldr	r3, [pc, #344]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b53      	ldr	r3, [pc, #332]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f98:	4a52      	ldr	r2, [pc, #328]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa0:	4b50      	ldr	r3, [pc, #320]	@ (80010e4 <HAL_SPI_MspInit+0x1a4>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fac:	2360      	movs	r3, #96	@ 0x60
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4848      	ldr	r0, [pc, #288]	@ (80010e8 <HAL_SPI_MspInit+0x1a8>)
 8000fc8:	f003 fdc6 	bl	8004b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fcc:	2320      	movs	r3, #32
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4841      	ldr	r0, [pc, #260]	@ (80010ec <HAL_SPI_MspInit+0x1ac>)
 8000fe8:	f003 fdb6 	bl	8004b58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000fec:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8000fee:	4a41      	ldr	r2, [pc, #260]	@ (80010f4 <HAL_SPI_MspInit+0x1b4>)
 8000ff0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8000ff4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b3a      	ldr	r3, [pc, #232]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100e:	4b38      	ldr	r3, [pc, #224]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001014:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800101a:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001020:	4b33      	ldr	r3, [pc, #204]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001022:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001026:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001028:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 800102a:	2204      	movs	r2, #4
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800102e:	4b30      	ldr	r3, [pc, #192]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001030:	2203      	movs	r2, #3
 8001032:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001034:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001036:	2200      	movs	r2, #0
 8001038:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800103a:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 800103c:	2200      	movs	r2, #0
 800103e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001040:	482b      	ldr	r0, [pc, #172]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001042:	f001 ff23 	bl	8002e8c <HAL_DMA_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 800104c:	f7ff fefa 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a27      	ldr	r2, [pc, #156]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001054:	659a      	str	r2, [r3, #88]	@ 0x58
 8001056:	4a26      	ldr	r2, [pc, #152]	@ (80010f0 <HAL_SPI_MspInit+0x1b0>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 800105e:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <HAL_SPI_MspInit+0x1bc>)
 8001060:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 8001064:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001068:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800106a:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 800106c:	2240      	movs	r2, #64	@ 0x40
 800106e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001070:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 8001078:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001084:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 8001092:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001096:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 800109a:	2204      	movs	r2, #4
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800109e:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 80010a0:	2203      	movs	r2, #3
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010b0:	4811      	ldr	r0, [pc, #68]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 80010b2:	f001 feeb 	bl	8002e8c <HAL_DMA_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_SPI_MspInit+0x180>
    {
      Error_Handler();
 80010bc:	f7ff fec2 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 80010c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80010c6:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <HAL_SPI_MspInit+0x1b8>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2023      	movs	r0, #35	@ 0x23
 80010d2:	f001 fea4 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010d6:	2023      	movs	r0, #35	@ 0x23
 80010d8:	f001 febd 	bl	8002e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010dc:	e0d0      	b.n	8001280 <HAL_SPI_MspInit+0x340>
 80010de:	bf00      	nop
 80010e0:	40013000 	.word	0x40013000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	20000450 	.word	0x20000450
 80010f4:	40026410 	.word	0x40026410
 80010f8:	200004b0 	.word	0x200004b0
 80010fc:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a60      	ldr	r2, [pc, #384]	@ (8001288 <HAL_SPI_MspInit+0x348>)
 8001106:	4293      	cmp	r3, r2
 8001108:	f040 80ba 	bne.w	8001280 <HAL_SPI_MspInit+0x340>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800110c:	4b5f      	ldr	r3, [pc, #380]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a5e      	ldr	r2, [pc, #376]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b5c      	ldr	r3, [pc, #368]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001124:	4b59      	ldr	r3, [pc, #356]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	4a58      	ldr	r2, [pc, #352]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001130:	4b56      	ldr	r3, [pc, #344]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b53      	ldr	r3, [pc, #332]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	4a52      	ldr	r2, [pc, #328]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6313      	str	r3, [r2, #48]	@ 0x30
 8001148:	4b50      	ldr	r3, [pc, #320]	@ (800128c <HAL_SPI_MspInit+0x34c>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001154:	230c      	movs	r3, #12
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001164:	2305      	movs	r3, #5
 8001166:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	4848      	ldr	r0, [pc, #288]	@ (8001290 <HAL_SPI_MspInit+0x350>)
 8001170:	f003 fcf2 	bl	8004b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001174:	2308      	movs	r3, #8
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001184:	2305      	movs	r3, #5
 8001186:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	4841      	ldr	r0, [pc, #260]	@ (8001294 <HAL_SPI_MspInit+0x354>)
 8001190:	f003 fce2 	bl	8004b58 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001194:	4b40      	ldr	r3, [pc, #256]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 8001196:	4a41      	ldr	r2, [pc, #260]	@ (800129c <HAL_SPI_MspInit+0x35c>)
 8001198:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800119a:	4b3f      	ldr	r3, [pc, #252]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011b4:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ba:	4b37      	ldr	r3, [pc, #220]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80011c0:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80011c6:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011cc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011dc:	2200      	movs	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80011e6:	482c      	ldr	r0, [pc, #176]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011e8:	f001 fe50 	bl	8002e8c <HAL_DMA_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_SPI_MspInit+0x2b6>
      Error_Handler();
 80011f2:	f7ff fe27 	bl	8000e44 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a27      	ldr	r2, [pc, #156]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80011fc:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <HAL_SPI_MspInit+0x358>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001202:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001204:	4a27      	ldr	r2, [pc, #156]	@ (80012a4 <HAL_SPI_MspInit+0x364>)
 8001206:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001210:	2240      	movs	r2, #64	@ 0x40
 8001212:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800121a:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 800121c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001220:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001236:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800123a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 800123e:	2204      	movs	r2, #4
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001244:	2203      	movs	r2, #3
 8001246:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 800124a:	2200      	movs	r2, #0
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001250:	2200      	movs	r2, #0
 8001252:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001254:	4812      	ldr	r0, [pc, #72]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001256:	f001 fe19 	bl	8002e8c <HAL_DMA_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_SPI_MspInit+0x324>
      Error_Handler();
 8001260:	f7ff fdf0 	bl	8000e44 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 8001268:	655a      	str	r2, [r3, #84]	@ 0x54
 800126a:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <HAL_SPI_MspInit+0x360>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2024      	movs	r0, #36	@ 0x24
 8001276:	f001 fdd2 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800127a:	2024      	movs	r0, #36	@ 0x24
 800127c:	f001 fdeb 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8001280:	bf00      	nop
 8001282:	3738      	adds	r7, #56	@ 0x38
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40003800 	.word	0x40003800
 800128c:	40023800 	.word	0x40023800
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00
 8001298:	20000510 	.word	0x20000510
 800129c:	40026058 	.word	0x40026058
 80012a0:	20000570 	.word	0x20000570
 80012a4:	40026070 	.word	0x40026070

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_MspInit+0x44>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <HAL_MspInit+0x44>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_MspInit+0x44>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_MspInit+0x44>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_MspInit+0x44>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_MspInit+0x44>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001346:	f000 fea1 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <DMA1_Stream0_IRQHandler+0x10>)
 8001356:	f001 ff39 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200007b8 	.word	0x200007b8

08001364 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <DMA1_Stream3_IRQHandler+0x10>)
 800136a:	f001 ff2f 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000510 	.word	0x20000510

08001378 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <DMA1_Stream4_IRQHandler+0x10>)
 800137e:	f001 ff25 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000570 	.word	0x20000570

0800138c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <DMA1_Stream5_IRQHandler+0x10>)
 8001392:	f001 ff1b 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000878 	.word	0x20000878

080013a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <DMA1_Stream6_IRQHandler+0x10>)
 80013a6:	f001 ff11 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200008d8 	.word	0x200008d8

080013b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <ADC_IRQHandler+0x10>)
 80013ba:	f000 feef 	bl	800219c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001e4 	.word	0x200001e4

080013c8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <I2C2_EV_IRQHandler+0x10>)
 80013ce:	f003 ffeb 	bl	80053a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200002e0 	.word	0x200002e0

080013dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <SPI1_IRQHandler+0x10>)
 80013e2:	f007 faa5 	bl	8008930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000388 	.word	0x20000388

080013f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <SPI2_IRQHandler+0x10>)
 80013f6:	f007 fa9b 	bl	8008930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200003ec 	.word	0x200003ec

08001404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <USART2_IRQHandler+0x10>)
 800140a:	f008 fb9f 	bl	8009b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200006a8 	.word	0x200006a8

08001418 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <DMA1_Stream7_IRQHandler+0x10>)
 800141e:	f001 fed5 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000818 	.word	0x20000818

0800142c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <UART5_IRQHandler+0x10>)
 8001432:	f008 fb8b 	bl	8009b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000620 	.word	0x20000620

08001440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <TIM6_DAC_IRQHandler+0x10>)
 8001446:	f007 fff1 	bl	800942c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200005d4 	.word	0x200005d4

08001454 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <DMA2_Stream0_IRQHandler+0x10>)
 800145a:	f001 feb7 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000450 	.word	0x20000450

08001468 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <DMA2_Stream3_IRQHandler+0x10>)
 800146e:	f001 fead 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200004b0 	.word	0x200004b0

0800147c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA2_Stream4_IRQHandler+0x10>)
 8001482:	f001 fea3 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000022c 	.word	0x2000022c

08001490 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <ETH_IRQHandler+0x10>)
 8001496:	f002 fc73 	bl	8003d80 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200057f8 	.word	0x200057f8

080014a4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <I2C4_EV_IRQHandler+0x10>)
 80014aa:	f003 ff7d 	bl	80053a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000334 	.word	0x20000334

080014b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014d2:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <_kill+0x20>)
 80014d4:	2216      	movs	r2, #22
 80014d6:	601a      	str	r2, [r3, #0]
  return -1;
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	20008ac4 	.word	0x20008ac4

080014ec <_exit>:

void _exit (int status)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ffe5 	bl	80014c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014fe:	bf00      	nop
 8001500:	e7fd      	b.n	80014fe <_exit+0x12>

08001502 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e00a      	b.n	800152a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001514:	f3af 8000 	nop.w
 8001518:	4601      	mov	r1, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	60ba      	str	r2, [r7, #8]
 8001520:	b2ca      	uxtb	r2, r1
 8001522:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	dbf0      	blt.n	8001514 <_read+0x12>
  }

  return len;
 8001532:	687b      	ldr	r3, [r7, #4]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e009      	b.n	8001562 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	dbf1      	blt.n	800154e <_write+0x12>
  }
  return len;
 800156a:	687b      	ldr	r3, [r7, #4]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_close>:

int _close(int file)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800159c:	605a      	str	r2, [r3, #4]
  return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_isatty>:

int _isatty(int file)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d205      	bcs.n	8001618 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <_sbrk+0x6c>)
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	20050000 	.word	0x20050000
 800163c:	00004096 	.word	0x00004096
 8001640:	200005d0 	.word	0x200005d0
 8001644:	20008ad8 	.word	0x20008ad8
 8001648:	20008ac4 	.word	0x20008ac4

0800164c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_TIM6_Init+0x68>)
 8001682:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <MX_TIM6_Init+0x6c>)
 8001684:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <MX_TIM6_Init+0x68>)
 8001688:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800168c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_TIM6_Init+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_TIM6_Init+0x68>)
 8001696:	f242 720f 	movw	r2, #9999	@ 0x270f
 800169a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_TIM6_Init+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016a2:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <MX_TIM6_Init+0x68>)
 80016a4:	f007 fdc2 	bl	800922c <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80016ae:	f7ff fbc9 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	@ (80016d8 <MX_TIM6_Init+0x68>)
 80016c0:	f008 f88a 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80016ca:	f7ff fbbb 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200005d4 	.word	0x200005d4
 80016dc:	40001000 	.word	0x40001000

080016e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <HAL_TIM_Base_MspInit+0x44>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d113      	bne.n	800171a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <HAL_TIM_Base_MspInit+0x48>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <HAL_TIM_Base_MspInit+0x48>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_TIM_Base_MspInit+0x48>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2036      	movs	r0, #54	@ 0x36
 8001710:	f001 fb85 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001714:	2036      	movs	r0, #54	@ 0x36
 8001716:	f001 fb9e 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40001000 	.word	0x40001000
 8001728:	40023800 	.word	0x40023800

0800172c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_UART5_Init+0x58>)
 8001732:	4a15      	ldr	r2, [pc, #84]	@ (8001788 <MX_UART5_Init+0x5c>)
 8001734:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_UART5_Init+0x58>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_UART5_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_UART5_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_UART5_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <MX_UART5_Init+0x58>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <MX_UART5_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_UART5_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <MX_UART5_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_UART5_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_UART5_Init+0x58>)
 8001770:	f008 f8de 	bl	8009930 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800177a:	f7ff fb63 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000620 	.word	0x20000620
 8001788:	40005000 	.word	0x40005000

0800178c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 8001792:	4a15      	ldr	r2, [pc, #84]	@ (80017e8 <MX_USART2_UART_Init+0x5c>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <MX_USART2_UART_Init+0x58>)
 80017d0:	f008 f8ae 	bl	8009930 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017da:	f7ff fb33 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200006a8 	.word	0x200006a8
 80017e8:	40004400 	.word	0x40004400

080017ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 80017f2:	4a15      	ldr	r2, [pc, #84]	@ (8001848 <MX_USART3_UART_Init+0x5c>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_USART3_UART_Init+0x58>)
 8001830:	f008 f87e 	bl	8009930 <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800183a:	f7ff fb03 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000730 	.word	0x20000730
 8001848:	40004800 	.word	0x40004800

0800184c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0b0      	sub	sp, #192	@ 0xc0
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001864:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001868:	2284      	movs	r2, #132	@ 0x84
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f015 fb34 	bl	8016eda <memset>
  if(uartHandle->Instance==UART5)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a63      	ldr	r2, [pc, #396]	@ (8001a04 <HAL_UART_MspInit+0x1b8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	f040 80d3 	bne.w	8001a24 <HAL_UART_MspInit+0x1d8>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800187e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001888:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800188c:	4618      	mov	r0, r3
 800188e:	f006 f81f 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001898:	f7ff fad4 	bl	8000e44 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800189c:	4b5a      	ldr	r3, [pc, #360]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	4a59      	ldr	r2, [pc, #356]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 80018a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a8:	4b57      	ldr	r3, [pc, #348]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b4:	4b54      	ldr	r3, [pc, #336]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b8:	4a53      	ldr	r2, [pc, #332]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c0:	4b51      	ldr	r3, [pc, #324]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001a08 <HAL_UART_MspInit+0x1bc>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018fe:	2308      	movs	r3, #8
 8001900:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001908:	4619      	mov	r1, r3
 800190a:	4840      	ldr	r0, [pc, #256]	@ (8001a0c <HAL_UART_MspInit+0x1c0>)
 800190c:	f003 f924 	bl	8004b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001910:	2304      	movs	r3, #4
 8001912:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001928:	2308      	movs	r3, #8
 800192a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001932:	4619      	mov	r1, r3
 8001934:	4836      	ldr	r0, [pc, #216]	@ (8001a10 <HAL_UART_MspInit+0x1c4>)
 8001936:	f003 f90f 	bl	8004b58 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800193a:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 800193c:	4a36      	ldr	r2, [pc, #216]	@ (8001a18 <HAL_UART_MspInit+0x1cc>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001940:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 8001942:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001946:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001948:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800194e:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001954:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 8001956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800195a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001962:	4b2c      	ldr	r3, [pc, #176]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001968:	4b2a      	ldr	r3, [pc, #168]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800196e:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001974:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800197a:	4826      	ldr	r0, [pc, #152]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 800197c:	f001 fa86 	bl	8002e8c <HAL_DMA_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001986:	f7ff fa5d 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 800198e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001990:	4a20      	ldr	r2, [pc, #128]	@ (8001a14 <HAL_UART_MspInit+0x1c8>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8001996:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 8001998:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <HAL_UART_MspInit+0x1d4>)
 800199a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 800199e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019a2:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019a6:	2240      	movs	r2, #64	@ 0x40
 80019a8:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019b6:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80019d6:	4811      	ldr	r0, [pc, #68]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019d8:	f001 fa58 	bl	8002e8c <HAL_DMA_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 80019e2:	f7ff fa2f 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019ea:	671a      	str	r2, [r3, #112]	@ 0x70
 80019ec:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <HAL_UART_MspInit+0x1d0>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2035      	movs	r0, #53	@ 0x35
 80019f8:	f001 fa11 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80019fc:	2035      	movs	r0, #53	@ 0x35
 80019fe:	f001 fa2a 	bl	8002e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a02:	e118      	b.n	8001c36 <HAL_UART_MspInit+0x3ea>
 8001a04:	40005000 	.word	0x40005000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	200007b8 	.word	0x200007b8
 8001a18:	40026010 	.word	0x40026010
 8001a1c:	20000818 	.word	0x20000818
 8001a20:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a85      	ldr	r2, [pc, #532]	@ (8001c40 <HAL_UART_MspInit+0x3f4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f040 80c1 	bne.w	8001bb2 <HAL_UART_MspInit+0x366>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f005 ff47 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x200>
      Error_Handler();
 8001a48:	f7ff f9fc 	bl	8000e44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	4a7c      	ldr	r2, [pc, #496]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a58:	4b7a      	ldr	r3, [pc, #488]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b77      	ldr	r3, [pc, #476]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	4a76      	ldr	r2, [pc, #472]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a70:	4b74      	ldr	r3, [pc, #464]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b71      	ldr	r3, [pc, #452]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	4a70      	ldr	r2, [pc, #448]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a88:	4b6e      	ldr	r3, [pc, #440]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a94:	2308      	movs	r3, #8
 8001a96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aac:	2307      	movs	r3, #7
 8001aae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4863      	ldr	r0, [pc, #396]	@ (8001c48 <HAL_UART_MspInit+0x3fc>)
 8001aba:	f003 f84d 	bl	8004b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001adc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	485a      	ldr	r0, [pc, #360]	@ (8001c4c <HAL_UART_MspInit+0x400>)
 8001ae4:	f003 f838 	bl	8004b58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ae8:	4b59      	ldr	r3, [pc, #356]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001aea:	4a5a      	ldr	r2, [pc, #360]	@ (8001c54 <HAL_UART_MspInit+0x408>)
 8001aec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001aee:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001af0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001af4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af6:	4b56      	ldr	r3, [pc, #344]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afc:	4b54      	ldr	r3, [pc, #336]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b02:	4b53      	ldr	r3, [pc, #332]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0a:	4b51      	ldr	r3, [pc, #324]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b10:	4b4f      	ldr	r3, [pc, #316]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b16:	4b4e      	ldr	r3, [pc, #312]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b22:	4b4b      	ldr	r3, [pc, #300]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b28:	4849      	ldr	r0, [pc, #292]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b2a:	f001 f9af 	bl	8002e8c <HAL_DMA_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_MspInit+0x2ec>
      Error_Handler();
 8001b34:	f7ff f986 	bl	8000e44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a45      	ldr	r2, [pc, #276]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b3c:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b3e:	4a44      	ldr	r2, [pc, #272]	@ (8001c50 <HAL_UART_MspInit+0x404>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b44:	4b44      	ldr	r3, [pc, #272]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b46:	4a45      	ldr	r2, [pc, #276]	@ (8001c5c <HAL_UART_MspInit+0x410>)
 8001b48:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b4a:	4b43      	ldr	r3, [pc, #268]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b4c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b50:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b52:	4b41      	ldr	r3, [pc, #260]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b54:	2240      	movs	r2, #64	@ 0x40
 8001b56:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b58:	4b3f      	ldr	r3, [pc, #252]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b64:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b66:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b72:	4b39      	ldr	r3, [pc, #228]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b78:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b7e:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b84:	4834      	ldr	r0, [pc, #208]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b86:	f001 f981 	bl	8002e8c <HAL_DMA_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8001b90:	f7ff f958 	bl	8000e44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a30      	ldr	r2, [pc, #192]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b98:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c58 <HAL_UART_MspInit+0x40c>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2026      	movs	r0, #38	@ 0x26
 8001ba6:	f001 f93a 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001baa:	2026      	movs	r0, #38	@ 0x26
 8001bac:	f001 f953 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8001bb0:	e041      	b.n	8001c36 <HAL_UART_MspInit+0x3ea>
  else if(uartHandle->Instance==USART3)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c60 <HAL_UART_MspInit+0x414>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d13c      	bne.n	8001c36 <HAL_UART_MspInit+0x3ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f005 fe80 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_UART_MspInit+0x38e>
      Error_Handler();
 8001bd6:	f7ff f935 	bl	8000e44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bda:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	4a19      	ldr	r2, [pc, #100]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be6:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf2:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a13      	ldr	r2, [pc, #76]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_UART_MspInit+0x3f8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c24:	2307      	movs	r3, #7
 8001c26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <HAL_UART_MspInit+0x400>)
 8001c32:	f002 ff91 	bl	8004b58 <HAL_GPIO_Init>
}
 8001c36:	bf00      	nop
 8001c38:	37c0      	adds	r7, #192	@ 0xc0
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40004400 	.word	0x40004400
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	20000878 	.word	0x20000878
 8001c54:	40026088 	.word	0x40026088
 8001c58:	200008d8 	.word	0x200008d8
 8001c5c:	400260a0 	.word	0x400260a0
 8001c60:	40004800 	.word	0x40004800

08001c64 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c68:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c72:	2206      	movs	r2, #6
 8001c74:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c84:	2202      	movs	r2, #2
 8001c86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c94:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ca8:	f004 fffd 	bl	8006ca6 <HAL_PCD_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001cb2:	f7ff f8c7 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000938 	.word	0x20000938

08001cc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0ac      	sub	sp, #176	@ 0xb0
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	2284      	movs	r2, #132	@ 0x84
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f015 f8fa 	bl	8016eda <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cee:	d159      	bne.n	8001da4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001cf0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cf4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 fde5 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001d0c:	f7ff f89a 	bl	8000e44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d14:	4a25      	ldr	r2, [pc, #148]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1c:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d28:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001d2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d42:	230a      	movs	r3, #10
 8001d44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4818      	ldr	r0, [pc, #96]	@ (8001db0 <HAL_PCD_MspInit+0xf0>)
 8001d50:	f002 ff02 	bl	8004b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4810      	ldr	r0, [pc, #64]	@ (8001db0 <HAL_PCD_MspInit+0xf0>)
 8001d70:	f002 fef2 	bl	8004b58 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d74:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d78:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d7e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d80:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <HAL_PCD_MspInit+0xec>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001da4:	bf00      	nop
 8001da6:	37b0      	adds	r7, #176	@ 0xb0
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001db8:	f7ff fc48 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001de2:	f015 f8c9 	bl	8016f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7fe ff9d 	bl	8000d24 <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001df8:	0801a814 	.word	0x0801a814
  ldr r2, =_sbss
 8001dfc:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001e00:	20008ad4 	.word	0x20008ad4

08001e04 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <CAN1_RX0_IRQHandler>

08001e06 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <LAN8742_RegisterBusIO+0x28>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <LAN8742_RegisterBusIO+0x28>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <LAN8742_RegisterBusIO+0x28>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e014      	b.n	8001e5e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d139      	bne.n	8001efa <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e01c      	b.n	8001eda <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f107 020c 	add.w	r2, r7, #12
 8001ea8:	2112      	movs	r1, #18
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	4798      	blx	r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da03      	bge.n	8001ebc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001eb4:	f06f 0304 	mvn.w	r3, #4
 8001eb8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001eba:	e00b      	b.n	8001ed4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d105      	bne.n	8001ed4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
         break;
 8001ed2:	e005      	b.n	8001ee0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b1f      	cmp	r3, #31
 8001ede:	d9df      	bls.n	8001ea0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b1f      	cmp	r3, #31
 8001ee6:	d902      	bls.n	8001eee <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ee8:	f06f 0302 	mvn.w	r3, #2
 8001eec:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001efa:	693b      	ldr	r3, [r7, #16]
 }
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6810      	ldr	r0, [r2, #0]
 8001f18:	f107 020c 	add.w	r2, r7, #12
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4798      	blx	r3
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da02      	bge.n	8001f2c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f26:	f06f 0304 	mvn.w	r3, #4
 8001f2a:	e06e      	b.n	800200a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6810      	ldr	r0, [r2, #0]
 8001f34:	f107 020c 	add.w	r2, r7, #12
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4798      	blx	r3
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da02      	bge.n	8001f48 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f42:	f06f 0304 	mvn.w	r3, #4
 8001f46:	e060      	b.n	800200a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e059      	b.n	800200a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6810      	ldr	r0, [r2, #0]
 8001f5e:	f107 020c 	add.w	r2, r7, #12
 8001f62:	2100      	movs	r1, #0
 8001f64:	4798      	blx	r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da02      	bge.n	8001f72 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f6c:	f06f 0304 	mvn.w	r3, #4
 8001f70:	e04b      	b.n	800200a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d11b      	bne.n	8001fb4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <LAN8742_GetLinkState+0x90>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f90:	2302      	movs	r3, #2
 8001f92:	e03a      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e033      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001fac:	2304      	movs	r3, #4
 8001fae:	e02c      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	e02a      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6810      	ldr	r0, [r2, #0]
 8001fbc:	f107 020c 	add.w	r2, r7, #12
 8001fc0:	211f      	movs	r1, #31
 8001fc2:	4798      	blx	r3
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da02      	bge.n	8001fd0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001fca:	f06f 0304 	mvn.w	r3, #4
 8001fce:	e01c      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e015      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 031c 	and.w	r3, r3, #28
 8001fe4:	2b18      	cmp	r3, #24
 8001fe6:	d101      	bne.n	8001fec <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e00e      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 031c 	and.w	r3, r3, #28
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d101      	bne.n	8001ffa <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e007      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 031c 	and.w	r3, r3, #28
 8002000:	2b14      	cmp	r3, #20
 8002002:	d101      	bne.n	8002008 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002004:	2304      	movs	r3, #4
 8002006:	e000      	b.n	800200a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002008:	2305      	movs	r3, #5
    }
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002016:	2003      	movs	r0, #3
 8002018:	f000 fef6 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201c:	2000      	movs	r0, #0
 800201e:	f000 f805 	bl	800202c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002022:	f7ff f941 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_InitTick+0x54>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_InitTick+0x58>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f000 ff11 	bl	8002e72 <HAL_SYSTICK_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00e      	b.n	8002078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d80a      	bhi.n	8002076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f000 fed9 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800206c:	4a06      	ldr	r2, [pc, #24]	@ (8002088 <HAL_InitTick+0x5c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000000 	.word	0x20000000
 8002084:	20000008 	.word	0x20000008
 8002088:	20000004 	.word	0x20000004

0800208c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_IncTick+0x20>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_IncTick+0x24>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <HAL_IncTick+0x24>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008
 80020b0:	20000e18 	.word	0x20000e18

080020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000e18 	.word	0x20000e18

080020cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff ffee 	bl	80020b4 <HAL_GetTick>
 80020d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d005      	beq.n	80020f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <HAL_Delay+0x44>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f2:	bf00      	nop
 80020f4:	f7ff ffde 	bl	80020b4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f7      	bhi.n	80020f4 <HAL_Delay+0x28>
  {
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000008 	.word	0x20000008

08002114 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e031      	b.n	800218e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe faa4 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <HAL_ADC_Init+0x84>)
 8002158:	4013      	ands	r3, r2
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fbfa 	bl	800295c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	@ 0x40
 800217e:	e001      	b.n	8002184 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	ffffeefd 	.word	0xffffeefd

0800219c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d049      	beq.n	8002266 <HAL_ADC_IRQHandler+0xca>
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d046      	beq.n	8002266 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12b      	bne.n	8002256 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d127      	bne.n	8002256 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800221e:	2b00      	cmp	r3, #0
 8002220:	d119      	bne.n	8002256 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0220 	bic.w	r2, r2, #32
 8002230:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f013 ff1e 	bl	8016098 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0212 	mvn.w	r2, #18
 8002264:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002274:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d057      	beq.n	800232c <HAL_ADC_IRQHandler+0x190>
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d054      	beq.n	800232c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d139      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d12b      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d124      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11d      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d119      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fc99 	bl	8002c54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 020c 	mvn.w	r2, #12
 800232a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d017      	beq.n	8002372 <HAL_ADC_IRQHandler+0x1d6>
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d014      	beq.n	8002372 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d10d      	bne.n	8002372 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f98c 	bl	8002680 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002380:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d015      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x218>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0220 	mvn.w	r2, #32
 80023a2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f975 	bl	8002694 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f06f 0220 	mvn.w	r2, #32
 80023b2:	601a      	str	r2, [r3, #0]
  }
}
 80023b4:	bf00      	nop
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Start_DMA+0x22>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0d6      	b.n	800258c <HAL_ADC_Start_DMA+0x1d0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d018      	beq.n	8002426 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002404:	4b63      	ldr	r3, [pc, #396]	@ (8002594 <HAL_ADC_Start_DMA+0x1d8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a63      	ldr	r2, [pc, #396]	@ (8002598 <HAL_ADC_Start_DMA+0x1dc>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9a      	lsrs	r2, r3, #18
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002418:	e002      	b.n	8002420 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3b01      	subs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	f040 809e 	bne.w	8002572 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800243a:	4b58      	ldr	r3, [pc, #352]	@ (800259c <HAL_ADC_Start_DMA+0x1e0>)
 800243c:	4013      	ands	r3, r2
 800243e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800245c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002470:	d106      	bne.n	8002480 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f023 0206 	bic.w	r2, r3, #6
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
 800247e:	e002      	b.n	8002486 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	4a43      	ldr	r2, [pc, #268]	@ (80025a0 <HAL_ADC_Start_DMA+0x1e4>)
 8002494:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249a:	4a42      	ldr	r2, [pc, #264]	@ (80025a4 <HAL_ADC_Start_DMA+0x1e8>)
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a2:	4a41      	ldr	r2, [pc, #260]	@ (80025a8 <HAL_ADC_Start_DMA+0x1ec>)
 80024a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80024be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	334c      	adds	r3, #76	@ 0x4c
 80024da:	4619      	mov	r1, r3
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f000 fd82 	bl	8002fe8 <HAL_DMA_Start_IT>
 80024e4:	4603      	mov	r3, r0
 80024e6:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80024e8:	4b30      	ldr	r3, [pc, #192]	@ (80025ac <HAL_ADC_Start_DMA+0x1f0>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10f      	bne.n	8002514 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d143      	bne.n	800258a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	e03a      	b.n	800258a <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a25      	ldr	r2, [pc, #148]	@ (80025b0 <HAL_ADC_Start_DMA+0x1f4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10e      	bne.n	800253c <HAL_ADC_Start_DMA+0x180>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800253a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_ADC_Start_DMA+0x1f0>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d120      	bne.n	800258a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <HAL_ADC_Start_DMA+0x1f8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d11b      	bne.n	800258a <HAL_ADC_Start_DMA+0x1ce>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d114      	bne.n	800258a <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e00b      	b.n	800258a <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000000 	.word	0x20000000
 8002598:	431bde83 	.word	0x431bde83
 800259c:	fffff8fe 	.word	0xfffff8fe
 80025a0:	08002b51 	.word	0x08002b51
 80025a4:	08002c0b 	.word	0x08002c0b
 80025a8:	08002c27 	.word	0x08002c27
 80025ac:	40012300 	.word	0x40012300
 80025b0:	40012000 	.word	0x40012000
 80025b4:	40012200 	.word	0x40012200

080025b8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_Stop_DMA+0x1a>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e046      	b.n	8002660 <HAL_ADC_Stop_DMA+0xa8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d12e      	bne.n	8002656 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002606:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d10f      	bne.n	8002636 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fd44 	bl	80030a8 <HAL_DMA_Abort>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002644:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800264a:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <HAL_ADC_Stop_DMA+0xb0>)
 800264c:	4013      	ands	r3, r2
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	ffffeefe 	.word	0xffffeefe

0800266c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1c>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e13a      	b.n	800293a <HAL_ADC_ConfigChannel+0x292>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d93a      	bls.n	800274a <HAL_ADC_ConfigChannel+0xa2>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026dc:	d035      	beq.n	800274a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68d9      	ldr	r1, [r3, #12]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	2207      	movs	r2, #7
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a8f      	ldr	r2, [pc, #572]	@ (8002948 <HAL_ADC_ConfigChannel+0x2a0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10a      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	061a      	lsls	r2, r3, #24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002722:	e039      	b.n	8002798 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68d9      	ldr	r1, [r3, #12]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	4603      	mov	r3, r0
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4403      	add	r3, r0
 800273c:	3b1e      	subs	r3, #30
 800273e:	409a      	lsls	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002748:	e026      	b.n	8002798 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6919      	ldr	r1, [r3, #16]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2207      	movs	r2, #7
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43da      	mvns	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	400a      	ands	r2, r1
 8002770:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6919      	ldr	r1, [r3, #16]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	4603      	mov	r3, r0
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4403      	add	r3, r0
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	409a      	lsls	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b06      	cmp	r3, #6
 800279e:	d824      	bhi.n	80027ea <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b05      	subs	r3, #5
 80027b2:	221f      	movs	r2, #31
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43da      	mvns	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	400a      	ands	r2, r1
 80027c0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b05      	subs	r3, #5
 80027dc:	fa00 f203 	lsl.w	r2, r0, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80027e8:	e04c      	b.n	8002884 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d824      	bhi.n	800283c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b23      	subs	r3, #35	@ 0x23
 8002804:	221f      	movs	r2, #31
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	400a      	ands	r2, r1
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3b23      	subs	r3, #35	@ 0x23
 800282e:	fa00 f203 	lsl.w	r2, r0, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	631a      	str	r2, [r3, #48]	@ 0x30
 800283a:	e023      	b.n	8002884 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b41      	subs	r3, #65	@ 0x41
 800284e:	221f      	movs	r2, #31
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43da      	mvns	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	400a      	ands	r2, r1
 800285c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b41      	subs	r3, #65	@ 0x41
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a30      	ldr	r2, [pc, #192]	@ (800294c <HAL_ADC_ConfigChannel+0x2a4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10a      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1fc>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002896:	d105      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002898:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a2c      	ldr	r2, [pc, #176]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 800289e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80028a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a28      	ldr	r2, [pc, #160]	@ (800294c <HAL_ADC_ConfigChannel+0x2a4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10f      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x226>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d10b      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a25      	ldr	r2, [pc, #148]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80028bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028c2:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4a22      	ldr	r2, [pc, #136]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80028c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1e      	ldr	r2, [pc, #120]	@ (800294c <HAL_ADC_ConfigChannel+0x2a4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d12b      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x288>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <HAL_ADC_ConfigChannel+0x2a0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d003      	beq.n	80028ea <HAL_ADC_ConfigChannel+0x242>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b11      	cmp	r3, #17
 80028e8:	d122      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80028ea:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80028f0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80028f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a15      	ldr	r2, [pc, #84]	@ (8002950 <HAL_ADC_ConfigChannel+0x2a8>)
 80028fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002900:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a10      	ldr	r2, [pc, #64]	@ (8002948 <HAL_ADC_ConfigChannel+0x2a0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d111      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <HAL_ADC_ConfigChannel+0x2ac>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a11      	ldr	r2, [pc, #68]	@ (8002958 <HAL_ADC_ConfigChannel+0x2b0>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9a      	lsrs	r2, r3, #18
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002922:	e002      	b.n	800292a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3b01      	subs	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f9      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	10000012 	.word	0x10000012
 800294c:	40012000 	.word	0x40012000
 8002950:	40012300 	.word	0x40012300
 8002954:	20000000 	.word	0x20000000
 8002958:	431bde83 	.word	0x431bde83

0800295c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002964:	4b78      	ldr	r3, [pc, #480]	@ (8002b48 <ADC_Init+0x1ec>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a77      	ldr	r2, [pc, #476]	@ (8002b48 <ADC_Init+0x1ec>)
 800296a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800296e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002970:	4b75      	ldr	r3, [pc, #468]	@ (8002b48 <ADC_Init+0x1ec>)
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4973      	ldr	r1, [pc, #460]	@ (8002b48 <ADC_Init+0x1ec>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800298c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	021a      	lsls	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	4a58      	ldr	r2, [pc, #352]	@ (8002b4c <ADC_Init+0x1f0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6899      	ldr	r1, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	e00f      	b.n	8002a56 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0202 	bic.w	r2, r2, #2
 8002a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6899      	ldr	r1, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	005a      	lsls	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002aa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	035a      	lsls	r2, r3, #13
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	e007      	b.n	8002acc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	051a      	lsls	r2, r3, #20
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b0e:	025a      	lsls	r2, r3, #9
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	029a      	lsls	r2, r3, #10
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40012300 	.word	0x40012300
 8002b4c:	0f000001 	.word	0x0f000001

08002b50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d13c      	bne.n	8002be4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d12b      	bne.n	8002bdc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d127      	bne.n	8002bdc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d119      	bne.n	8002bdc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0220 	bic.w	r2, r2, #32
 8002bb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f013 fa5b 	bl	8016098 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002be2:	e00e      	b.n	8002c02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fd4f 	bl	8002694 <HAL_ADC_ErrorCallback>
}
 8002bf6:	e004      	b.n	8002c02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fd27 	bl	800266c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2240      	movs	r2, #64	@ 0x40
 8002c38:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f043 0204 	orr.w	r2, r3, #4
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff fd24 	bl	8002694 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00
 8002cac:	05fa0000 	.word	0x05fa0000

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	@ (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff29 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff3e 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff8e 	bl	8002d5c <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5d 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff31 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa2 	bl	8002dc4 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff f90c 	bl	80020b4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e099      	b.n	8002fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec8:	e00f      	b.n	8002eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eca:	f7ff f8f3 	bl	80020b4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d908      	bls.n	8002eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e078      	b.n	8002fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e8      	bne.n	8002eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4b38      	ldr	r3, [pc, #224]	@ (8002fe4 <HAL_DMA_Init+0x158>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d107      	bne.n	8002f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0307 	bic.w	r3, r3, #7
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d117      	bne.n	8002fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb17 	bl	80035c4 <DMA_CheckFifoParam>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2240      	movs	r2, #64	@ 0x40
 8002fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002faa:	2301      	movs	r3, #1
 8002fac:	e016      	b.n	8002fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 face 	bl	8003558 <DMA_CalcBaseAndBitshift>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	223f      	movs	r2, #63	@ 0x3f
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	f010803f 	.word	0xf010803f

08002fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_DMA_Start_IT+0x26>
 800300a:	2302      	movs	r3, #2
 800300c:	e048      	b.n	80030a0 <HAL_DMA_Start_IT+0xb8>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d137      	bne.n	8003092 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa60 	bl	80034fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	223f      	movs	r2, #63	@ 0x3f
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0216 	orr.w	r2, r2, #22
 8003056:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003066:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0208 	orr.w	r2, r2, #8
 800307e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e005      	b.n	800309e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800309a:	2302      	movs	r3, #2
 800309c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800309e:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030b6:	f7fe fffd 	bl	80020b4 <HAL_GetTick>
 80030ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d008      	beq.n	80030da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e052      	b.n	8003180 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0216 	bic.w	r2, r2, #22
 80030e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_DMA_Abort+0x62>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0208 	bic.w	r2, r2, #8
 8003118:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312a:	e013      	b.n	8003154 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800312c:	f7fe ffc2 	bl	80020b4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b05      	cmp	r3, #5
 8003138:	d90c      	bls.n	8003154 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2203      	movs	r2, #3
 8003144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e015      	b.n	8003180 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e4      	bne.n	800312c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	223f      	movs	r2, #63	@ 0x3f
 8003168:	409a      	lsls	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d004      	beq.n	80031a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2280      	movs	r2, #128	@ 0x80
 80031a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00c      	b.n	80031c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2205      	movs	r2, #5
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80031d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003414 <HAL_DMA_IRQHandler+0x248>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003418 <HAL_DMA_IRQHandler+0x24c>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	2208      	movs	r2, #8
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01a      	beq.n	8003238 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0204 	bic.w	r2, r2, #4
 800321e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	2208      	movs	r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	2201      	movs	r2, #1
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2204      	movs	r2, #4
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d012      	beq.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2204      	movs	r2, #4
 8003292:	409a      	lsls	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2210      	movs	r2, #16
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d043      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03c      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	2210      	movs	r2, #16
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d024      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
 80032fa:	e01f      	b.n	800333c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
 800330c:	e016      	b.n	800333c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0208 	bic.w	r2, r2, #8
 800332a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	2220      	movs	r2, #32
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 808f 	beq.w	800346c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8087 	beq.w	800346c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	2220      	movs	r2, #32
 8003364:	409a      	lsls	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b05      	cmp	r3, #5
 8003374:	d136      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0216 	bic.w	r2, r2, #22
 8003384:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003394:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x1da>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	223f      	movs	r2, #63	@ 0x3f
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07e      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
        }
        return;
 80033e2:	e079      	b.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	2b00      	cmp	r3, #0
 8003406:	d031      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
 8003410:	e02c      	b.n	800346c <HAL_DMA_IRQHandler+0x2a0>
 8003412:	bf00      	nop
 8003414:	20000000 	.word	0x20000000
 8003418:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d023      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	e01e      	b.n	800346c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0210 	bic.w	r2, r2, #16
 800344a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003470:	2b00      	cmp	r3, #0
 8003472:	d032      	beq.n	80034da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d022      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2205      	movs	r2, #5
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3301      	adds	r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d307      	bcc.n	80034b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f2      	bne.n	8003498 <HAL_DMA_IRQHandler+0x2cc>
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
 80034d6:	e000      	b.n	80034da <HAL_DMA_IRQHandler+0x30e>
        return;
 80034d8:	bf00      	nop
    }
  }
}
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ee:	b2db      	uxtb	r3, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003518:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b40      	cmp	r3, #64	@ 0x40
 8003528:	d108      	bne.n	800353c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800353a:	e007      	b.n	800354c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	3b10      	subs	r3, #16
 8003568:	4a13      	ldr	r2, [pc, #76]	@ (80035b8 <DMA_CalcBaseAndBitshift+0x60>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003572:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <DMA_CalcBaseAndBitshift+0x64>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d908      	bls.n	8003598 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <DMA_CalcBaseAndBitshift+0x68>)
 800358e:	4013      	ands	r3, r2
 8003590:	1d1a      	adds	r2, r3, #4
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	659a      	str	r2, [r3, #88]	@ 0x58
 8003596:	e006      	b.n	80035a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <DMA_CalcBaseAndBitshift+0x68>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	aaaaaaab 	.word	0xaaaaaaab
 80035bc:	0801a630 	.word	0x0801a630
 80035c0:	fffffc00 	.word	0xfffffc00

080035c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11f      	bne.n	800361e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d856      	bhi.n	8003692 <DMA_CheckFifoParam+0xce>
 80035e4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ec <DMA_CheckFifoParam+0x28>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	0800360f 	.word	0x0800360f
 80035f4:	080035fd 	.word	0x080035fd
 80035f8:	08003693 	.word	0x08003693
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d046      	beq.n	8003696 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360c:	e043      	b.n	8003696 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003616:	d140      	bne.n	800369a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e03d      	b.n	800369a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	d121      	bne.n	800366c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d837      	bhi.n	800369e <DMA_CheckFifoParam+0xda>
 800362e:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <DMA_CheckFifoParam+0x70>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003645 	.word	0x08003645
 8003638:	0800364b 	.word	0x0800364b
 800363c:	08003645 	.word	0x08003645
 8003640:	0800365d 	.word	0x0800365d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	e030      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d025      	beq.n	80036a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e022      	b.n	80036a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003664:	d11f      	bne.n	80036a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800366a:	e01c      	b.n	80036a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d903      	bls.n	800367a <DMA_CheckFifoParam+0xb6>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d003      	beq.n	8003680 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003678:	e018      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      break;
 800367e:	e015      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e00b      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;
 8003692:	bf00      	nop
 8003694:	e00a      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
 8003698:	e008      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 800369a:	bf00      	nop
 800369c:	e006      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
 80036a0:	e004      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;   
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
    }
  } 
  
  return status; 
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e086      	b.n	80037dc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f008 fa1f 	bl	800bb24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e6:	4b3f      	ldr	r3, [pc, #252]	@ (80037e4 <HAL_ETH_Init+0x128>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	4a3e      	ldr	r2, [pc, #248]	@ (80037e4 <HAL_ETH_Init+0x128>)
 80036ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f2:	4b3c      	ldr	r3, [pc, #240]	@ (80037e4 <HAL_ETH_Init+0x128>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80036fe:	4b3a      	ldr	r3, [pc, #232]	@ (80037e8 <HAL_ETH_Init+0x12c>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a39      	ldr	r2, [pc, #228]	@ (80037e8 <HAL_ETH_Init+0x12c>)
 8003704:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003708:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800370a:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <HAL_ETH_Init+0x12c>)
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4935      	ldr	r1, [pc, #212]	@ (80037e8 <HAL_ETH_Init+0x12c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003718:	4b33      	ldr	r3, [pc, #204]	@ (80037e8 <HAL_ETH_Init+0x12c>)
 800371a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003732:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003734:	f7fe fcbe 	bl	80020b4 <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800373a:	e011      	b.n	8003760 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800373c:	f7fe fcba 	bl	80020b4 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800374a:	d909      	bls.n	8003760 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2204      	movs	r2, #4
 8003750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	22e0      	movs	r2, #224	@ 0xe0
 8003758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e03d      	b.n	80037dc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e4      	bne.n	800373c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 ff34 	bl	80045e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 ffdf 	bl	800473c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 f835 	bl	80047ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	461a      	mov	r2, r3
 800378a:	2100      	movs	r1, #0
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 ff9d 	bl	80046cc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80037a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b0f      	ldr	r3, [pc, #60]	@ (80037ec <HAL_ETH_Init+0x130>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80037c6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2210      	movs	r2, #16
 80037d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40013800 	.word	0x40013800
 80037ec:	00020060 	.word	0x00020060

080037f0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d15f      	bne.n	80038c2 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2204      	movs	r2, #4
 8003814:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa2e 	bl	8003c78 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003824:	2001      	movs	r0, #1
 8003826:	f7fe fc51 	bl	80020cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003844:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003848:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003860:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fd58 	bl	8004318 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0208 	orr.w	r2, r2, #8
 8003876:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003880:	2001      	movs	r0, #1
 8003882:	f7fe fc23 	bl	80020cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0204 	orr.w	r2, r2, #4
 800389c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038a6:	69d9      	ldr	r1, [r3, #28]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <HAL_ETH_Start_IT+0xdc>)
 80038ae:	430b      	orrs	r3, r1
 80038b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038b4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2240      	movs	r2, #64	@ 0x40
 80038ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	0001a0c1 	.word	0x0001a0c1

080038d0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038de:	2b40      	cmp	r3, #64	@ 0x40
 80038e0:	d16e      	bne.n	80039c0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b34      	ldr	r3, [pc, #208]	@ (80039cc <HAL_ETH_Stop_IT+0xfc>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003900:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003914:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003918:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	f023 0302 	bic.w	r3, r3, #2
 800392c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003930:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0204 	bic.w	r2, r2, #4
 8003940:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800394a:	2001      	movs	r0, #1
 800394c:	f7fe fbbe 	bl	80020cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fcdd 	bl	8004318 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0208 	bic.w	r2, r2, #8
 800396c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003976:	2001      	movs	r0, #1
 8003978:	f7fe fba8 	bl	80020cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e00e      	b.n	80039a8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	3212      	adds	r2, #18
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d9ed      	bls.n	800398a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2210      	movs	r2, #16
 80039b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	fffe5f3e 	.word	0xfffe5f3e

080039d0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e8:	f043 0201 	orr.w	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e07c      	b.n	8003af0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039fc:	2b40      	cmp	r3, #64	@ 0x40
 80039fe:	d176      	bne.n	8003aee <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003a00:	2200      	movs	r2, #0
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 ff61 	bl	80048cc <ETH_Prepare_Tx_Descriptors>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e065      	b.n	8003af0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a24:	f3bf 8f4f 	dsb	sy
}
 8003a28:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3206      	adds	r2, #6
 8003a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a36:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d904      	bls.n	8003a54 <HAL_ETH_Transmit+0x84>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4e:	1f1a      	subs	r2, r3, #4
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3106      	adds	r1, #6
 8003a60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a68:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003a6a:	f7fe fb23 	bl	80020b4 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a70:	e037      	b.n	8003ae2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d011      	beq.n	8003aa8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	f043 0208 	orr.w	r2, r3, #8
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e023      	b.n	8003af0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d018      	beq.n	8003ae2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fe fb00 	bl	80020b4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <HAL_ETH_Transmit+0xf6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10d      	bne.n	8003ae2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003acc:	f043 0204 	orr.w	r2, r3, #4
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003adc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e006      	b.n	8003af0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	dbc3      	blt.n	8003a72 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0a4      	b.n	8003c6e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b2a:	2b40      	cmp	r3, #64	@ 0x40
 8003b2c:	d001      	beq.n	8003b32 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e09d      	b.n	8003c6e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b36:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	3212      	adds	r2, #18
 8003b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b42:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b48:	f1c3 0304 	rsb	r3, r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003b4e:	e066      	b.n	8003c1e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <HAL_ETH_ReadData+0x88>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03c      	beq.n	8003bfa <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ba2:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f008 f96d 	bl	800beb8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	441a      	add	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d902      	bls.n	8003c0c <HAL_ETH_ReadData+0x114>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3b04      	subs	r3, #4
 8003c0a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	3212      	adds	r2, #18
 8003c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c16:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	db06      	blt.n	8003c34 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d202      	bcs.n	8003c34 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d08d      	beq.n	8003b50 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	441a      	add	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f815 	bl	8003c78 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d108      	bne.n	8003c6c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003c84:	2301      	movs	r3, #1
 8003c86:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c8c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	3212      	adds	r2, #18
 8003c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c98:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c9e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003ca0:	e042      	b.n	8003d28 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d112      	bne.n	8003cd0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f008 f8d2 	bl	800be58 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	74fb      	strb	r3, [r7, #19]
 8003cbe:	e007      	b.n	8003cd0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d028      	beq.n	8003d28 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	4b26      	ldr	r3, [pc, #152]	@ (8003d7c <ETH_UpdateDescriptor+0x104>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	6053      	str	r3, [r2, #4]
 8003cea:	e005      	b.n	8003cf8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	3301      	adds	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d902      	bls.n	8003d16 <ETH_UpdateDescriptor+0x9e>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	3b04      	subs	r3, #4
 8003d14:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	3212      	adds	r2, #18
 8003d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d20:	617b      	str	r3, [r7, #20]
      desccount--;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <ETH_UpdateDescriptor+0xbc>
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1b6      	bne.n	8003ca2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d01a      	beq.n	8003d74 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3303      	adds	r3, #3
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003d48:	f3bf 8f5f 	dmb	sy
}
 8003d4c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6919      	ldr	r1, [r3, #16]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	18ca      	adds	r2, r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d66:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003d74:	bf00      	nop
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	80004000 	.word	0x80004000

08003d80 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003da8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed8 <HAL_ETH_IRQHandler+0x158>)
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00e      	beq.n	8003dd6 <HAL_ETH_IRQHandler+0x56>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4b43      	ldr	r3, [pc, #268]	@ (8003edc <HAL_ETH_IRQHandler+0x15c>)
 8003dce:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f891 	bl	8003ef8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00f      	beq.n	8003e00 <HAL_ETH_IRQHandler+0x80>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df2:	461a      	mov	r2, r3
 8003df4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003df8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f872 	bl	8003ee4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d042      	beq.n	8003e90 <HAL_ETH_IRQHandler+0x110>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d03d      	beq.n	8003e90 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1a:	f043 0208 	orr.w	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01a      	beq.n	8003e64 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	4b29      	ldr	r3, [pc, #164]	@ (8003ee0 <HAL_ETH_IRQHandler+0x160>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003e54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e58:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	22e0      	movs	r2, #224	@ 0xe0
 8003e5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003e62:	e012      	b.n	8003e8a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003e72:	4013      	ands	r3, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e82:	461a      	mov	r2, r3
 8003e84:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003e88:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f83e 	bl	8003f0c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00e      	beq.n	8003eb8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f838 	bl	8003f20 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d006      	beq.n	8003ed0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003ec2:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <HAL_ETH_IRQHandler+0x158>)
 8003ec4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ec8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f832 	bl	8003f34 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40013c00 	.word	0x40013c00
 8003edc:	00010040 	.word	0x00010040
 8003ee0:	007e2000 	.word	0x007e2000

08003ee4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 031c 	and.w	r3, r3, #28
 8003f64:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	02db      	lsls	r3, r3, #11
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0302 	bic.w	r3, r3, #2
 8003f86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003f98:	f7fe f88c 	bl	80020b4 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f9e:	e00d      	b.n	8003fbc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003fa0:	f7fe f888 	bl	80020b4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fae:	d301      	bcc.n	8003fb4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e010      	b.n	8003fd6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1ec      	bne.n	8003fa0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b086      	sub	sp, #24
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 031c 	and.w	r3, r3, #28
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	02db      	lsls	r3, r3, #11
 8004000:	b29b      	uxth	r3, r3
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	019b      	lsls	r3, r3, #6
 800400c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004038:	f7fe f83c 	bl	80020b4 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800403e:	e00d      	b.n	800405c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004040:	f7fe f838 	bl	80020b4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404e:	d301      	bcc.n	8004054 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e009      	b.n	8004068 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1ec      	bne.n	8004040 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0e6      	b.n	8004252 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf14      	ite	ne
 8004092:	2301      	movne	r3, #1
 8004094:	2300      	moveq	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	b29a      	uxth	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800423e:	2b00      	cmp	r3, #0
 8004240:	bf14      	ite	ne
 8004242:	2301      	movne	r3, #1
 8004244:	2300      	moveq	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e00b      	b.n	800428a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004278:	2b10      	cmp	r3, #16
 800427a:	d105      	bne.n	8004288 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800427c:	6839      	ldr	r1, [r7, #0]
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f870 	bl	8004364 <ETH_SetMACConfig>

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 031c 	bic.w	r3, r3, #28
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80042ac:	f003 fadc 	bl	8007868 <HAL_RCC_GetHCLKFreq>
 80042b0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <HAL_ETH_SetMDIOClockRange+0x74>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d804      	bhi.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e019      	b.n	80042f8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a11      	ldr	r2, [pc, #68]	@ (800430c <HAL_ETH_SetMDIOClockRange+0x78>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d204      	bcs.n	80042d6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f043 030c 	orr.w	r3, r3, #12
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e010      	b.n	80042f8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004310 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d90c      	bls.n	80042f8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <HAL_ETH_SetMDIOClockRange+0x80>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d804      	bhi.n	80042f0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e003      	b.n	80042f8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f043 0310 	orr.w	r3, r3, #16
 80042f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	611a      	str	r2, [r3, #16]
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	02160ebf 	.word	0x02160ebf
 800430c:	03938700 	.word	0x03938700
 8004310:	05f5e0ff 	.word	0x05f5e0ff
 8004314:	08f0d17f 	.word	0x08f0d17f

08004318 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004336:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800433a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004348:	2001      	movs	r0, #1
 800434a:	f7fd febf 	bl	80020cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004358:	6193      	str	r3, [r2, #24]
}
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4b53      	ldr	r3, [pc, #332]	@ (80044c8 <ETH_SetMACConfig+0x164>)
 800437a:	4013      	ands	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	7b9b      	ldrb	r3, [r3, #14]
 8004382:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	7c12      	ldrb	r2, [r2, #16]
 8004388:	2a00      	cmp	r2, #0
 800438a:	d102      	bne.n	8004392 <ETH_SetMACConfig+0x2e>
 800438c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004390:	e000      	b.n	8004394 <ETH_SetMACConfig+0x30>
 8004392:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004394:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	7c52      	ldrb	r2, [r2, #17]
 800439a:	2a00      	cmp	r2, #0
 800439c:	d102      	bne.n	80043a4 <ETH_SetMACConfig+0x40>
 800439e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80043a2:	e000      	b.n	80043a6 <ETH_SetMACConfig+0x42>
 80043a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80043a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80043ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	7fdb      	ldrb	r3, [r3, #31]
 80043b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80043b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80043ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	7f92      	ldrb	r2, [r2, #30]
 80043c0:	2a00      	cmp	r2, #0
 80043c2:	d102      	bne.n	80043ca <ETH_SetMACConfig+0x66>
 80043c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043c8:	e000      	b.n	80043cc <ETH_SetMACConfig+0x68>
 80043ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80043cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	7f1b      	ldrb	r3, [r3, #28]
 80043d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80043d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80043da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	791b      	ldrb	r3, [r3, #4]
 80043e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80043e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	d102      	bne.n	80043f4 <ETH_SetMACConfig+0x90>
 80043ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043f2:	e000      	b.n	80043f6 <ETH_SetMACConfig+0x92>
 80043f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80043f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	7bdb      	ldrb	r3, [r3, #15]
 80043fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80043fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004404:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800440c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800440e:	4313      	orrs	r3, r2
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004426:	2001      	movs	r0, #1
 8004428:	f7fd fe50 	bl	80020cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004442:	4013      	ands	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004452:	2a00      	cmp	r2, #0
 8004454:	d101      	bne.n	800445a <ETH_SetMACConfig+0xf6>
 8004456:	2280      	movs	r2, #128	@ 0x80
 8004458:	e000      	b.n	800445c <ETH_SetMACConfig+0xf8>
 800445a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800445c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004462:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800446a:	2a01      	cmp	r2, #1
 800446c:	d101      	bne.n	8004472 <ETH_SetMACConfig+0x10e>
 800446e:	2208      	movs	r2, #8
 8004470:	e000      	b.n	8004474 <ETH_SetMACConfig+0x110>
 8004472:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004474:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800447c:	2a01      	cmp	r2, #1
 800447e:	d101      	bne.n	8004484 <ETH_SetMACConfig+0x120>
 8004480:	2204      	movs	r2, #4
 8004482:	e000      	b.n	8004486 <ETH_SetMACConfig+0x122>
 8004484:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004486:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800448e:	2a01      	cmp	r2, #1
 8004490:	d101      	bne.n	8004496 <ETH_SetMACConfig+0x132>
 8004492:	2202      	movs	r2, #2
 8004494:	e000      	b.n	8004498 <ETH_SetMACConfig+0x134>
 8004496:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004498:	4313      	orrs	r3, r2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044b0:	2001      	movs	r0, #1
 80044b2:	f7fd fe0b 	bl	80020cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	619a      	str	r2, [r3, #24]
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	fd20810f 	.word	0xfd20810f

080044cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4b3d      	ldr	r3, [pc, #244]	@ (80045dc <ETH_SetDMAConfig+0x110>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	7b1b      	ldrb	r3, [r3, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <ETH_SetDMAConfig+0x2c>
 80044f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80044f6:	e000      	b.n	80044fa <ETH_SetDMAConfig+0x2e>
 80044f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	7b5b      	ldrb	r3, [r3, #13]
 80044fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004500:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	7f52      	ldrb	r2, [r2, #29]
 8004506:	2a00      	cmp	r2, #0
 8004508:	d102      	bne.n	8004510 <ETH_SetDMAConfig+0x44>
 800450a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800450e:	e000      	b.n	8004512 <ETH_SetDMAConfig+0x46>
 8004510:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004512:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	7b9b      	ldrb	r3, [r3, #14]
 8004518:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800451a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004520:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	7f1b      	ldrb	r3, [r3, #28]
 8004526:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004528:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	7f9b      	ldrb	r3, [r3, #30]
 800452e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004530:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004536:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800453e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004540:	4313      	orrs	r3, r2
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004550:	461a      	mov	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004562:	2001      	movs	r0, #1
 8004564:	f7fd fdb2 	bl	80020cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004570:	461a      	mov	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	791b      	ldrb	r3, [r3, #4]
 800457a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004580:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004586:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800458c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004594:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004596:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800459e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80045a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045c0:	2001      	movs	r0, #1
 80045c2:	f7fd fd83 	bl	80020cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6013      	str	r3, [r2, #0]
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	f8de3f23 	.word	0xf8de3f23

080045e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b0a6      	sub	sp, #152	@ 0x98
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80045f4:	2300      	movs	r3, #0
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004622:	2300      	movs	r3, #0
 8004624:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004626:	2300      	movs	r3, #0
 8004628:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800462c:	2300      	movs	r3, #0
 800462e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004636:	2300      	movs	r3, #0
 8004638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004642:	2300      	movs	r3, #0
 8004644:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004648:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800464c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800464e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800465a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fe7f 	bl	8004364 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004666:	2301      	movs	r3, #1
 8004668:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800466a:	2301      	movs	r3, #1
 800466c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004674:	2301      	movs	r3, #1
 8004676:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004688:	2300      	movs	r3, #0
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004692:	2301      	movs	r3, #1
 8004694:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004696:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800469a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800469c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046a0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80046a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046a6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff05 	bl	80044cc <ETH_SetDMAConfig>
}
 80046c2:	bf00      	nop
 80046c4:	3798      	adds	r7, #152	@ 0x98
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3305      	adds	r3, #5
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	3204      	adds	r2, #4
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4b11      	ldr	r3, [pc, #68]	@ (8004734 <ETH_MACAddressConfig+0x68>)
 80046ee:	4413      	add	r3, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3303      	adds	r3, #3
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	061a      	lsls	r2, r3, #24
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3302      	adds	r3, #2
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3301      	adds	r3, #1
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	4313      	orrs	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	7812      	ldrb	r2, [r2, #0]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <ETH_MACAddressConfig+0x6c>)
 800471e:	4413      	add	r3, r2
 8004720:	461a      	mov	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	6013      	str	r3, [r2, #0]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40028040 	.word	0x40028040
 8004738:	40028044 	.word	0x40028044

0800473c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e03e      	b.n	80047c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68d9      	ldr	r1, [r3, #12]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	440b      	add	r3, r1
 800475a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2200      	movs	r2, #0
 8004766:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2200      	movs	r2, #0
 8004772:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	3206      	adds	r2, #6
 800477c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d80c      	bhi.n	80047ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68d9      	ldr	r1, [r3, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	440b      	add	r3, r1
 80047a4:	461a      	mov	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	e004      	b.n	80047b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d9bd      	bls.n	800474a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e0:	611a      	str	r2, [r3, #16]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e048      	b.n	800488e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6919      	ldr	r1, [r3, #16]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	440b      	add	r3, r1
 800480c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2200      	movs	r2, #0
 8004824:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004838:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	3212      	adds	r2, #18
 800485a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d80c      	bhi.n	800487e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6919      	ldr	r1, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	440b      	add	r3, r1
 8004876:	461a      	mov	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	e004      	b.n	8004888 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	461a      	mov	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d9b3      	bls.n	80047fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048be:	60da      	str	r2, [r3, #12]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b091      	sub	sp, #68	@ 0x44
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3318      	adds	r3, #24
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800490a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800490e:	d007      	beq.n	8004920 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004914:	3304      	adds	r3, #4
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004920:	2302      	movs	r3, #2
 8004922:	e111      	b.n	8004b48 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004926:	3301      	adds	r3, #1
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800492a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	4b86      	ldr	r3, [pc, #536]	@ (8004b54 <ETH_Prepare_Tx_Descriptors+0x288>)
 800493a:	4013      	ands	r3, r2
 800493c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800493e:	6852      	ldr	r2, [r2, #4]
 8004940:	431a      	orrs	r2, r3
 8004942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004944:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	431a      	orrs	r2, r3
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	431a      	orrs	r2, r3
 800497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004980:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80049a6:	e082      	b.n	8004aae <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e005      	b.n	80049d4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80049d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d6:	3301      	adds	r3, #1
 80049d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d902      	bls.n	80049e6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80049e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e2:	3b04      	subs	r3, #4
 80049e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049fc:	d007      	beq.n	8004a0e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80049fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a02:	3304      	adds	r3, #4
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d029      	beq.n	8004a62 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a20:	e019      	b.n	8004a56 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004a22:	f3bf 8f5f 	dmb	sy
}
 8004a26:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a36:	3301      	adds	r3, #1
 8004a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d902      	bls.n	8004a46 <ETH_Prepare_Tx_Descriptors+0x17a>
 8004a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a42:	3b04      	subs	r3, #4
 8004a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a52:	3301      	adds	r3, #1
 8004a54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3e1      	bcc.n	8004a22 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e072      	b.n	8004b48 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a70:	3301      	adds	r3, #1
 8004a72:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	4b32      	ldr	r3, [pc, #200]	@ (8004b54 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8e:	6852      	ldr	r2, [r2, #4]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a98:	3301      	adds	r3, #1
 8004a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004a9c:	f3bf 8f5f 	dmb	sy
}
 8004aa0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f47f af78 	bne.w	80049a8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d006      	beq.n	8004acc <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	e005      	b.n	8004ad8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	6a3a      	ldr	r2, [r7, #32]
 8004ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aec:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004aee:	f3bf 8f5f 	dmb	sy
}
 8004af2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b08:	3304      	adds	r3, #4
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b14:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b16:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1a:	613b      	str	r3, [r7, #16]
  return(result);
 8004b1c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	2301      	movs	r3, #1
 8004b22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b32:	4413      	add	r3, r2
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3744      	adds	r7, #68	@ 0x44
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	ffffe000 	.word	0xffffe000

08004b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b089      	sub	sp, #36	@ 0x24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e175      	b.n	8004e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b78:	2201      	movs	r2, #1
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	f040 8164 	bne.w	8004e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d005      	beq.n	8004bae <HAL_GPIO_Init+0x56>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d130      	bne.n	8004c10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2203      	movs	r2, #3
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004be4:	2201      	movs	r2, #1
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 0201 	and.w	r2, r3, #1
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d017      	beq.n	8004c4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	2203      	movs	r2, #3
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d123      	bne.n	8004ca0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	08da      	lsrs	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3208      	adds	r2, #8
 8004c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	220f      	movs	r2, #15
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	08da      	lsrs	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3208      	adds	r2, #8
 8004c9a:	69b9      	ldr	r1, [r7, #24]
 8004c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2203      	movs	r2, #3
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 0203 	and.w	r2, r3, #3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80be 	beq.w	8004e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce2:	4b66      	ldr	r3, [pc, #408]	@ (8004e7c <HAL_GPIO_Init+0x324>)
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	4a65      	ldr	r2, [pc, #404]	@ (8004e7c <HAL_GPIO_Init+0x324>)
 8004ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cee:	4b63      	ldr	r3, [pc, #396]	@ (8004e7c <HAL_GPIO_Init+0x324>)
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004cfa:	4a61      	ldr	r2, [pc, #388]	@ (8004e80 <HAL_GPIO_Init+0x328>)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	089b      	lsrs	r3, r3, #2
 8004d00:	3302      	adds	r3, #2
 8004d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	220f      	movs	r2, #15
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a58      	ldr	r2, [pc, #352]	@ (8004e84 <HAL_GPIO_Init+0x32c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d037      	beq.n	8004d96 <HAL_GPIO_Init+0x23e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a57      	ldr	r2, [pc, #348]	@ (8004e88 <HAL_GPIO_Init+0x330>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d031      	beq.n	8004d92 <HAL_GPIO_Init+0x23a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a56      	ldr	r2, [pc, #344]	@ (8004e8c <HAL_GPIO_Init+0x334>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02b      	beq.n	8004d8e <HAL_GPIO_Init+0x236>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a55      	ldr	r2, [pc, #340]	@ (8004e90 <HAL_GPIO_Init+0x338>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d025      	beq.n	8004d8a <HAL_GPIO_Init+0x232>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a54      	ldr	r2, [pc, #336]	@ (8004e94 <HAL_GPIO_Init+0x33c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01f      	beq.n	8004d86 <HAL_GPIO_Init+0x22e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a53      	ldr	r2, [pc, #332]	@ (8004e98 <HAL_GPIO_Init+0x340>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d019      	beq.n	8004d82 <HAL_GPIO_Init+0x22a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a52      	ldr	r2, [pc, #328]	@ (8004e9c <HAL_GPIO_Init+0x344>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_GPIO_Init+0x226>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a51      	ldr	r2, [pc, #324]	@ (8004ea0 <HAL_GPIO_Init+0x348>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00d      	beq.n	8004d7a <HAL_GPIO_Init+0x222>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a50      	ldr	r2, [pc, #320]	@ (8004ea4 <HAL_GPIO_Init+0x34c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <HAL_GPIO_Init+0x21e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a4f      	ldr	r2, [pc, #316]	@ (8004ea8 <HAL_GPIO_Init+0x350>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <HAL_GPIO_Init+0x21a>
 8004d6e:	2309      	movs	r3, #9
 8004d70:	e012      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d72:	230a      	movs	r3, #10
 8004d74:	e010      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d76:	2308      	movs	r3, #8
 8004d78:	e00e      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d7a:	2307      	movs	r3, #7
 8004d7c:	e00c      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d7e:	2306      	movs	r3, #6
 8004d80:	e00a      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d82:	2305      	movs	r3, #5
 8004d84:	e008      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d86:	2304      	movs	r3, #4
 8004d88:	e006      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e004      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e002      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_GPIO_Init+0x240>
 8004d96:	2300      	movs	r3, #0
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	f002 0203 	and.w	r2, r2, #3
 8004d9e:	0092      	lsls	r2, r2, #2
 8004da0:	4093      	lsls	r3, r2
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004da8:	4935      	ldr	r1, [pc, #212]	@ (8004e80 <HAL_GPIO_Init+0x328>)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	3302      	adds	r3, #2
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004db6:	4b3d      	ldr	r3, [pc, #244]	@ (8004eac <HAL_GPIO_Init+0x354>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dda:	4a34      	ldr	r2, [pc, #208]	@ (8004eac <HAL_GPIO_Init+0x354>)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004de0:	4b32      	ldr	r3, [pc, #200]	@ (8004eac <HAL_GPIO_Init+0x354>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4013      	ands	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e04:	4a29      	ldr	r2, [pc, #164]	@ (8004eac <HAL_GPIO_Init+0x354>)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e0a:	4b28      	ldr	r3, [pc, #160]	@ (8004eac <HAL_GPIO_Init+0x354>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4013      	ands	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004eac <HAL_GPIO_Init+0x354>)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e34:	4b1d      	ldr	r3, [pc, #116]	@ (8004eac <HAL_GPIO_Init+0x354>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e58:	4a14      	ldr	r2, [pc, #80]	@ (8004eac <HAL_GPIO_Init+0x354>)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3301      	adds	r3, #1
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	f67f ae86 	bls.w	8004b78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	3724      	adds	r7, #36	@ 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40013800 	.word	0x40013800
 8004e84:	40020000 	.word	0x40020000
 8004e88:	40020400 	.word	0x40020400
 8004e8c:	40020800 	.word	0x40020800
 8004e90:	40020c00 	.word	0x40020c00
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40021400 	.word	0x40021400
 8004e9c:	40021800 	.word	0x40021800
 8004ea0:	40021c00 	.word	0x40021c00
 8004ea4:	40022000 	.word	0x40022000
 8004ea8:	40022400 	.word	0x40022400
 8004eac:	40013c00 	.word	0x40013c00

08004eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	807b      	strh	r3, [r7, #2]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ec0:	787b      	ldrb	r3, [r7, #1]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ecc:	e003      	b.n	8004ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ece:	887b      	ldrh	r3, [r7, #2]
 8004ed0:	041a      	lsls	r2, r3, #16
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	619a      	str	r2, [r3, #24]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e08b      	b.n	800500e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fb fe0c 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2224      	movs	r2, #36	@ 0x24
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0201 	bic.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	e006      	b.n	8004f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d108      	bne.n	8004f86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	e007      	b.n	8004f96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8005018 <HAL_I2C_Init+0x134>)
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1a      	ldr	r2, [r3, #32]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	02008000 	.word	0x02008000

0800501c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	461a      	mov	r2, r3
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
 800502c:	4613      	mov	r3, r2
 800502e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b20      	cmp	r3, #32
 800503a:	d17c      	bne.n	8005136 <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504a:	d101      	bne.n	8005050 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
 800504e:	e073      	b.n	8005138 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_I2C_Master_Transmit_IT+0x42>
 800505a:	2302      	movs	r3, #2
 800505c:	e06c      	b.n	8005138 <HAL_I2C_Master_Transmit_IT+0x11c>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2221      	movs	r2, #33	@ 0x21
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2210      	movs	r2, #16
 8005072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	893a      	ldrh	r2, [r7, #8]
 8005086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a2d      	ldr	r2, [pc, #180]	@ (8005140 <HAL_I2C_Master_Transmit_IT+0x124>)
 800508c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4a2c      	ldr	r2, [pc, #176]	@ (8005144 <HAL_I2C_Master_Transmit_IT+0x128>)
 8005092:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2bff      	cmp	r3, #255	@ 0xff
 800509c:	d906      	bls.n	80050ac <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	22ff      	movs	r2, #255	@ 0xff
 80050a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80050a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e007      	b.n	80050bc <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80050b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ba:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d024      	beq.n	800510e <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	3301      	adds	r3, #1
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	8979      	ldrh	r1, [r7, #10]
 8005100:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f001 fc22 	bl	8006950 <I2C_TransferConfig>
 800510c:	e009      	b.n	8005122 <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005112:	b2da      	uxtb	r2, r3
 8005114:	8979      	ldrh	r1, [r7, #10]
 8005116:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f001 fc17 	bl	8006950 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800512a:	2101      	movs	r1, #1
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f001 fc41 	bl	80069b4 <I2C_Enable_IRQ>

    return HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	e000      	b.n	8005138 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
  }
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	ffff0000 	.word	0xffff0000
 8005144:	0800545d 	.word	0x0800545d
 8005148:	80002000 	.word	0x80002000

0800514c <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	461a      	mov	r2, r3
 8005158:	460b      	mov	r3, r1
 800515a:	817b      	strh	r3, [r7, #10]
 800515c:	4613      	mov	r3, r2
 800515e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b20      	cmp	r3, #32
 800516a:	d153      	bne.n	8005214 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800517a:	d101      	bne.n	8005180 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
 800517e:	e04a      	b.n	8005216 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_I2C_Master_Receive_IT+0x42>
 800518a:	2302      	movs	r3, #2
 800518c:	e043      	b.n	8005216 <HAL_I2C_Master_Receive_IT+0xca>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2222      	movs	r2, #34	@ 0x22
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2210      	movs	r2, #16
 80051a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	893a      	ldrh	r2, [r7, #8]
 80051b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a19      	ldr	r2, [pc, #100]	@ (8005220 <HAL_I2C_Master_Receive_IT+0xd4>)
 80051bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <HAL_I2C_Master_Receive_IT+0xd8>)
 80051c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2bff      	cmp	r3, #255	@ 0xff
 80051cc:	d906      	bls.n	80051dc <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e007      	b.n	80051ec <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051ea:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	8979      	ldrh	r1, [r7, #10]
 80051f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <HAL_I2C_Master_Receive_IT+0xdc>)
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f001 fba8 	bl	8006950 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005208:	2102      	movs	r1, #2
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f001 fbd2 	bl	80069b4 <I2C_Enable_IRQ>

    return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e000      	b.n	8005216 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
  }
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	ffff0000 	.word	0xffff0000
 8005224:	0800545d 	.word	0x0800545d
 8005228:	80002400 	.word	0x80002400

0800522c <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b20      	cmp	r3, #32
 8005244:	d156      	bne.n	80052f4 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_I2C_Slave_Transmit_IT+0x28>
 8005250:	2302      	movs	r3, #2
 8005252:	e050      	b.n	80052f6 <HAL_I2C_Slave_Transmit_IT+0xca>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2221      	movs	r2, #33	@ 0x21
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005280:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4a19      	ldr	r2, [pc, #100]	@ (8005300 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 800529c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4a18      	ldr	r2, [pc, #96]	@ (8005304 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 80052a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ac:	d117      	bne.n	80052de <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80052e6:	f248 0101 	movw	r1, #32769	@ 0x8001
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f001 fb62 	bl	80069b4 <I2C_Enable_IRQ>

    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	ffff0000 	.word	0xffff0000
 8005304:	080056e1 	.word	0x080056e1

08005308 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b20      	cmp	r3, #32
 8005320:	d139      	bne.n	8005396 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_I2C_Slave_Receive_IT+0x28>
 800532c:	2302      	movs	r3, #2
 800532e:	e033      	b.n	8005398 <HAL_I2C_Slave_Receive_IT+0x90>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2222      	movs	r2, #34	@ 0x22
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800535c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a0a      	ldr	r2, [pc, #40]	@ (80053a0 <HAL_I2C_Slave_Receive_IT+0x98>)
 8005378:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a09      	ldr	r2, [pc, #36]	@ (80053a4 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800537e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005388:	f248 0102 	movw	r1, #32770	@ 0x8002
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f001 fb11 	bl	80069b4 <I2C_Enable_IRQ>

    return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e000      	b.n	8005398 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	ffff0000 	.word	0xffff0000
 80053a4:	080056e1 	.word	0x080056e1

080053a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
  }
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
 80053e8:	4613      	mov	r3, r2
 80053ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <I2C_Master_ISR_IT+0x1e>
 8005476:	2302      	movs	r3, #2
 8005478:	e12e      	b.n	80056d8 <I2C_Master_ISR_IT+0x27c>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d013      	beq.n	80054b6 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00d      	beq.n	80054b6 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2210      	movs	r2, #16
 80054a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	f043 0204 	orr.w	r2, r3, #4
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f001 fa0b 	bl	80068ca <I2C_Flush_TXDR>
 80054b4:	e0fb      	b.n	80056ae <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	089b      	lsrs	r3, r3, #2
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d023      	beq.n	800550a <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	089b      	lsrs	r3, r3, #2
 80054c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01d      	beq.n	800550a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 0304 	bic.w	r3, r3, #4
 80054d4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005508:	e0d1      	b.n	80056ae <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	099b      	lsrs	r3, r3, #6
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d12a      	bne.n	800556c <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800551e:	2b00      	cmp	r3, #0
 8005520:	d024      	beq.n	800556c <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01e      	beq.n	800556c <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80ba 	beq.w	80056ae <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	781a      	ldrb	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800556a:	e0a0      	b.n	80056ae <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	09db      	lsrs	r3, r3, #7
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d06b      	beq.n	8005650 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	099b      	lsrs	r3, r3, #6
 800557c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005580:	2b00      	cmp	r3, #0
 8005582:	d065      	beq.n	8005650 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d04e      	beq.n	800562c <I2C_Master_ISR_IT+0x1d0>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d14a      	bne.n	800562c <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2bff      	cmp	r3, #255	@ 0xff
 80055ac:	d91c      	bls.n	80055e8 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d103      	bne.n	80055ca <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80055c8:	e002      	b.n	80055d0 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	22ff      	movs	r2, #255	@ 0xff
 80055ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	8a79      	ldrh	r1, [r7, #18]
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f001 f9b5 	bl	8006950 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e6:	e032      	b.n	800564e <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055fa:	d00b      	beq.n	8005614 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005600:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005606:	8a79      	ldrh	r1, [r7, #18]
 8005608:	2000      	movs	r0, #0
 800560a:	9000      	str	r0, [sp, #0]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f001 f99f 	bl	8006950 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005612:	e01c      	b.n	800564e <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	b2da      	uxtb	r2, r3
 800561a:	8a79      	ldrh	r1, [r7, #18]
 800561c:	2300      	movs	r3, #0
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f001 f993 	bl	8006950 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800562a:	e010      	b.n	800564e <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800563a:	d003      	beq.n	8005644 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fd08 	bl	8006052 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005642:	e034      	b.n	80056ae <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005644:	2140      	movs	r1, #64	@ 0x40
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f001 f828 	bl	800669c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800564c:	e02f      	b.n	80056ae <I2C_Master_ISR_IT+0x252>
 800564e:	e02e      	b.n	80056ae <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	099b      	lsrs	r3, r3, #6
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d028      	beq.n	80056ae <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	099b      	lsrs	r3, r3, #6
 8005660:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005664:	2b00      	cmp	r3, #0
 8005666:	d022      	beq.n	80056ae <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d119      	bne.n	80056a6 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005680:	d015      	beq.n	80056ae <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800568a:	d108      	bne.n	800569e <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	e007      	b.n	80056ae <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fcd7 	bl	8006052 <I2C_ITMasterSeqCplt>
 80056a4:	e003      	b.n	80056ae <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80056a6:	2140      	movs	r1, #64	@ 0x40
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fff7 	bl	800669c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80056c6:	6979      	ldr	r1, [r7, #20]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fd5d 	bl	8006188 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <I2C_Slave_ISR_IT+0x24>
 8005700:	2302      	movs	r3, #2
 8005702:	e0ed      	b.n	80058e0 <I2C_Slave_ISR_IT+0x200>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005724:	6939      	ldr	r1, [r7, #16]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fdf8 	bl	800631c <I2C_ITSlaveCplt>
 800572c:	e0d3      	b.n	80058d6 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d04d      	beq.n	80057d6 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005742:	2b00      	cmp	r3, #0
 8005744:	d047      	beq.n	80057d6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d128      	bne.n	80057a2 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b28      	cmp	r3, #40	@ 0x28
 800575a:	d108      	bne.n	800576e <I2C_Slave_ISR_IT+0x8e>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005762:	d104      	bne.n	800576e <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005764:	6939      	ldr	r1, [r7, #16]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 ff42 	bl	80065f0 <I2C_ITListenCplt>
 800576c:	e032      	b.n	80057d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b29      	cmp	r3, #41	@ 0x29
 8005778:	d10e      	bne.n	8005798 <I2C_Slave_ISR_IT+0xb8>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005780:	d00a      	beq.n	8005798 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2210      	movs	r2, #16
 8005788:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f001 f89d 	bl	80068ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fc9b 	bl	80060cc <I2C_ITSlaveSeqCplt>
 8005796:	e01d      	b.n	80057d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2210      	movs	r2, #16
 800579e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80057a0:	e096      	b.n	80058d0 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2210      	movs	r2, #16
 80057a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	f043 0204 	orr.w	r2, r3, #4
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <I2C_Slave_ISR_IT+0xe6>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057c2:	f040 8085 	bne.w	80058d0 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	4619      	mov	r1, r3
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 ff65 	bl	800669c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80057d2:	e07d      	b.n	80058d0 <I2C_Slave_ISR_IT+0x1f0>
 80057d4:	e07c      	b.n	80058d0 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	089b      	lsrs	r3, r3, #2
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d030      	beq.n	8005844 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d02a      	beq.n	8005844 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d018      	beq.n	800582a <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d14f      	bne.n	80058d4 <I2C_Slave_ISR_IT+0x1f4>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800583a:	d04b      	beq.n	80058d4 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fc45 	bl	80060cc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005842:	e047      	b.n	80058d4 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	08db      	lsrs	r3, r3, #3
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	08db      	lsrs	r3, r3, #3
 8005854:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800585c:	6939      	ldr	r1, [r7, #16]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fb73 	bl	8005f4a <I2C_ITAddrCplt>
 8005864:	e037      	b.n	80058d6 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d031      	beq.n	80058d6 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800587a:	2b00      	cmp	r3, #0
 800587c:	d02b      	beq.n	80058d6 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d018      	beq.n	80058ba <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80058b8:	e00d      	b.n	80058d6 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058c0:	d002      	beq.n	80058c8 <I2C_Slave_ISR_IT+0x1e8>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fbff 	bl	80060cc <I2C_ITSlaveSeqCplt>
 80058ce:	e002      	b.n	80058d6 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80058d0:	bf00      	nop
 80058d2:	e000      	b.n	80058d6 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80058d4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <I2C_Master_ISR_DMA+0x1a>
 80058fe:	2302      	movs	r3, #2
 8005900:	e0f0      	b.n	8005ae4 <I2C_Master_ISR_DMA+0x1fc>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d017      	beq.n	8005946 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2210      	movs	r2, #16
 8005928:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592e:	f043 0204 	orr.w	r2, r3, #4
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005936:	2120      	movs	r1, #32
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f001 f83b 	bl	80069b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 ffc3 	bl	80068ca <I2C_Flush_TXDR>
 8005944:	e0c9      	b.n	8005ada <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	09db      	lsrs	r3, r3, #7
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8081 	beq.w	8005a56 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800595c:	2b00      	cmp	r3, #0
 800595e:	d07a      	beq.n	8005a56 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800596e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d05c      	beq.n	8005a34 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005986:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	2bff      	cmp	r3, #255	@ 0xff
 8005990:	d914      	bls.n	80059bc <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d103      	bne.n	80059ae <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80059ac:	e002      	b.n	80059b4 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	22ff      	movs	r2, #255	@ 0xff
 80059b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80059b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e010      	b.n	80059de <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059ce:	d003      	beq.n	80059d8 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e002      	b.n	80059de <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80059d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059dc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	8a79      	ldrh	r1, [r7, #18]
 80059e6:	2300      	movs	r3, #0
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 ffaf 	bl	8006950 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b22      	cmp	r3, #34	@ 0x22
 8005a0e:	d108      	bne.n	8005a22 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a1e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005a20:	e05b      	b.n	8005ada <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a30:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005a32:	e052      	b.n	8005ada <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a42:	d003      	beq.n	8005a4c <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fb04 	bl	8006052 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005a4a:	e046      	b.n	8005ada <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a4c:	2140      	movs	r1, #64	@ 0x40
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fe24 	bl	800669c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005a54:	e041      	b.n	8005ada <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	099b      	lsrs	r3, r3, #6
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d029      	beq.n	8005ab6 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	099b      	lsrs	r3, r3, #6
 8005a66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d023      	beq.n	8005ab6 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d119      	bne.n	8005aac <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a86:	d027      	beq.n	8005ad8 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a90:	d108      	bne.n	8005aa4 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aa0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005aa2:	e019      	b.n	8005ad8 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fad4 	bl	8006052 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005aaa:	e015      	b.n	8005ad8 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005aac:	2140      	movs	r1, #64	@ 0x40
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fdf4 	bl	800669c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ab4:	e010      	b.n	8005ad8 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fb59 	bl	8006188 <I2C_ITMasterCplt>
 8005ad6:	e000      	b.n	8005ada <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8005ad8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005af8:	4b94      	ldr	r3, [pc, #592]	@ (8005d4c <I2C_Mem_ISR_DMA+0x260>)
 8005afa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <I2C_Mem_ISR_DMA+0x1e>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e139      	b.n	8005d7e <I2C_Mem_ISR_DMA+0x292>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d017      	beq.n	8005b4e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2210      	movs	r2, #16
 8005b30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b36:	f043 0204 	orr.w	r2, r3, #4
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005b3e:	2120      	movs	r1, #32
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 ff37 	bl	80069b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 febf 	bl	80068ca <I2C_Flush_TXDR>
 8005b4c:	e112      	b.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00f      	beq.n	8005b7a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b78:	e0fc      	b.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	09db      	lsrs	r3, r3, #7
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d06e      	beq.n	8005c64 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	099b      	lsrs	r3, r3, #6
 8005b8a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d068      	beq.n	8005c64 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b92:	2101      	movs	r1, #1
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 ff91 	bl	8006abc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005b9a:	2110      	movs	r1, #16
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 ff09 	bl	80069b4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d056      	beq.n	8005c5a <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2bff      	cmp	r3, #255	@ 0xff
 8005bb4:	d91e      	bls.n	8005bf4 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d103      	bne.n	8005bd2 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005bd0:	e002      	b.n	8005bd8 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	22ff      	movs	r2, #255	@ 0xff
 8005bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bdc:	b299      	uxth	r1, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 feaf 	bl	8006950 <I2C_TransferConfig>
 8005bf2:	e011      	b.n	8005c18 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c02:	b299      	uxth	r1, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fe9c 	bl	8006950 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b22      	cmp	r3, #34	@ 0x22
 8005c34:	d108      	bne.n	8005c48 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c44:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005c46:	e095      	b.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c56:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005c58:	e08c      	b.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c5a:	2140      	movs	r1, #64	@ 0x40
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fd1d 	bl	800669c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005c62:	e087      	b.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	099b      	lsrs	r3, r3, #6
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d071      	beq.n	8005d54 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	099b      	lsrs	r3, r3, #6
 8005c74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d06b      	beq.n	8005d54 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 ff1c 	bl	8006abc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005c84:	2110      	movs	r1, #16
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fe94 	bl	80069b4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b22      	cmp	r3, #34	@ 0x22
 8005c96:	d101      	bne.n	8005c9c <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8005c98:	4b2d      	ldr	r3, [pc, #180]	@ (8005d50 <I2C_Mem_ISR_DMA+0x264>)
 8005c9a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2bff      	cmp	r3, #255	@ 0xff
 8005ca4:	d91e      	bls.n	8005ce4 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d103      	bne.n	8005cc2 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005cc0:	e002      	b.n	8005cc8 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	22ff      	movs	r2, #255	@ 0xff
 8005cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ccc:	b299      	uxth	r1, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 fe37 	bl	8006950 <I2C_TransferConfig>
 8005ce2:	e011      	b.n	8005d08 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fe24 	bl	8006950 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b22      	cmp	r3, #34	@ 0x22
 8005d24:	d108      	bne.n	8005d38 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d34:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d36:	e01d      	b.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d46:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d48:	e014      	b.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
 8005d4a:	bf00      	nop
 8005d4c:	80002000 	.word	0x80002000
 8005d50:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fa0a 	bl	8006188 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop

08005d88 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <I2C_Slave_ISR_DMA+0x24>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e0ca      	b.n	8005f42 <I2C_Slave_ISR_DMA+0x1ba>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 faa4 	bl	800631c <I2C_ITSlaveCplt>
 8005dd4:	e0b0      	b.n	8005f38 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 809a 	beq.w	8005f18 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	091b      	lsrs	r3, r3, #4
 8005de8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8093 	beq.w	8005f18 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0b9b      	lsrs	r3, r3, #14
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d105      	bne.n	8005e0a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0bdb      	lsrs	r3, r3, #15
 8005e02:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d07f      	beq.n	8005f0a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00d      	beq.n	8005e2e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0bdb      	lsrs	r3, r3, #15
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0b9b      	lsrs	r3, r3, #14
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d128      	bne.n	8005eaa <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b28      	cmp	r3, #40	@ 0x28
 8005e62:	d108      	bne.n	8005e76 <I2C_Slave_ISR_DMA+0xee>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e6a:	d104      	bne.n	8005e76 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fbbe 	bl	80065f0 <I2C_ITListenCplt>
 8005e74:	e048      	b.n	8005f08 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b29      	cmp	r3, #41	@ 0x29
 8005e80:	d10e      	bne.n	8005ea0 <I2C_Slave_ISR_DMA+0x118>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e88:	d00a      	beq.n	8005ea0 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2210      	movs	r2, #16
 8005e90:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fd19 	bl	80068ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f917 	bl	80060cc <I2C_ITSlaveSeqCplt>
 8005e9e:	e033      	b.n	8005f08 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005ea8:	e034      	b.n	8005f14 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2210      	movs	r2, #16
 8005eb0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb6:	f043 0204 	orr.w	r2, r3, #4
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <I2C_Slave_ISR_DMA+0x14c>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ed2:	d11f      	bne.n	8005f14 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	2b21      	cmp	r3, #33	@ 0x21
 8005ed8:	d002      	beq.n	8005ee0 <I2C_Slave_ISR_DMA+0x158>
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	2b29      	cmp	r3, #41	@ 0x29
 8005ede:	d103      	bne.n	8005ee8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2221      	movs	r2, #33	@ 0x21
 8005ee4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ee6:	e008      	b.n	8005efa <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	2b22      	cmp	r3, #34	@ 0x22
 8005eec:	d002      	beq.n	8005ef4 <I2C_Slave_ISR_DMA+0x16c>
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ef2:	d102      	bne.n	8005efa <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2222      	movs	r2, #34	@ 0x22
 8005ef8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	4619      	mov	r1, r3
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fbcb 	bl	800669c <I2C_ITError>
      if (treatdmanack == 1U)
 8005f06:	e005      	b.n	8005f14 <I2C_Slave_ISR_DMA+0x18c>
 8005f08:	e004      	b.n	8005f14 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2210      	movs	r2, #16
 8005f10:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f12:	e011      	b.n	8005f38 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8005f14:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f16:	e00f      	b.n	8005f38 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	08db      	lsrs	r3, r3, #3
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	08db      	lsrs	r3, r3, #3
 8005f28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f809 	bl	8005f4a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f60:	2b28      	cmp	r3, #40	@ 0x28
 8005f62:	d16a      	bne.n	800603a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	0c1b      	lsrs	r3, r3, #16
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005f82:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f90:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005f9e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d138      	bne.n	800601a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005fa8:	897b      	ldrh	r3, [r7, #10]
 8005faa:	09db      	lsrs	r3, r3, #7
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	89bb      	ldrh	r3, [r7, #12]
 8005fb0:	4053      	eors	r3, r2
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f003 0306 	and.w	r3, r3, #6
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11c      	bne.n	8005ff6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005fbc:	897b      	ldrh	r3, [r7, #10]
 8005fbe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d13b      	bne.n	800604a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005fe8:	89ba      	ldrh	r2, [r7, #12]
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff f9f4 	bl	80053dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ff4:	e029      	b.n	800604a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ffa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fd5c 	bl	8006abc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800600c:	89ba      	ldrh	r2, [r7, #12]
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff f9e2 	bl	80053dc <HAL_I2C_AddrCallback>
}
 8006018:	e017      	b.n	800604a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800601a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fd4c 	bl	8006abc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800602c:	89ba      	ldrh	r2, [r7, #12]
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff f9d2 	bl	80053dc <HAL_I2C_AddrCallback>
}
 8006038:	e007      	b.n	800604a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2208      	movs	r2, #8
 8006040:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b21      	cmp	r3, #33	@ 0x21
 800606c:	d115      	bne.n	800609a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2211      	movs	r2, #17
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006082:	2101      	movs	r1, #1
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fd19 	bl	8006abc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f010 f87c 	bl	8016190 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006098:	e014      	b.n	80060c4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2212      	movs	r2, #18
 80060a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80060ae:	2102      	movs	r1, #2
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fd03 	bl	8006abc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f010 f87c 	bl	80161bc <HAL_I2C_MasterRxCpltCallback>
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	0b9b      	lsrs	r3, r3, #14
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e00d      	b.n	800611e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	0bdb      	lsrs	r3, r3, #15
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800611c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b29      	cmp	r3, #41	@ 0x29
 8006128:	d112      	bne.n	8006150 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2228      	movs	r2, #40	@ 0x28
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2221      	movs	r2, #33	@ 0x21
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006138:	2101      	movs	r1, #1
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fcbe 	bl	8006abc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f010 f863 	bl	8016214 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800614e:	e017      	b.n	8006180 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b2a      	cmp	r3, #42	@ 0x2a
 800615a:	d111      	bne.n	8006180 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2228      	movs	r2, #40	@ 0x28
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2222      	movs	r2, #34	@ 0x22
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800616a:	2102      	movs	r1, #2
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fca5 	bl	8006abc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f010 f834 	bl	80161e8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2220      	movs	r2, #32
 800619c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b21      	cmp	r3, #33	@ 0x21
 80061a8:	d107      	bne.n	80061ba <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061aa:	2101      	movs	r1, #1
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fc85 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2211      	movs	r2, #17
 80061b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80061b8:	e00c      	b.n	80061d4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b22      	cmp	r3, #34	@ 0x22
 80061c4:	d106      	bne.n	80061d4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061c6:	2102      	movs	r1, #2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fc77 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2212      	movs	r2, #18
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b4d      	ldr	r3, [pc, #308]	@ (8006314 <I2C_ITMasterCplt+0x18c>)
 80061e0:	400b      	ands	r3, r1
 80061e2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a4a      	ldr	r2, [pc, #296]	@ (8006318 <I2C_ITMasterCplt+0x190>)
 80061ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	091b      	lsrs	r3, r3, #4
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2210      	movs	r2, #16
 8006202:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006208:	f043 0204 	orr.w	r2, r3, #4
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b60      	cmp	r3, #96	@ 0x60
 800621a:	d10b      	bne.n	8006234 <I2C_ITMasterCplt+0xac>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	089b      	lsrs	r3, r3, #2
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	b2db      	uxtb	r3, r3
 8006230:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006232:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fb48 	bl	80068ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b60      	cmp	r3, #96	@ 0x60
 800624a:	d002      	beq.n	8006252 <I2C_ITMasterCplt+0xca>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d006      	beq.n	8006260 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fa1f 	bl	800669c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800625e:	e054      	b.n	800630a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b21      	cmp	r3, #33	@ 0x21
 800626a:	d124      	bne.n	80062b6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b40      	cmp	r3, #64	@ 0x40
 8006284:	d10b      	bne.n	800629e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff f8b8 	bl	800540c <HAL_I2C_MemTxCpltCallback>
}
 800629c:	e035      	b.n	800630a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f00f ff6e 	bl	8016190 <HAL_I2C_MasterTxCpltCallback>
}
 80062b4:	e029      	b.n	800630a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b22      	cmp	r3, #34	@ 0x22
 80062c0:	d123      	bne.n	800630a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b40      	cmp	r3, #64	@ 0x40
 80062da:	d10b      	bne.n	80062f4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff f897 	bl	8005420 <HAL_I2C_MemRxCpltCallback>
}
 80062f2:	e00a      	b.n	800630a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f00f ff59 	bl	80161bc <HAL_I2C_MasterRxCpltCallback>
}
 800630a:	bf00      	nop
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	fe00e800 	.word	0xfe00e800
 8006318:	ffff0000 	.word	0xffff0000

0800631c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006336:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800633e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2220      	movs	r2, #32
 8006346:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	2b21      	cmp	r3, #33	@ 0x21
 800634c:	d002      	beq.n	8006354 <I2C_ITSlaveCplt+0x38>
 800634e:	7afb      	ldrb	r3, [r7, #11]
 8006350:	2b29      	cmp	r3, #41	@ 0x29
 8006352:	d108      	bne.n	8006366 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006354:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fbaf 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2221      	movs	r2, #33	@ 0x21
 8006362:	631a      	str	r2, [r3, #48]	@ 0x30
 8006364:	e019      	b.n	800639a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006366:	7afb      	ldrb	r3, [r7, #11]
 8006368:	2b22      	cmp	r3, #34	@ 0x22
 800636a:	d002      	beq.n	8006372 <I2C_ITSlaveCplt+0x56>
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006370:	d108      	bne.n	8006384 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006372:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fba0 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2222      	movs	r2, #34	@ 0x22
 8006380:	631a      	str	r2, [r3, #48]	@ 0x30
 8006382:	e00a      	b.n	800639a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	2b28      	cmp	r3, #40	@ 0x28
 8006388:	d107      	bne.n	800639a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800638a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fb94 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063a8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6859      	ldr	r1, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	4b8c      	ldr	r3, [pc, #560]	@ (80065e8 <I2C_ITSlaveCplt+0x2cc>)
 80063b6:	400b      	ands	r3, r1
 80063b8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa85 	bl	80068ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	0b9b      	lsrs	r3, r3, #14
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d013      	beq.n	80063f4 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d020      	beq.n	8006426 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063f2:	e018      	b.n	8006426 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	0bdb      	lsrs	r3, r3, #15
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d012      	beq.n	8006426 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800640e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d006      	beq.n	8006426 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	089b      	lsrs	r3, r3, #2
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d020      	beq.n	8006474 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00c      	beq.n	8006474 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d005      	beq.n	800648a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006482:	f043 0204 	orr.w	r2, r3, #4
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04a      	beq.n	800652c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d044      	beq.n	800652c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d128      	bne.n	80064fe <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b28      	cmp	r3, #40	@ 0x28
 80064b6:	d108      	bne.n	80064ca <I2C_ITSlaveCplt+0x1ae>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064be:	d104      	bne.n	80064ca <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80064c0:	6979      	ldr	r1, [r7, #20]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f894 	bl	80065f0 <I2C_ITListenCplt>
 80064c8:	e030      	b.n	800652c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b29      	cmp	r3, #41	@ 0x29
 80064d4:	d10e      	bne.n	80064f4 <I2C_ITSlaveCplt+0x1d8>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064dc:	d00a      	beq.n	80064f4 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2210      	movs	r2, #16
 80064e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f9ef 	bl	80068ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fded 	bl	80060cc <I2C_ITSlaveSeqCplt>
 80064f2:	e01b      	b.n	800652c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2210      	movs	r2, #16
 80064fa:	61da      	str	r2, [r3, #28]
 80064fc:	e016      	b.n	800652c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2210      	movs	r2, #16
 8006504:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650a:	f043 0204 	orr.w	r2, r3, #4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <I2C_ITSlaveCplt+0x204>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800651e:	d105      	bne.n	800652c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8b8 	bl	800669c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653e:	2b00      	cmp	r3, #0
 8006540:	d010      	beq.n	8006564 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f8a7 	bl	800669c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b28      	cmp	r3, #40	@ 0x28
 8006558:	d141      	bne.n	80065de <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800655a:	6979      	ldr	r1, [r7, #20]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f847 	bl	80065f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006562:	e03c      	b.n	80065de <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800656c:	d014      	beq.n	8006598 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fdac 	bl	80060cc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1d      	ldr	r2, [pc, #116]	@ (80065ec <I2C_ITSlaveCplt+0x2d0>)
 8006578:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fe ff31 	bl	80053f8 <HAL_I2C_ListenCpltCallback>
}
 8006596:	e022      	b.n	80065de <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b22      	cmp	r3, #34	@ 0x22
 80065a2:	d10e      	bne.n	80065c2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f00f fe14 	bl	80161e8 <HAL_I2C_SlaveRxCpltCallback>
}
 80065c0:	e00d      	b.n	80065de <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f00f fe1b 	bl	8016214 <HAL_I2C_SlaveTxCpltCallback>
}
 80065de:	bf00      	nop
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	fe00e800 	.word	0xfe00e800
 80065ec:	ffff0000 	.word	0xffff0000

080065f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a26      	ldr	r2, [pc, #152]	@ (8006698 <I2C_ITListenCplt+0xa8>)
 80065fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	089b      	lsrs	r3, r3, #2
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d022      	beq.n	800666e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006644:	2b00      	cmp	r3, #0
 8006646:	d012      	beq.n	800666e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f043 0204 	orr.w	r2, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800666e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa22 	bl	8006abc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2210      	movs	r2, #16
 800667e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fe feb5 	bl	80053f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	ffff0000 	.word	0xffff0000

0800669c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a6d      	ldr	r2, [pc, #436]	@ (8006870 <I2C_ITError+0x1d4>)
 80066ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	2b28      	cmp	r3, #40	@ 0x28
 80066d2:	d005      	beq.n	80066e0 <I2C_ITError+0x44>
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b29      	cmp	r3, #41	@ 0x29
 80066d8:	d002      	beq.n	80066e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80066de:	d10b      	bne.n	80066f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80066e0:	2103      	movs	r1, #3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9ea 	bl	8006abc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2228      	movs	r2, #40	@ 0x28
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a60      	ldr	r2, [pc, #384]	@ (8006874 <I2C_ITError+0x1d8>)
 80066f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80066f6:	e030      	b.n	800675a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80066f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f9dd 	bl	8006abc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f8e1 	bl	80068ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b60      	cmp	r3, #96	@ 0x60
 8006712:	d01f      	beq.n	8006754 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b20      	cmp	r3, #32
 8006728:	d114      	bne.n	8006754 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b10      	cmp	r3, #16
 8006736:	d109      	bne.n	800674c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2210      	movs	r2, #16
 800673e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006744:	f043 0204 	orr.w	r2, r3, #4
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2220      	movs	r2, #32
 8006752:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d039      	beq.n	80067dc <I2C_ITError+0x140>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b11      	cmp	r3, #17
 800676c:	d002      	beq.n	8006774 <I2C_ITError+0xd8>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b21      	cmp	r3, #33	@ 0x21
 8006772:	d133      	bne.n	80067dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800677e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006782:	d107      	bne.n	8006794 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006792:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006798:	4618      	mov	r0, r3
 800679a:	f7fc fea1 	bl	80034e0 <HAL_DMA_GetState>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d017      	beq.n	80067d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a8:	4a33      	ldr	r2, [pc, #204]	@ (8006878 <I2C_ITError+0x1dc>)
 80067aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fc fce5 	bl	8003188 <HAL_DMA_Abort_IT>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d04d      	beq.n	8006860 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80067ce:	4610      	mov	r0, r2
 80067d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80067d2:	e045      	b.n	8006860 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f851 	bl	800687c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80067da:	e041      	b.n	8006860 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d039      	beq.n	8006858 <I2C_ITError+0x1bc>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b12      	cmp	r3, #18
 80067e8:	d002      	beq.n	80067f0 <I2C_ITError+0x154>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b22      	cmp	r3, #34	@ 0x22
 80067ee:	d133      	bne.n	8006858 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067fe:	d107      	bne.n	8006810 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800680e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006814:	4618      	mov	r0, r3
 8006816:	f7fc fe63 	bl	80034e0 <HAL_DMA_GetState>
 800681a:	4603      	mov	r3, r0
 800681c:	2b01      	cmp	r3, #1
 800681e:	d017      	beq.n	8006850 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	4a14      	ldr	r2, [pc, #80]	@ (8006878 <I2C_ITError+0x1dc>)
 8006826:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006834:	4618      	mov	r0, r3
 8006836:	f7fc fca7 	bl	8003188 <HAL_DMA_Abort_IT>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d011      	beq.n	8006864 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800684a:	4610      	mov	r0, r2
 800684c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800684e:	e009      	b.n	8006864 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f813 	bl	800687c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006856:	e005      	b.n	8006864 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f80f 	bl	800687c <I2C_TreatErrorCallback>
  }
}
 800685e:	e002      	b.n	8006866 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006860:	bf00      	nop
 8006862:	e000      	b.n	8006866 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006864:	bf00      	nop
}
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	ffff0000 	.word	0xffff0000
 8006874:	080056e1 	.word	0x080056e1
 8006878:	08006913 	.word	0x08006913

0800687c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b60      	cmp	r3, #96	@ 0x60
 800688e:	d10e      	bne.n	80068ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fe fdce 	bl	8005448 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068ac:	e009      	b.n	80068c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fe fdb9 	bl	8005434 <HAL_I2C_ErrorCallback>
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d103      	bne.n	80068e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2200      	movs	r2, #0
 80068e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d007      	beq.n	8006906 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	619a      	str	r2, [r3, #24]
  }
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692c:	2200      	movs	r2, #0
 800692e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	2200      	movs	r2, #0
 800693e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff ff9b 	bl	800687c <I2C_TreatErrorCallback>
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	817b      	strh	r3, [r7, #10]
 800695e:	4613      	mov	r3, r2
 8006960:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006962:	897b      	ldrh	r3, [r7, #10]
 8006964:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006968:	7a7b      	ldrb	r3, [r7, #9]
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006970:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	4313      	orrs	r3, r2
 800697a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800697e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	0d5b      	lsrs	r3, r3, #21
 800698a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800698e:	4b08      	ldr	r3, [pc, #32]	@ (80069b0 <I2C_TransferConfig+0x60>)
 8006990:	430b      	orrs	r3, r1
 8006992:	43db      	mvns	r3, r3
 8006994:	ea02 0103 	and.w	r1, r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	03ff63ff 	.word	0x03ff63ff

080069b4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c8:	4a39      	ldr	r2, [pc, #228]	@ (8006ab0 <I2C_Enable_IRQ+0xfc>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d032      	beq.n	8006a34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80069d2:	4a38      	ldr	r2, [pc, #224]	@ (8006ab4 <I2C_Enable_IRQ+0x100>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d02d      	beq.n	8006a34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80069dc:	4a36      	ldr	r2, [pc, #216]	@ (8006ab8 <I2C_Enable_IRQ+0x104>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d028      	beq.n	8006a34 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80069e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da03      	bge.n	80069f2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80069f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80069f2:	887b      	ldrh	r3, [r7, #2]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006a02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006a14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d103      	bne.n	8006a24 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006a22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a24:	887b      	ldrh	r3, [r7, #2]
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d133      	bne.n	8006a92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f043 0320 	orr.w	r3, r3, #32
 8006a30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a32:	e02e      	b.n	8006a92 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	da03      	bge.n	8006a44 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006a42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a44:	887b      	ldrh	r3, [r7, #2]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006a54:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006a66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a68:	887b      	ldrh	r3, [r7, #2]
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d103      	bne.n	8006a76 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006a74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d103      	bne.n	8006a84 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006a82:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006a84:	887b      	ldrh	r3, [r7, #2]
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	d103      	bne.n	8006a92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a90:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6819      	ldr	r1, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	080058e9 	.word	0x080058e9
 8006ab4:	08005d89 	.word	0x08005d89
 8006ab8:	08005aed 	.word	0x08005aed

08006abc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006acc:	887b      	ldrh	r3, [r7, #2]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00f      	beq.n	8006af6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006adc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aea:	2b28      	cmp	r3, #40	@ 0x28
 8006aec:	d003      	beq.n	8006af6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006af4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006af6:	887b      	ldrh	r3, [r7, #2]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00f      	beq.n	8006b20 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006b06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b14:	2b28      	cmp	r3, #40	@ 0x28
 8006b16:	d003      	beq.n	8006b20 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006b1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da03      	bge.n	8006b30 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006b2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b30:	887b      	ldrh	r3, [r7, #2]
 8006b32:	2b10      	cmp	r3, #16
 8006b34:	d103      	bne.n	8006b3e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b3e:	887b      	ldrh	r3, [r7, #2]
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	d103      	bne.n	8006b4c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f043 0320 	orr.w	r3, r3, #32
 8006b4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b4c:	887b      	ldrh	r3, [r7, #2]
 8006b4e:	2b40      	cmp	r3, #64	@ 0x40
 8006b50:	d103      	bne.n	8006b5a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b58:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	43da      	mvns	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	400a      	ands	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d138      	bne.n	8006c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e032      	b.n	8006c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	@ 0x24
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e000      	b.n	8006c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c00:	2302      	movs	r3, #2
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d139      	bne.n	8006c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e033      	b.n	8006c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2224      	movs	r2, #36	@ 0x24
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
  }
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af02      	add	r7, sp, #8
 8006cac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e108      	b.n	8006eca <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fa fff4 	bl	8001cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2203      	movs	r2, #3
 8006cdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ce6:	d102      	bne.n	8006cee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f004 f94a 	bl	800af8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	7c1a      	ldrb	r2, [r3, #16]
 8006d00:	f88d 2000 	strb.w	r2, [sp]
 8006d04:	3304      	adds	r3, #4
 8006d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d08:	f004 f8e6 	bl	800aed8 <USB_CoreInit>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e0d5      	b.n	8006eca <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2100      	movs	r1, #0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f004 f942 	bl	800afae <USB_SetCurrentMode>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0c6      	b.n	8006eca <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]
 8006d40:	e04a      	b.n	8006dd8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d42:	7bfa      	ldrb	r2, [r7, #15]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	3315      	adds	r3, #21
 8006d52:	2201      	movs	r2, #1
 8006d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d56:	7bfa      	ldrb	r2, [r7, #15]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	3314      	adds	r3, #20
 8006d66:	7bfa      	ldrb	r2, [r7, #15]
 8006d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d6a:	7bfa      	ldrb	r2, [r7, #15]
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	b298      	uxth	r0, r3
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	332e      	adds	r3, #46	@ 0x2e
 8006d7e:	4602      	mov	r2, r0
 8006d80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d82:	7bfa      	ldrb	r2, [r7, #15]
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	440b      	add	r3, r1
 8006d90:	3318      	adds	r3, #24
 8006d92:	2200      	movs	r2, #0
 8006d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d96:	7bfa      	ldrb	r2, [r7, #15]
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	331c      	adds	r3, #28
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006daa:	7bfa      	ldrb	r2, [r7, #15]
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	440b      	add	r3, r1
 8006db8:	3320      	adds	r3, #32
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006dbe:	7bfa      	ldrb	r2, [r7, #15]
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	3324      	adds	r3, #36	@ 0x24
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	791b      	ldrb	r3, [r3, #4]
 8006ddc:	7bfa      	ldrb	r2, [r7, #15]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d3af      	bcc.n	8006d42 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
 8006de6:	e044      	b.n	8006e72 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006de8:	7bfa      	ldrb	r2, [r7, #15]
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006dfe:	7bfa      	ldrb	r2, [r7, #15]
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006e10:	7bfa      	ldrb	r2, [r7, #15]
 8006e12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e14:	7bfa      	ldrb	r2, [r7, #15]
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e2a:	7bfa      	ldrb	r2, [r7, #15]
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e40:	7bfa      	ldrb	r2, [r7, #15]
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	4613      	mov	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e56:	7bfa      	ldrb	r2, [r7, #15]
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	73fb      	strb	r3, [r7, #15]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	791b      	ldrb	r3, [r3, #4]
 8006e76:	7bfa      	ldrb	r2, [r7, #15]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d3b5      	bcc.n	8006de8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7c1a      	ldrb	r2, [r3, #16]
 8006e84:	f88d 2000 	strb.w	r2, [sp]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e8c:	f004 f8dc 	bl	800b048 <USB_DevInit>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e013      	b.n	8006eca <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7b1b      	ldrb	r3, [r3, #12]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d102      	bne.n	8006ebe <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f80b 	bl	8006ed4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f004 fa97 	bl	800b3f6 <USB_DevDisconnect>

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f02:	4b05      	ldr	r3, [pc, #20]	@ (8006f18 <HAL_PCDEx_ActivateLPM+0x44>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	10000003 	.word	0x10000003

08006f1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f20:	4b05      	ldr	r3, [pc, #20]	@ (8006f38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a04      	ldr	r2, [pc, #16]	@ (8006f38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f2a:	6013      	str	r3, [r2, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40007000 	.word	0x40007000

08006f3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f44:	2300      	movs	r3, #0
 8006f46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e291      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8087 	beq.w	800706e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f60:	4b96      	ldr	r3, [pc, #600]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 030c 	and.w	r3, r3, #12
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d00c      	beq.n	8006f86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f6c:	4b93      	ldr	r3, [pc, #588]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 030c 	and.w	r3, r3, #12
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d112      	bne.n	8006f9e <HAL_RCC_OscConfig+0x62>
 8006f78:	4b90      	ldr	r3, [pc, #576]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f84:	d10b      	bne.n	8006f9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f86:	4b8d      	ldr	r3, [pc, #564]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d06c      	beq.n	800706c <HAL_RCC_OscConfig+0x130>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d168      	bne.n	800706c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e26b      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa6:	d106      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x7a>
 8006fa8:	4b84      	ldr	r3, [pc, #528]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a83      	ldr	r2, [pc, #524]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	e02e      	b.n	8007014 <HAL_RCC_OscConfig+0xd8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x9c>
 8006fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	4b7c      	ldr	r3, [pc, #496]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a7b      	ldr	r2, [pc, #492]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006fd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	e01d      	b.n	8007014 <HAL_RCC_OscConfig+0xd8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fe0:	d10c      	bne.n	8006ffc <HAL_RCC_OscConfig+0xc0>
 8006fe2:	4b76      	ldr	r3, [pc, #472]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a75      	ldr	r2, [pc, #468]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	4b73      	ldr	r3, [pc, #460]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a72      	ldr	r2, [pc, #456]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	e00b      	b.n	8007014 <HAL_RCC_OscConfig+0xd8>
 8006ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a6e      	ldr	r2, [pc, #440]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	4b6c      	ldr	r3, [pc, #432]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a6b      	ldr	r2, [pc, #428]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 800700e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d013      	beq.n	8007044 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fb f84a 	bl	80020b4 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007024:	f7fb f846 	bl	80020b4 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	@ 0x64
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e21f      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007036:	4b61      	ldr	r3, [pc, #388]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f0      	beq.n	8007024 <HAL_RCC_OscConfig+0xe8>
 8007042:	e014      	b.n	800706e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fb f836 	bl	80020b4 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800704c:	f7fb f832 	bl	80020b4 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b64      	cmp	r3, #100	@ 0x64
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e20b      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800705e:	4b57      	ldr	r3, [pc, #348]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1f0      	bne.n	800704c <HAL_RCC_OscConfig+0x110>
 800706a:	e000      	b.n	800706e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800706c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d069      	beq.n	800714e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800707a:	4b50      	ldr	r3, [pc, #320]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 030c 	and.w	r3, r3, #12
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007086:	4b4d      	ldr	r3, [pc, #308]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	2b08      	cmp	r3, #8
 8007090:	d11c      	bne.n	80070cc <HAL_RCC_OscConfig+0x190>
 8007092:	4b4a      	ldr	r3, [pc, #296]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d116      	bne.n	80070cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800709e:	4b47      	ldr	r3, [pc, #284]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_RCC_OscConfig+0x17a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d001      	beq.n	80070b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e1df      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070b6:	4b41      	ldr	r3, [pc, #260]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	493d      	ldr	r1, [pc, #244]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ca:	e040      	b.n	800714e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d023      	beq.n	800711c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070d4:	4b39      	ldr	r3, [pc, #228]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a38      	ldr	r2, [pc, #224]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fa ffe8 	bl	80020b4 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070e8:	f7fa ffe4 	bl	80020b4 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e1bd      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070fa:	4b30      	ldr	r3, [pc, #192]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007106:	4b2d      	ldr	r3, [pc, #180]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4929      	ldr	r1, [pc, #164]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007116:	4313      	orrs	r3, r2
 8007118:	600b      	str	r3, [r1, #0]
 800711a:	e018      	b.n	800714e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800711c:	4b27      	ldr	r3, [pc, #156]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a26      	ldr	r2, [pc, #152]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007122:	f023 0301 	bic.w	r3, r3, #1
 8007126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007128:	f7fa ffc4 	bl	80020b4 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007130:	f7fa ffc0 	bl	80020b4 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e199      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007142:	4b1e      	ldr	r3, [pc, #120]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1f0      	bne.n	8007130 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d038      	beq.n	80071cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d019      	beq.n	8007196 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007162:	4b16      	ldr	r3, [pc, #88]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007166:	4a15      	ldr	r2, [pc, #84]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800716e:	f7fa ffa1 	bl	80020b4 <HAL_GetTick>
 8007172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007174:	e008      	b.n	8007188 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007176:	f7fa ff9d 	bl	80020b4 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e176      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007188:	4b0c      	ldr	r3, [pc, #48]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 800718a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0f0      	beq.n	8007176 <HAL_RCC_OscConfig+0x23a>
 8007194:	e01a      	b.n	80071cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 8007198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800719a:	4a08      	ldr	r2, [pc, #32]	@ (80071bc <HAL_RCC_OscConfig+0x280>)
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a2:	f7fa ff87 	bl	80020b4 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a8:	e00a      	b.n	80071c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071aa:	f7fa ff83 	bl	80020b4 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d903      	bls.n	80071c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e15c      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
 80071bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071c0:	4b91      	ldr	r3, [pc, #580]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80071c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1ee      	bne.n	80071aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80a4 	beq.w	8007322 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071da:	4b8b      	ldr	r3, [pc, #556]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10d      	bne.n	8007202 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e6:	4b88      	ldr	r3, [pc, #544]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	4a87      	ldr	r2, [pc, #540]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80071ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80071f2:	4b85      	ldr	r3, [pc, #532]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071fa:	60bb      	str	r3, [r7, #8]
 80071fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071fe:	2301      	movs	r3, #1
 8007200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007202:	4b82      	ldr	r3, [pc, #520]	@ (800740c <HAL_RCC_OscConfig+0x4d0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720a:	2b00      	cmp	r3, #0
 800720c:	d118      	bne.n	8007240 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800720e:	4b7f      	ldr	r3, [pc, #508]	@ (800740c <HAL_RCC_OscConfig+0x4d0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a7e      	ldr	r2, [pc, #504]	@ (800740c <HAL_RCC_OscConfig+0x4d0>)
 8007214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800721a:	f7fa ff4b 	bl	80020b4 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007222:	f7fa ff47 	bl	80020b4 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b64      	cmp	r3, #100	@ 0x64
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e120      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007234:	4b75      	ldr	r3, [pc, #468]	@ (800740c <HAL_RCC_OscConfig+0x4d0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d106      	bne.n	8007256 <HAL_RCC_OscConfig+0x31a>
 8007248:	4b6f      	ldr	r3, [pc, #444]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800724a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724c:	4a6e      	ldr	r2, [pc, #440]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	6713      	str	r3, [r2, #112]	@ 0x70
 8007254:	e02d      	b.n	80072b2 <HAL_RCC_OscConfig+0x376>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10c      	bne.n	8007278 <HAL_RCC_OscConfig+0x33c>
 800725e:	4b6a      	ldr	r3, [pc, #424]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007262:	4a69      	ldr	r2, [pc, #420]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	6713      	str	r3, [r2, #112]	@ 0x70
 800726a:	4b67      	ldr	r3, [pc, #412]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800726c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726e:	4a66      	ldr	r2, [pc, #408]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	6713      	str	r3, [r2, #112]	@ 0x70
 8007276:	e01c      	b.n	80072b2 <HAL_RCC_OscConfig+0x376>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b05      	cmp	r3, #5
 800727e:	d10c      	bne.n	800729a <HAL_RCC_OscConfig+0x35e>
 8007280:	4b61      	ldr	r3, [pc, #388]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007284:	4a60      	ldr	r2, [pc, #384]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007286:	f043 0304 	orr.w	r3, r3, #4
 800728a:	6713      	str	r3, [r2, #112]	@ 0x70
 800728c:	4b5e      	ldr	r3, [pc, #376]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800728e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007290:	4a5d      	ldr	r2, [pc, #372]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	6713      	str	r3, [r2, #112]	@ 0x70
 8007298:	e00b      	b.n	80072b2 <HAL_RCC_OscConfig+0x376>
 800729a:	4b5b      	ldr	r3, [pc, #364]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729e:	4a5a      	ldr	r2, [pc, #360]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80072a6:	4b58      	ldr	r3, [pc, #352]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072aa:	4a57      	ldr	r2, [pc, #348]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80072ac:	f023 0304 	bic.w	r3, r3, #4
 80072b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d015      	beq.n	80072e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ba:	f7fa fefb 	bl	80020b4 <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c0:	e00a      	b.n	80072d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c2:	f7fa fef7 	bl	80020b4 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e0ce      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80072da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0ee      	beq.n	80072c2 <HAL_RCC_OscConfig+0x386>
 80072e4:	e014      	b.n	8007310 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e6:	f7fa fee5 	bl	80020b4 <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ec:	e00a      	b.n	8007304 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ee:	f7fa fee1 	bl	80020b4 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e0b8      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007304:	4b40      	ldr	r3, [pc, #256]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1ee      	bne.n	80072ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d105      	bne.n	8007322 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007316:	4b3c      	ldr	r3, [pc, #240]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	4a3b      	ldr	r2, [pc, #236]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800731c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007320:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 80a4 	beq.w	8007474 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800732c:	4b36      	ldr	r3, [pc, #216]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 030c 	and.w	r3, r3, #12
 8007334:	2b08      	cmp	r3, #8
 8007336:	d06b      	beq.n	8007410 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d149      	bne.n	80073d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007340:	4b31      	ldr	r3, [pc, #196]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a30      	ldr	r2, [pc, #192]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fa feb2 	bl	80020b4 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007354:	f7fa feae 	bl	80020b4 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e087      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007366:	4b28      	ldr	r3, [pc, #160]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f0      	bne.n	8007354 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69da      	ldr	r2, [r3, #28]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	019b      	lsls	r3, r3, #6
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	085b      	lsrs	r3, r3, #1
 800738a:	3b01      	subs	r3, #1
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	061b      	lsls	r3, r3, #24
 8007396:	4313      	orrs	r3, r2
 8007398:	4a1b      	ldr	r2, [pc, #108]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 800739a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800739e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073a0:	4b19      	ldr	r3, [pc, #100]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a18      	ldr	r2, [pc, #96]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80073a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ac:	f7fa fe82 	bl	80020b4 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b4:	f7fa fe7e 	bl	80020b4 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e057      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073c6:	4b10      	ldr	r3, [pc, #64]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCC_OscConfig+0x478>
 80073d2:	e04f      	b.n	8007474 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a0b      	ldr	r2, [pc, #44]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80073da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e0:	f7fa fe68 	bl	80020b4 <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073e6:	e008      	b.n	80073fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e8:	f7fa fe64 	bl	80020b4 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e03d      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073fa:	4b03      	ldr	r3, [pc, #12]	@ (8007408 <HAL_RCC_OscConfig+0x4cc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f0      	bne.n	80073e8 <HAL_RCC_OscConfig+0x4ac>
 8007406:	e035      	b.n	8007474 <HAL_RCC_OscConfig+0x538>
 8007408:	40023800 	.word	0x40023800
 800740c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007410:	4b1b      	ldr	r3, [pc, #108]	@ (8007480 <HAL_RCC_OscConfig+0x544>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d028      	beq.n	8007470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007428:	429a      	cmp	r2, r3
 800742a:	d121      	bne.n	8007470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007436:	429a      	cmp	r2, r3
 8007438:	d11a      	bne.n	8007470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007440:	4013      	ands	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007446:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007448:	4293      	cmp	r3, r2
 800744a:	d111      	bne.n	8007470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	3b01      	subs	r3, #1
 800745a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800745c:	429a      	cmp	r2, r3
 800745e:	d107      	bne.n	8007470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800746c:	429a      	cmp	r2, r3
 800746e:	d001      	beq.n	8007474 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40023800 	.word	0x40023800

08007484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0d0      	b.n	800763e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800749c:	4b6a      	ldr	r3, [pc, #424]	@ (8007648 <HAL_RCC_ClockConfig+0x1c4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d910      	bls.n	80074cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074aa:	4b67      	ldr	r3, [pc, #412]	@ (8007648 <HAL_RCC_ClockConfig+0x1c4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f023 020f 	bic.w	r2, r3, #15
 80074b2:	4965      	ldr	r1, [pc, #404]	@ (8007648 <HAL_RCC_ClockConfig+0x1c4>)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ba:	4b63      	ldr	r3, [pc, #396]	@ (8007648 <HAL_RCC_ClockConfig+0x1c4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d001      	beq.n	80074cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0b8      	b.n	800763e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d020      	beq.n	800751a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074e4:	4b59      	ldr	r3, [pc, #356]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	4a58      	ldr	r2, [pc, #352]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 80074ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80074ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074fc:	4b53      	ldr	r3, [pc, #332]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	4a52      	ldr	r2, [pc, #328]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007502:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007508:	4b50      	ldr	r3, [pc, #320]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	494d      	ldr	r1, [pc, #308]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007516:	4313      	orrs	r3, r2
 8007518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d040      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d107      	bne.n	800753e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800752e:	4b47      	ldr	r3, [pc, #284]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d115      	bne.n	8007566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e07f      	b.n	800763e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d107      	bne.n	8007556 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007546:	4b41      	ldr	r3, [pc, #260]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d109      	bne.n	8007566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e073      	b.n	800763e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007556:	4b3d      	ldr	r3, [pc, #244]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e06b      	b.n	800763e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007566:	4b39      	ldr	r3, [pc, #228]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f023 0203 	bic.w	r2, r3, #3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	4936      	ldr	r1, [pc, #216]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007574:	4313      	orrs	r3, r2
 8007576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007578:	f7fa fd9c 	bl	80020b4 <HAL_GetTick>
 800757c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800757e:	e00a      	b.n	8007596 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007580:	f7fa fd98 	bl	80020b4 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800758e:	4293      	cmp	r3, r2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e053      	b.n	800763e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007596:	4b2d      	ldr	r3, [pc, #180]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 020c 	and.w	r2, r3, #12
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d1eb      	bne.n	8007580 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075a8:	4b27      	ldr	r3, [pc, #156]	@ (8007648 <HAL_RCC_ClockConfig+0x1c4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 030f 	and.w	r3, r3, #15
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d210      	bcs.n	80075d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075b6:	4b24      	ldr	r3, [pc, #144]	@ (8007648 <HAL_RCC_ClockConfig+0x1c4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f023 020f 	bic.w	r2, r3, #15
 80075be:	4922      	ldr	r1, [pc, #136]	@ (8007648 <HAL_RCC_ClockConfig+0x1c4>)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075c6:	4b20      	ldr	r3, [pc, #128]	@ (8007648 <HAL_RCC_ClockConfig+0x1c4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 030f 	and.w	r3, r3, #15
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d001      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e032      	b.n	800763e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d008      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075e4:	4b19      	ldr	r3, [pc, #100]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	4916      	ldr	r1, [pc, #88]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007602:	4b12      	ldr	r3, [pc, #72]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	490e      	ldr	r1, [pc, #56]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007616:	f000 f821 	bl	800765c <HAL_RCC_GetSysClockFreq>
 800761a:	4602      	mov	r2, r0
 800761c:	4b0b      	ldr	r3, [pc, #44]	@ (800764c <HAL_RCC_ClockConfig+0x1c8>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	091b      	lsrs	r3, r3, #4
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	490a      	ldr	r1, [pc, #40]	@ (8007650 <HAL_RCC_ClockConfig+0x1cc>)
 8007628:	5ccb      	ldrb	r3, [r1, r3]
 800762a:	fa22 f303 	lsr.w	r3, r2, r3
 800762e:	4a09      	ldr	r2, [pc, #36]	@ (8007654 <HAL_RCC_ClockConfig+0x1d0>)
 8007630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007632:	4b09      	ldr	r3, [pc, #36]	@ (8007658 <HAL_RCC_ClockConfig+0x1d4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f7fa fcf8 	bl	800202c <HAL_InitTick>

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	40023c00 	.word	0x40023c00
 800764c:	40023800 	.word	0x40023800
 8007650:	0801a618 	.word	0x0801a618
 8007654:	20000000 	.word	0x20000000
 8007658:	20000004 	.word	0x20000004

0800765c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800765c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007660:	b094      	sub	sp, #80	@ 0x50
 8007662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	647b      	str	r3, [r7, #68]	@ 0x44
 8007668:	2300      	movs	r3, #0
 800766a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800766c:	2300      	movs	r3, #0
 800766e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007674:	4b79      	ldr	r3, [pc, #484]	@ (800785c <HAL_RCC_GetSysClockFreq+0x200>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 030c 	and.w	r3, r3, #12
 800767c:	2b08      	cmp	r3, #8
 800767e:	d00d      	beq.n	800769c <HAL_RCC_GetSysClockFreq+0x40>
 8007680:	2b08      	cmp	r3, #8
 8007682:	f200 80e1 	bhi.w	8007848 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_RCC_GetSysClockFreq+0x34>
 800768a:	2b04      	cmp	r3, #4
 800768c:	d003      	beq.n	8007696 <HAL_RCC_GetSysClockFreq+0x3a>
 800768e:	e0db      	b.n	8007848 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007690:	4b73      	ldr	r3, [pc, #460]	@ (8007860 <HAL_RCC_GetSysClockFreq+0x204>)
 8007692:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007694:	e0db      	b.n	800784e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007696:	4b73      	ldr	r3, [pc, #460]	@ (8007864 <HAL_RCC_GetSysClockFreq+0x208>)
 8007698:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800769a:	e0d8      	b.n	800784e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800769c:	4b6f      	ldr	r3, [pc, #444]	@ (800785c <HAL_RCC_GetSysClockFreq+0x200>)
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076a6:	4b6d      	ldr	r3, [pc, #436]	@ (800785c <HAL_RCC_GetSysClockFreq+0x200>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d063      	beq.n	800777a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076b2:	4b6a      	ldr	r3, [pc, #424]	@ (800785c <HAL_RCC_GetSysClockFreq+0x200>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	099b      	lsrs	r3, r3, #6
 80076b8:	2200      	movs	r2, #0
 80076ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80076c6:	2300      	movs	r3, #0
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80076ce:	4622      	mov	r2, r4
 80076d0:	462b      	mov	r3, r5
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f04f 0100 	mov.w	r1, #0
 80076da:	0159      	lsls	r1, r3, #5
 80076dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076e0:	0150      	lsls	r0, r2, #5
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4621      	mov	r1, r4
 80076e8:	1a51      	subs	r1, r2, r1
 80076ea:	6139      	str	r1, [r7, #16]
 80076ec:	4629      	mov	r1, r5
 80076ee:	eb63 0301 	sbc.w	r3, r3, r1
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007700:	4659      	mov	r1, fp
 8007702:	018b      	lsls	r3, r1, #6
 8007704:	4651      	mov	r1, sl
 8007706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800770a:	4651      	mov	r1, sl
 800770c:	018a      	lsls	r2, r1, #6
 800770e:	4651      	mov	r1, sl
 8007710:	ebb2 0801 	subs.w	r8, r2, r1
 8007714:	4659      	mov	r1, fp
 8007716:	eb63 0901 	sbc.w	r9, r3, r1
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	f04f 0300 	mov.w	r3, #0
 8007722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800772a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800772e:	4690      	mov	r8, r2
 8007730:	4699      	mov	r9, r3
 8007732:	4623      	mov	r3, r4
 8007734:	eb18 0303 	adds.w	r3, r8, r3
 8007738:	60bb      	str	r3, [r7, #8]
 800773a:	462b      	mov	r3, r5
 800773c:	eb49 0303 	adc.w	r3, r9, r3
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	f04f 0300 	mov.w	r3, #0
 800774a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800774e:	4629      	mov	r1, r5
 8007750:	024b      	lsls	r3, r1, #9
 8007752:	4621      	mov	r1, r4
 8007754:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007758:	4621      	mov	r1, r4
 800775a:	024a      	lsls	r2, r1, #9
 800775c:	4610      	mov	r0, r2
 800775e:	4619      	mov	r1, r3
 8007760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007762:	2200      	movs	r2, #0
 8007764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007768:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800776c:	f7f8 fda0 	bl	80002b0 <__aeabi_uldivmod>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4613      	mov	r3, r2
 8007776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007778:	e058      	b.n	800782c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800777a:	4b38      	ldr	r3, [pc, #224]	@ (800785c <HAL_RCC_GetSysClockFreq+0x200>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	099b      	lsrs	r3, r3, #6
 8007780:	2200      	movs	r2, #0
 8007782:	4618      	mov	r0, r3
 8007784:	4611      	mov	r1, r2
 8007786:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800778a:	623b      	str	r3, [r7, #32]
 800778c:	2300      	movs	r3, #0
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007790:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007794:	4642      	mov	r2, r8
 8007796:	464b      	mov	r3, r9
 8007798:	f04f 0000 	mov.w	r0, #0
 800779c:	f04f 0100 	mov.w	r1, #0
 80077a0:	0159      	lsls	r1, r3, #5
 80077a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077a6:	0150      	lsls	r0, r2, #5
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4641      	mov	r1, r8
 80077ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80077b2:	4649      	mov	r1, r9
 80077b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80077c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80077c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80077cc:	ebb2 040a 	subs.w	r4, r2, sl
 80077d0:	eb63 050b 	sbc.w	r5, r3, fp
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	00eb      	lsls	r3, r5, #3
 80077de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077e2:	00e2      	lsls	r2, r4, #3
 80077e4:	4614      	mov	r4, r2
 80077e6:	461d      	mov	r5, r3
 80077e8:	4643      	mov	r3, r8
 80077ea:	18e3      	adds	r3, r4, r3
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	464b      	mov	r3, r9
 80077f0:	eb45 0303 	adc.w	r3, r5, r3
 80077f4:	607b      	str	r3, [r7, #4]
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	f04f 0300 	mov.w	r3, #0
 80077fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007802:	4629      	mov	r1, r5
 8007804:	028b      	lsls	r3, r1, #10
 8007806:	4621      	mov	r1, r4
 8007808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800780c:	4621      	mov	r1, r4
 800780e:	028a      	lsls	r2, r1, #10
 8007810:	4610      	mov	r0, r2
 8007812:	4619      	mov	r1, r3
 8007814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007816:	2200      	movs	r2, #0
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	61fa      	str	r2, [r7, #28]
 800781c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007820:	f7f8 fd46 	bl	80002b0 <__aeabi_uldivmod>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4613      	mov	r3, r2
 800782a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800782c:	4b0b      	ldr	r3, [pc, #44]	@ (800785c <HAL_RCC_GetSysClockFreq+0x200>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	0c1b      	lsrs	r3, r3, #16
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	3301      	adds	r3, #1
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800783c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800783e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007840:	fbb2 f3f3 	udiv	r3, r2, r3
 8007844:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007846:	e002      	b.n	800784e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007848:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <HAL_RCC_GetSysClockFreq+0x204>)
 800784a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800784c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800784e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007850:	4618      	mov	r0, r3
 8007852:	3750      	adds	r7, #80	@ 0x50
 8007854:	46bd      	mov	sp, r7
 8007856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800785a:	bf00      	nop
 800785c:	40023800 	.word	0x40023800
 8007860:	00f42400 	.word	0x00f42400
 8007864:	007a1200 	.word	0x007a1200

08007868 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800786c:	4b03      	ldr	r3, [pc, #12]	@ (800787c <HAL_RCC_GetHCLKFreq+0x14>)
 800786e:	681b      	ldr	r3, [r3, #0]
}
 8007870:	4618      	mov	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20000000 	.word	0x20000000

08007880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007884:	f7ff fff0 	bl	8007868 <HAL_RCC_GetHCLKFreq>
 8007888:	4602      	mov	r2, r0
 800788a:	4b05      	ldr	r3, [pc, #20]	@ (80078a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	0a9b      	lsrs	r3, r3, #10
 8007890:	f003 0307 	and.w	r3, r3, #7
 8007894:	4903      	ldr	r1, [pc, #12]	@ (80078a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007896:	5ccb      	ldrb	r3, [r1, r3]
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800789c:	4618      	mov	r0, r3
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40023800 	.word	0x40023800
 80078a4:	0801a628 	.word	0x0801a628

080078a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078ac:	f7ff ffdc 	bl	8007868 <HAL_RCC_GetHCLKFreq>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4b05      	ldr	r3, [pc, #20]	@ (80078c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	0b5b      	lsrs	r3, r3, #13
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	4903      	ldr	r1, [pc, #12]	@ (80078cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80078be:	5ccb      	ldrb	r3, [r1, r3]
 80078c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	40023800 	.word	0x40023800
 80078cc:	0801a628 	.word	0x0801a628

080078d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d012      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078f8:	4b69      	ldr	r3, [pc, #420]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	4a68      	ldr	r2, [pc, #416]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007902:	6093      	str	r3, [r2, #8]
 8007904:	4b66      	ldr	r3, [pc, #408]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800790c:	4964      	ldr	r1, [pc, #400]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790e:	4313      	orrs	r3, r2
 8007910:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800791a:	2301      	movs	r3, #1
 800791c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d017      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800792a:	4b5d      	ldr	r3, [pc, #372]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007930:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007938:	4959      	ldr	r1, [pc, #356]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793a:	4313      	orrs	r3, r2
 800793c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007948:	d101      	bne.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800794a:	2301      	movs	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007956:	2301      	movs	r3, #1
 8007958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007966:	4b4e      	ldr	r3, [pc, #312]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800796c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007974:	494a      	ldr	r1, [pc, #296]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007984:	d101      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007986:	2301      	movs	r3, #1
 8007988:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007992:	2301      	movs	r3, #1
 8007994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079a2:	2301      	movs	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 808b 	beq.w	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079b4:	4b3a      	ldr	r3, [pc, #232]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	4a39      	ldr	r2, [pc, #228]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079be:	6413      	str	r3, [r2, #64]	@ 0x40
 80079c0:	4b37      	ldr	r3, [pc, #220]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079cc:	4b35      	ldr	r3, [pc, #212]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a34      	ldr	r2, [pc, #208]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d8:	f7fa fb6c 	bl	80020b4 <HAL_GetTick>
 80079dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e0:	f7fa fb68 	bl	80020b4 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b64      	cmp	r3, #100	@ 0x64
 80079ec:	d901      	bls.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e357      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079f2:	4b2c      	ldr	r3, [pc, #176]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079fe:	4b28      	ldr	r3, [pc, #160]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d035      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d02e      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a1c:	4b20      	ldr	r3, [pc, #128]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a26:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a30:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a32:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a36:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a3c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a3e:	4a18      	ldr	r2, [pc, #96]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a44:	4b16      	ldr	r3, [pc, #88]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d114      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a50:	f7fa fb30 	bl	80020b4 <HAL_GetTick>
 8007a54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a56:	e00a      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a58:	f7fa fb2c 	bl	80020b4 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e319      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0ee      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a86:	d111      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a88:	4b05      	ldr	r3, [pc, #20]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007a94:	4b04      	ldr	r3, [pc, #16]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a96:	400b      	ands	r3, r1
 8007a98:	4901      	ldr	r1, [pc, #4]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	608b      	str	r3, [r1, #8]
 8007a9e:	e00b      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007aa0:	40023800 	.word	0x40023800
 8007aa4:	40007000 	.word	0x40007000
 8007aa8:	0ffffcff 	.word	0x0ffffcff
 8007aac:	4baa      	ldr	r3, [pc, #680]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4aa9      	ldr	r2, [pc, #676]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ab2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007ab6:	6093      	str	r3, [r2, #8]
 8007ab8:	4ba7      	ldr	r3, [pc, #668]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac4:	49a4      	ldr	r1, [pc, #656]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0310 	and.w	r3, r3, #16
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d010      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ad6:	4ba0      	ldr	r3, [pc, #640]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007adc:	4a9e      	ldr	r2, [pc, #632]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ae2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007ae6:	4b9c      	ldr	r3, [pc, #624]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ae8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af0:	4999      	ldr	r1, [pc, #612]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b04:	4b94      	ldr	r3, [pc, #592]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b12:	4991      	ldr	r1, [pc, #580]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b26:	4b8c      	ldr	r3, [pc, #560]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b34:	4988      	ldr	r1, [pc, #544]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b48:	4b83      	ldr	r3, [pc, #524]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b56:	4980      	ldr	r1, [pc, #512]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b78:	4977      	ldr	r1, [pc, #476]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b8c:	4b72      	ldr	r3, [pc, #456]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b92:	f023 0203 	bic.w	r2, r3, #3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9a:	496f      	ldr	r1, [pc, #444]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bae:	4b6a      	ldr	r3, [pc, #424]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb4:	f023 020c 	bic.w	r2, r3, #12
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bbc:	4966      	ldr	r1, [pc, #408]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bd0:	4b61      	ldr	r3, [pc, #388]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bde:	495e      	ldr	r1, [pc, #376]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bf2:	4b59      	ldr	r3, [pc, #356]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c00:	4955      	ldr	r1, [pc, #340]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c14:	4b50      	ldr	r3, [pc, #320]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c22:	494d      	ldr	r1, [pc, #308]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c36:	4b48      	ldr	r3, [pc, #288]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c44:	4944      	ldr	r1, [pc, #272]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c58:	4b3f      	ldr	r3, [pc, #252]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c66:	493c      	ldr	r1, [pc, #240]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c7a:	4b37      	ldr	r3, [pc, #220]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c88:	4933      	ldr	r1, [pc, #204]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007caa:	492b      	ldr	r1, [pc, #172]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d011      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007cbe:	4b26      	ldr	r3, [pc, #152]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ccc:	4922      	ldr	r1, [pc, #136]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cdc:	d101      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cfe:	4b16      	ldr	r3, [pc, #88]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d0c:	4912      	ldr	r1, [pc, #72]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d20:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d30:	4909      	ldr	r1, [pc, #36]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d006      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80d9 	beq.w	8007efe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d4c:	4b02      	ldr	r3, [pc, #8]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a01      	ldr	r2, [pc, #4]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d56:	e001      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007d58:	40023800 	.word	0x40023800
 8007d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d5e:	f7fa f9a9 	bl	80020b4 <HAL_GetTick>
 8007d62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d64:	e008      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d66:	f7fa f9a5 	bl	80020b4 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	2b64      	cmp	r3, #100	@ 0x64
 8007d72:	d901      	bls.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e194      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d78:	4b6c      	ldr	r3, [pc, #432]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1f0      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d021      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11d      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d98:	4b64      	ldr	r3, [pc, #400]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d9e:	0c1b      	lsrs	r3, r3, #16
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007da6:	4b61      	ldr	r3, [pc, #388]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dac:	0e1b      	lsrs	r3, r3, #24
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	019a      	lsls	r2, r3, #6
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	061b      	lsls	r3, r3, #24
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	071b      	lsls	r3, r3, #28
 8007dcc:	4957      	ldr	r1, [pc, #348]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007de8:	d00a      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d02e      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dfe:	d129      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e00:	4b4a      	ldr	r3, [pc, #296]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	f003 0303 	and.w	r3, r3, #3
 8007e0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e0e:	4b47      	ldr	r3, [pc, #284]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e14:	0f1b      	lsrs	r3, r3, #28
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	019a      	lsls	r2, r3, #6
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	041b      	lsls	r3, r3, #16
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	061b      	lsls	r3, r3, #24
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	071b      	lsls	r3, r3, #28
 8007e34:	493d      	ldr	r1, [pc, #244]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e42:	f023 021f 	bic.w	r2, r3, #31
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	4937      	ldr	r1, [pc, #220]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01d      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e60:	4b32      	ldr	r3, [pc, #200]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e66:	0e1b      	lsrs	r3, r3, #24
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e74:	0f1b      	lsrs	r3, r3, #28
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	019a      	lsls	r2, r3, #6
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	061b      	lsls	r3, r3, #24
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	071b      	lsls	r3, r3, #28
 8007e94:	4925      	ldr	r1, [pc, #148]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d011      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	019a      	lsls	r2, r3, #6
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	061b      	lsls	r3, r3, #24
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	071b      	lsls	r3, r3, #28
 8007ec4:	4919      	ldr	r1, [pc, #100]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ecc:	4b17      	ldr	r3, [pc, #92]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a16      	ldr	r2, [pc, #88]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ed2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed8:	f7fa f8ec 	bl	80020b4 <HAL_GetTick>
 8007edc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ee0:	f7fa f8e8 	bl	80020b4 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b64      	cmp	r3, #100	@ 0x64
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e0d7      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	f040 80cd 	bne.w	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f06:	4b09      	ldr	r3, [pc, #36]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a08      	ldr	r2, [pc, #32]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f12:	f7fa f8cf 	bl	80020b4 <HAL_GetTick>
 8007f16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f18:	e00a      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f1a:	f7fa f8cb 	bl	80020b4 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b64      	cmp	r3, #100	@ 0x64
 8007f26:	d903      	bls.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e0ba      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007f2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f30:	4b5e      	ldr	r3, [pc, #376]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f3c:	d0ed      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d02e      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d12a      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f66:	4b51      	ldr	r3, [pc, #324]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f74:	4b4d      	ldr	r3, [pc, #308]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f7a:	0f1b      	lsrs	r3, r3, #28
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	019a      	lsls	r2, r3, #6
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	041b      	lsls	r3, r3, #16
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	061b      	lsls	r3, r3, #24
 8007f94:	431a      	orrs	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	071b      	lsls	r3, r3, #28
 8007f9a:	4944      	ldr	r1, [pc, #272]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007fa2:	4b42      	ldr	r3, [pc, #264]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fa8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	493d      	ldr	r1, [pc, #244]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d022      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fd0:	d11d      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fd2:	4b36      	ldr	r3, [pc, #216]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd8:	0e1b      	lsrs	r3, r3, #24
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fe0:	4b32      	ldr	r3, [pc, #200]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe6:	0f1b      	lsrs	r3, r3, #28
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	019a      	lsls	r2, r3, #6
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	061b      	lsls	r3, r3, #24
 8008000:	431a      	orrs	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	071b      	lsls	r3, r3, #28
 8008006:	4929      	ldr	r1, [pc, #164]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d028      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800801a:	4b24      	ldr	r3, [pc, #144]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800801c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008020:	0e1b      	lsrs	r3, r3, #24
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008028:	4b20      	ldr	r3, [pc, #128]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800802a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802e:	0c1b      	lsrs	r3, r3, #16
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	019a      	lsls	r2, r3, #6
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	041b      	lsls	r3, r3, #16
 8008040:	431a      	orrs	r2, r3
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	061b      	lsls	r3, r3, #24
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	071b      	lsls	r3, r3, #28
 800804e:	4917      	ldr	r1, [pc, #92]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008050:	4313      	orrs	r3, r2
 8008052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008056:	4b15      	ldr	r3, [pc, #84]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800805c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	4911      	ldr	r1, [pc, #68]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800806c:	4b0f      	ldr	r3, [pc, #60]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a0e      	ldr	r2, [pc, #56]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008078:	f7fa f81c 	bl	80020b4 <HAL_GetTick>
 800807c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008080:	f7fa f818 	bl	80020b4 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b64      	cmp	r3, #100	@ 0x64
 800808c:	d901      	bls.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e007      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008092:	4b06      	ldr	r3, [pc, #24]	@ (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800809a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800809e:	d1ef      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40023800 	.word	0x40023800

080080b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e09d      	b.n	80081fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d108      	bne.n	80080dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080d2:	d009      	beq.n	80080e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	61da      	str	r2, [r3, #28]
 80080da:	e005      	b.n	80080e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d106      	bne.n	8008108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7f8 ff1c 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800811e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008128:	d902      	bls.n	8008130 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	e002      	b.n	8008136 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008134:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800813e:	d007      	beq.n	8008150 <HAL_SPI_Init+0xa0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008148:	d002      	beq.n	8008150 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008160:	431a      	orrs	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008192:	ea42 0103 	orr.w	r1, r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	0c1b      	lsrs	r3, r3, #16
 80081ac:	f003 0204 	and.w	r2, r3, #4
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081be:	f003 0308 	and.w	r3, r3, #8
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80081cc:	ea42 0103 	orr.w	r1, r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b01      	cmp	r3, #1
 8008220:	d001      	beq.n	8008226 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008222:	2302      	movs	r3, #2
 8008224:	e0d4      	b.n	80083d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_SPI_Transmit_DMA+0x2a>
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e0cc      	b.n	80083d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <HAL_SPI_Transmit_DMA+0x3c>
 8008240:	2302      	movs	r3, #2
 8008242:	e0c5      	b.n	80083d0 <HAL_SPI_Transmit_DMA+0x1c8>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2203      	movs	r2, #3
 8008250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	88fa      	ldrh	r2, [r7, #6]
 8008264:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	88fa      	ldrh	r2, [r7, #6]
 800826a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008296:	d10f      	bne.n	80082b8 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082bc:	4a46      	ldr	r2, [pc, #280]	@ (80083d8 <HAL_SPI_Transmit_DMA+0x1d0>)
 80082be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c4:	4a45      	ldr	r2, [pc, #276]	@ (80083dc <HAL_SPI_Transmit_DMA+0x1d4>)
 80082c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082cc:	4a44      	ldr	r2, [pc, #272]	@ (80083e0 <HAL_SPI_Transmit_DMA+0x1d8>)
 80082ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d4:	2200      	movs	r2, #0
 80082d6:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082e6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082f0:	d82d      	bhi.n	800834e <HAL_SPI_Transmit_DMA+0x146>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082fc:	d127      	bne.n	800834e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008302:	b29b      	uxth	r3, r3
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10f      	bne.n	800832c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800831a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008320:	b29b      	uxth	r3, r3
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800832a:	e010      	b.n	800834e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800833a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008340:	b29b      	uxth	r3, r3
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	b29b      	uxth	r3, r3
 8008346:	3301      	adds	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008356:	4619      	mov	r1, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008364:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008366:	f7fa fe3f 	bl	8002fe8 <HAL_DMA_Start_IT>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008374:	f043 0210 	orr.w	r2, r3, #16
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e023      	b.n	80083d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008392:	2b40      	cmp	r3, #64	@ 0x40
 8008394:	d007      	beq.n	80083a6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083a4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0220 	orr.w	r2, r2, #32
 80083bc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0202 	orr.w	r2, r2, #2
 80083cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	08008d65 	.word	0x08008d65
 80083dc:	08008b81 	.word	0x08008b81
 80083e0:	08008db9 	.word	0x08008db9

080083e4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d001      	beq.n	8008402 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 80083fe:	2302      	movs	r3, #2
 8008400:	e105      	b.n	800860e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <HAL_SPI_Receive_DMA+0x2a>
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e0fd      	b.n	800860e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d110      	bne.n	800843c <HAL_SPI_Receive_DMA+0x58>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008422:	d10b      	bne.n	800843c <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2204      	movs	r2, #4
 8008428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 f8f6 	bl	8008624 <HAL_SPI_TransmitReceive_DMA>
 8008438:	4603      	mov	r3, r0
 800843a:	e0e8      	b.n	800860e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_SPI_Receive_DMA+0x66>
 8008446:	2302      	movs	r3, #2
 8008448:	e0e1      	b.n	800860e <HAL_SPI_Receive_DMA+0x22a>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2204      	movs	r2, #4
 8008456:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	88fa      	ldrh	r2, [r7, #6]
 800846a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	88fa      	ldrh	r2, [r7, #6]
 8008472:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008496:	d10f      	bne.n	80084b8 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80084b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084c6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084d0:	d908      	bls.n	80084e4 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80084e0:	605a      	str	r2, [r3, #4]
 80084e2:	e042      	b.n	800856a <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084f2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084fe:	d134      	bne.n	800856a <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800850e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008516:	b29b      	uxth	r3, r3
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d111      	bne.n	8008544 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800852e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008536:	b29b      	uxth	r3, r3
 8008538:	085b      	lsrs	r3, r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008542:	e012      	b.n	800856a <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008552:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800855a:	b29b      	uxth	r3, r3
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	b29b      	uxth	r3, r3
 8008560:	3301      	adds	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800856e:	4a2a      	ldr	r2, [pc, #168]	@ (8008618 <HAL_SPI_Receive_DMA+0x234>)
 8008570:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008576:	4a29      	ldr	r2, [pc, #164]	@ (800861c <HAL_SPI_Receive_DMA+0x238>)
 8008578:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800857e:	4a28      	ldr	r2, [pc, #160]	@ (8008620 <HAL_SPI_Receive_DMA+0x23c>)
 8008580:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008586:	2200      	movs	r2, #0
 8008588:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	330c      	adds	r3, #12
 8008594:	4619      	mov	r1, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80085a4:	f7fa fd20 	bl	8002fe8 <HAL_DMA_Start_IT>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085b2:	f043 0210 	orr.w	r2, r3, #16
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e023      	b.n	800860e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d0:	2b40      	cmp	r3, #64	@ 0x40
 80085d2:	d007      	beq.n	80085e4 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085e2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0220 	orr.w	r2, r2, #32
 80085fa:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0201 	orr.w	r2, r2, #1
 800860a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	08008d81 	.word	0x08008d81
 800861c:	08008c29 	.word	0x08008c29
 8008620:	08008db9 	.word	0x08008db9

08008624 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008638:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d00c      	beq.n	8008660 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800864c:	d106      	bne.n	800865c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d102      	bne.n	800865c <HAL_SPI_TransmitReceive_DMA+0x38>
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	2b04      	cmp	r3, #4
 800865a:	d001      	beq.n	8008660 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800865c:	2302      	movs	r3, #2
 800865e:	e158      	b.n	8008912 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800866c:	887b      	ldrh	r3, [r7, #2]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e14d      	b.n	8008912 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_SPI_TransmitReceive_DMA+0x60>
 8008680:	2302      	movs	r3, #2
 8008682:	e146      	b.n	8008912 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b04      	cmp	r3, #4
 8008696:	d003      	beq.n	80086a0 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2205      	movs	r2, #5
 800869c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	887a      	ldrh	r2, [r7, #2]
 80086b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	887a      	ldrh	r2, [r7, #2]
 80086b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	887a      	ldrh	r2, [r7, #2]
 80086c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	887a      	ldrh	r2, [r7, #2]
 80086ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80086e8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086f2:	d908      	bls.n	8008706 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008702:	605a      	str	r2, [r3, #4]
 8008704:	e06f      	b.n	80087e6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008714:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008720:	d126      	bne.n	8008770 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10f      	bne.n	800874e <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800873c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008742:	b29b      	uxth	r3, r3
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	b29a      	uxth	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800874c:	e010      	b.n	8008770 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800875c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008762:	b29b      	uxth	r3, r3
 8008764:	085b      	lsrs	r3, r3, #1
 8008766:	b29b      	uxth	r3, r3
 8008768:	3301      	adds	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800877a:	d134      	bne.n	80087e6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800878a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008792:	b29b      	uxth	r3, r3
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d111      	bne.n	80087c0 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087aa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	085b      	lsrs	r3, r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80087be:	e012      	b.n	80087e6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	085b      	lsrs	r3, r3, #1
 80087da:	b29b      	uxth	r3, r3
 80087dc:	3301      	adds	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d108      	bne.n	8008804 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f6:	4a49      	ldr	r2, [pc, #292]	@ (800891c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80087f8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087fe:	4a48      	ldr	r2, [pc, #288]	@ (8008920 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008800:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008802:	e007      	b.n	8008814 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008808:	4a46      	ldr	r2, [pc, #280]	@ (8008924 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800880a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008810:	4a45      	ldr	r2, [pc, #276]	@ (8008928 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008812:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008818:	4a44      	ldr	r2, [pc, #272]	@ (800892c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800881a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008820:	2200      	movs	r2, #0
 8008822:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	4619      	mov	r1, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008834:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800883c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800883e:	f7fa fbd3 	bl	8002fe8 <HAL_DMA_Start_IT>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00b      	beq.n	8008860 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800884c:	f043 0210 	orr.w	r2, r3, #16
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e058      	b.n	8008912 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008874:	2200      	movs	r2, #0
 8008876:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887c:	2200      	movs	r2, #0
 800887e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008884:	2200      	movs	r2, #0
 8008886:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888c:	2200      	movs	r2, #0
 800888e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008898:	4619      	mov	r1, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	330c      	adds	r3, #12
 80088a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088a8:	f7fa fb9e 	bl	8002fe8 <HAL_DMA_Start_IT>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088b6:	f043 0210 	orr.w	r2, r3, #16
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e023      	b.n	8008912 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d4:	2b40      	cmp	r3, #64	@ 0x40
 80088d6:	d007      	beq.n	80088e8 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088e6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0220 	orr.w	r2, r2, #32
 80088fe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0202 	orr.w	r2, r2, #2
 800890e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	08008d81 	.word	0x08008d81
 8008920:	08008c29 	.word	0x08008c29
 8008924:	08008d9d 	.word	0x08008d9d
 8008928:	08008cd3 	.word	0x08008cd3
 800892c:	08008db9 	.word	0x08008db9

08008930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b088      	sub	sp, #32
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	099b      	lsrs	r3, r3, #6
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10f      	bne.n	8008974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	099b      	lsrs	r3, r3, #6
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
    return;
 8008972:	e0d7      	b.n	8008b24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	085b      	lsrs	r3, r3, #1
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00a      	beq.n	8008996 <HAL_SPI_IRQHandler+0x66>
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	09db      	lsrs	r3, r3, #7
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	4798      	blx	r3
    return;
 8008994:	e0c6      	b.n	8008b24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	095b      	lsrs	r3, r3, #5
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10c      	bne.n	80089bc <HAL_SPI_IRQHandler+0x8c>
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	099b      	lsrs	r3, r3, #6
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 80b4 	beq.w	8008b24 <HAL_SPI_IRQHandler+0x1f4>
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80ad 	beq.w	8008b24 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	099b      	lsrs	r3, r3, #6
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d023      	beq.n	8008a1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d011      	beq.n	8008a06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089e6:	f043 0204 	orr.w	r2, r3, #4
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089ee:	2300      	movs	r3, #0
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	e00b      	b.n	8008a1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a06:	2300      	movs	r3, #0
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	693b      	ldr	r3, [r7, #16]
        return;
 8008a1c:	e082      	b.n	8008b24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	095b      	lsrs	r3, r3, #5
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d014      	beq.n	8008a54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a2e:	f043 0201 	orr.w	r2, r3, #1
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	0a1b      	lsrs	r3, r3, #8
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a64:	f043 0208 	orr.w	r2, r3, #8
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60bb      	str	r3, [r7, #8]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	60bb      	str	r3, [r7, #8]
 8008a78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d04f      	beq.n	8008b22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <HAL_SPI_IRQHandler+0x17e>
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d034      	beq.n	8008b18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0203 	bic.w	r2, r2, #3
 8008abc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d011      	beq.n	8008aea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aca:	4a18      	ldr	r2, [pc, #96]	@ (8008b2c <HAL_SPI_IRQHandler+0x1fc>)
 8008acc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fa fb58 	bl	8003188 <HAL_DMA_Abort_IT>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d005      	beq.n	8008aea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d016      	beq.n	8008b20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af6:	4a0d      	ldr	r2, [pc, #52]	@ (8008b2c <HAL_SPI_IRQHandler+0x1fc>)
 8008af8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fa fb42 	bl	8003188 <HAL_DMA_Abort_IT>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008b16:	e003      	b.n	8008b20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f827 	bl	8008b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008b1e:	e000      	b.n	8008b22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008b20:	bf00      	nop
    return;
 8008b22:	bf00      	nop
  }
}
 8008b24:	3720      	adds	r7, #32
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	08008df9 	.word	0x08008df9

08008b30 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b8e:	f7f9 fa91 	bl	80020b4 <HAL_GetTick>
 8008b92:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba2:	d03b      	beq.n	8008c1c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0220 	bic.w	r2, r2, #32
 8008bb2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0202 	bic.w	r2, r2, #2
 8008bc2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	2164      	movs	r1, #100	@ 0x64
 8008bc8:	6978      	ldr	r0, [r7, #20]
 8008bca:	f000 fac5 	bl	8009158 <SPI_EndRxTxTransaction>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bd8:	f043 0220 	orr.w	r2, r3, #32
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10a      	bne.n	8008bfe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2200      	movs	r2, #0
 8008c02:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008c14:	6978      	ldr	r0, [r7, #20]
 8008c16:	f7ff ffa9 	bl	8008b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c1a:	e002      	b.n	8008c22 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008c1c:	6978      	ldr	r0, [r7, #20]
 8008c1e:	f00d fc87 	bl	8016530 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c34:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c36:	f7f9 fa3d 	bl	80020b4 <HAL_GetTick>
 8008c3a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4a:	d03c      	beq.n	8008cc6 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0220 	bic.w	r2, r2, #32
 8008c5a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10d      	bne.n	8008c80 <SPI_DMAReceiveCplt+0x58>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c6c:	d108      	bne.n	8008c80 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0203 	bic.w	r2, r2, #3
 8008c7c:	605a      	str	r2, [r3, #4]
 8008c7e:	e007      	b.n	8008c90 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0201 	bic.w	r2, r2, #1
 8008c8e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	2164      	movs	r1, #100	@ 0x64
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f9e3 	bl	8009060 <SPI_EndRxTransaction>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff ff54 	bl	8008b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008cc4:	e002      	b.n	8008ccc <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f00d fc54 	bl	8016574 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cde:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ce0:	f7f9 f9e8 	bl	80020b4 <HAL_GetTick>
 8008ce4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cf4:	d030      	beq.n	8008d58 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 0220 	bic.w	r2, r2, #32
 8008d04:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	2164      	movs	r1, #100	@ 0x64
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 fa24 	bl	8009158 <SPI_EndRxTxTransaction>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d1a:	f043 0220 	orr.w	r2, r3, #32
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0203 	bic.w	r2, r2, #3
 8008d30:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff ff0b 	bl	8008b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008d56:	e002      	b.n	8008d5e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f00d fc2d 	bl	80165b8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7ff fedc 	bl	8008b30 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d78:	bf00      	nop
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff fed8 	bl	8008b44 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d94:	bf00      	nop
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff fed4 	bl	8008b58 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0203 	bic.w	r2, r2, #3
 8008dd4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dda:	f043 0210 	orr.w	r2, r3, #16
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f7ff febe 	bl	8008b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7ff fea9 	bl	8008b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008e1a:	bf00      	nop
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	4613      	mov	r3, r2
 8008e32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e34:	f7f9 f93e 	bl	80020b4 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	4413      	add	r3, r2
 8008e42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e44:	f7f9 f936 	bl	80020b4 <HAL_GetTick>
 8008e48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e4a:	4b39      	ldr	r3, [pc, #228]	@ (8008f30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	015b      	lsls	r3, r3, #5
 8008e50:	0d1b      	lsrs	r3, r3, #20
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	fb02 f303 	mul.w	r3, r2, r3
 8008e58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e5a:	e055      	b.n	8008f08 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d051      	beq.n	8008f08 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e64:	f7f9 f926 	bl	80020b4 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d902      	bls.n	8008e7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d13d      	bne.n	8008ef6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008e88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e92:	d111      	bne.n	8008eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e9c:	d004      	beq.n	8008ea8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ea6:	d107      	bne.n	8008eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ec0:	d10f      	bne.n	8008ee2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ee0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e018      	b.n	8008f28 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	e002      	b.n	8008f08 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	4013      	ands	r3, r2
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	bf0c      	ite	eq
 8008f18:	2301      	moveq	r3, #1
 8008f1a:	2300      	movne	r3, #0
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d19a      	bne.n	8008e5c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20000000 	.word	0x20000000

08008f34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08a      	sub	sp, #40	@ 0x28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008f46:	f7f9 f8b5 	bl	80020b4 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	4413      	add	r3, r2
 8008f54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008f56:	f7f9 f8ad 	bl	80020b4 <HAL_GetTick>
 8008f5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	330c      	adds	r3, #12
 8008f62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008f64:	4b3d      	ldr	r3, [pc, #244]	@ (800905c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	00da      	lsls	r2, r3, #3
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	0d1b      	lsrs	r3, r3, #20
 8008f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f76:	fb02 f303 	mul.w	r3, r2, r3
 8008f7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008f7c:	e061      	b.n	8009042 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f84:	d107      	bne.n	8008f96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9c:	d051      	beq.n	8009042 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f9e:	f7f9 f889 	bl	80020b4 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d902      	bls.n	8008fb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d13d      	bne.n	8009030 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008fc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fcc:	d111      	bne.n	8008ff2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fd6:	d004      	beq.n	8008fe2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fe0:	d107      	bne.n	8008ff2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ff0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ffa:	d10f      	bne.n	800901c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800901a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e011      	b.n	8009054 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	627b      	str	r3, [r7, #36]	@ 0x24
 800903a:	e002      	b.n	8009042 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	3b01      	subs	r3, #1
 8009040:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4013      	ands	r3, r2
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	429a      	cmp	r2, r3
 8009050:	d195      	bne.n	8008f7e <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3728      	adds	r7, #40	@ 0x28
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000000 	.word	0x20000000

08009060 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af02      	add	r7, sp, #8
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009074:	d111      	bne.n	800909a <SPI_EndRxTransaction+0x3a>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800907e:	d004      	beq.n	800908a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009088:	d107      	bne.n	800909a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009098:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090a2:	d112      	bne.n	80090ca <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	2180      	movs	r1, #128	@ 0x80
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7ff feb8 	bl	8008e24 <SPI_WaitFlagStateUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d021      	beq.n	80090fe <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090be:	f043 0220 	orr.w	r2, r3, #32
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e03d      	b.n	8009146 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090ca:	4b21      	ldr	r3, [pc, #132]	@ (8009150 <SPI_EndRxTransaction+0xf0>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a21      	ldr	r2, [pc, #132]	@ (8009154 <SPI_EndRxTransaction+0xf4>)
 80090d0:	fba2 2303 	umull	r2, r3, r2, r3
 80090d4:	0d5b      	lsrs	r3, r3, #21
 80090d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00a      	beq.n	80090fc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f6:	2b80      	cmp	r3, #128	@ 0x80
 80090f8:	d0f2      	beq.n	80090e0 <SPI_EndRxTransaction+0x80>
 80090fa:	e000      	b.n	80090fe <SPI_EndRxTransaction+0x9e>
        break;
 80090fc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009106:	d11d      	bne.n	8009144 <SPI_EndRxTransaction+0xe4>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009110:	d004      	beq.n	800911c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800911a:	d113      	bne.n	8009144 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2200      	movs	r2, #0
 8009124:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff ff03 	bl	8008f34 <SPI_WaitFifoStateUntilTimeout>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009138:	f043 0220 	orr.w	r2, r3, #32
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e000      	b.n	8009146 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000000 	.word	0x20000000
 8009154:	165e9f81 	.word	0x165e9f81

08009158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af02      	add	r7, sp, #8
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2200      	movs	r2, #0
 800916c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff fedf 	bl	8008f34 <SPI_WaitFifoStateUntilTimeout>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d007      	beq.n	800918c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009180:	f043 0220 	orr.w	r2, r3, #32
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e046      	b.n	800921a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800918c:	4b25      	ldr	r3, [pc, #148]	@ (8009224 <SPI_EndRxTxTransaction+0xcc>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a25      	ldr	r2, [pc, #148]	@ (8009228 <SPI_EndRxTxTransaction+0xd0>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	0d5b      	lsrs	r3, r3, #21
 8009198:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800919c:	fb02 f303 	mul.w	r3, r2, r3
 80091a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091aa:	d112      	bne.n	80091d2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2200      	movs	r2, #0
 80091b4:	2180      	movs	r1, #128	@ 0x80
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff fe34 	bl	8008e24 <SPI_WaitFlagStateUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d016      	beq.n	80091f0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c6:	f043 0220 	orr.w	r2, r3, #32
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e023      	b.n	800921a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00a      	beq.n	80091ee <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	3b01      	subs	r3, #1
 80091dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091e8:	2b80      	cmp	r3, #128	@ 0x80
 80091ea:	d0f2      	beq.n	80091d2 <SPI_EndRxTxTransaction+0x7a>
 80091ec:	e000      	b.n	80091f0 <SPI_EndRxTxTransaction+0x98>
        break;
 80091ee:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7ff fe99 	bl	8008f34 <SPI_WaitFifoStateUntilTimeout>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800920c:	f043 0220 	orr.w	r2, r3, #32
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e000      	b.n	800921a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000000 	.word	0x20000000
 8009228:	165e9f81 	.word	0x165e9f81

0800922c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e049      	b.n	80092d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d106      	bne.n	8009258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7f8 fa44 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3304      	adds	r3, #4
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f000 fa0e 	bl	800968c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d001      	beq.n	80092f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e054      	b.n	800939e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a26      	ldr	r2, [pc, #152]	@ (80093ac <HAL_TIM_Base_Start_IT+0xd0>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d022      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800931e:	d01d      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a22      	ldr	r2, [pc, #136]	@ (80093b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d018      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a21      	ldr	r2, [pc, #132]	@ (80093b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d013      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a1f      	ldr	r2, [pc, #124]	@ (80093b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00e      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a1e      	ldr	r2, [pc, #120]	@ (80093bc <HAL_TIM_Base_Start_IT+0xe0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d009      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a1c      	ldr	r2, [pc, #112]	@ (80093c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d004      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a1b      	ldr	r2, [pc, #108]	@ (80093c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d115      	bne.n	8009388 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	4b19      	ldr	r3, [pc, #100]	@ (80093c8 <HAL_TIM_Base_Start_IT+0xec>)
 8009364:	4013      	ands	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b06      	cmp	r3, #6
 800936c:	d015      	beq.n	800939a <HAL_TIM_Base_Start_IT+0xbe>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009374:	d011      	beq.n	800939a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f042 0201 	orr.w	r2, r2, #1
 8009384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009386:	e008      	b.n	800939a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0201 	orr.w	r2, r2, #1
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	e000      	b.n	800939c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800939a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40010000 	.word	0x40010000
 80093b0:	40000400 	.word	0x40000400
 80093b4:	40000800 	.word	0x40000800
 80093b8:	40000c00 	.word	0x40000c00
 80093bc:	40010400 	.word	0x40010400
 80093c0:	40014000 	.word	0x40014000
 80093c4:	40001800 	.word	0x40001800
 80093c8:	00010007 	.word	0x00010007

080093cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68da      	ldr	r2, [r3, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 0201 	bic.w	r2, r2, #1
 80093e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6a1a      	ldr	r2, [r3, #32]
 80093ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009428 <HAL_TIM_Base_Stop_IT+0x5c>)
 80093ec:	4013      	ands	r3, r2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10f      	bne.n	8009412 <HAL_TIM_Base_Stop_IT+0x46>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6a1a      	ldr	r2, [r3, #32]
 80093f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80093fc:	4013      	ands	r3, r2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d107      	bne.n	8009412 <HAL_TIM_Base_Stop_IT+0x46>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0201 	bic.w	r2, r2, #1
 8009410:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	00111111 	.word	0x00111111

0800942c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d020      	beq.n	8009490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01b      	beq.n	8009490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0202 	mvn.w	r2, #2
 8009460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f8e9 	bl	800964e <HAL_TIM_IC_CaptureCallback>
 800947c:	e005      	b.n	800948a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f8db 	bl	800963a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f8ec 	bl	8009662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	d020      	beq.n	80094dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01b      	beq.n	80094dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0204 	mvn.w	r2, #4
 80094ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2202      	movs	r2, #2
 80094b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8c3 	bl	800964e <HAL_TIM_IC_CaptureCallback>
 80094c8:	e005      	b.n	80094d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f8b5 	bl	800963a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f8c6 	bl	8009662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d020      	beq.n	8009528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f003 0308 	and.w	r3, r3, #8
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01b      	beq.n	8009528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0208 	mvn.w	r2, #8
 80094f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2204      	movs	r2, #4
 80094fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f89d 	bl	800964e <HAL_TIM_IC_CaptureCallback>
 8009514:	e005      	b.n	8009522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f88f 	bl	800963a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f8a0 	bl	8009662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b00      	cmp	r3, #0
 8009530:	d020      	beq.n	8009574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f003 0310 	and.w	r3, r3, #16
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01b      	beq.n	8009574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f06f 0210 	mvn.w	r2, #16
 8009544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2208      	movs	r2, #8
 800954a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f877 	bl	800964e <HAL_TIM_IC_CaptureCallback>
 8009560:	e005      	b.n	800956e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f869 	bl	800963a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f87a 	bl	8009662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00c      	beq.n	8009598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	d007      	beq.n	8009598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0201 	mvn.w	r2, #1
 8009590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f00d f990 	bl	80168b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d104      	bne.n	80095ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00c      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d007      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80095be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f9a1 	bl	8009908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00c      	beq.n	80095ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d007      	beq.n	80095ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80095e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f999 	bl	800991c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00c      	beq.n	800960e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f834 	bl	8009676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00c      	beq.n	8009632 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f003 0320 	and.w	r3, r3, #32
 800961e:	2b00      	cmp	r3, #0
 8009620:	d007      	beq.n	8009632 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f06f 0220 	mvn.w	r2, #32
 800962a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f961 	bl	80098f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
	...

0800968c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a43      	ldr	r2, [pc, #268]	@ (80097ac <TIM_Base_SetConfig+0x120>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d013      	beq.n	80096cc <TIM_Base_SetConfig+0x40>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096aa:	d00f      	beq.n	80096cc <TIM_Base_SetConfig+0x40>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a40      	ldr	r2, [pc, #256]	@ (80097b0 <TIM_Base_SetConfig+0x124>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00b      	beq.n	80096cc <TIM_Base_SetConfig+0x40>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a3f      	ldr	r2, [pc, #252]	@ (80097b4 <TIM_Base_SetConfig+0x128>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d007      	beq.n	80096cc <TIM_Base_SetConfig+0x40>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a3e      	ldr	r2, [pc, #248]	@ (80097b8 <TIM_Base_SetConfig+0x12c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d003      	beq.n	80096cc <TIM_Base_SetConfig+0x40>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a3d      	ldr	r2, [pc, #244]	@ (80097bc <TIM_Base_SetConfig+0x130>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d108      	bne.n	80096de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a32      	ldr	r2, [pc, #200]	@ (80097ac <TIM_Base_SetConfig+0x120>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d02b      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ec:	d027      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a2f      	ldr	r2, [pc, #188]	@ (80097b0 <TIM_Base_SetConfig+0x124>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d023      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2e      	ldr	r2, [pc, #184]	@ (80097b4 <TIM_Base_SetConfig+0x128>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d01f      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a2d      	ldr	r2, [pc, #180]	@ (80097b8 <TIM_Base_SetConfig+0x12c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d01b      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a2c      	ldr	r2, [pc, #176]	@ (80097bc <TIM_Base_SetConfig+0x130>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d017      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a2b      	ldr	r2, [pc, #172]	@ (80097c0 <TIM_Base_SetConfig+0x134>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d013      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a2a      	ldr	r2, [pc, #168]	@ (80097c4 <TIM_Base_SetConfig+0x138>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00f      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a29      	ldr	r2, [pc, #164]	@ (80097c8 <TIM_Base_SetConfig+0x13c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d00b      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a28      	ldr	r2, [pc, #160]	@ (80097cc <TIM_Base_SetConfig+0x140>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d007      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a27      	ldr	r2, [pc, #156]	@ (80097d0 <TIM_Base_SetConfig+0x144>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d003      	beq.n	800973e <TIM_Base_SetConfig+0xb2>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a26      	ldr	r2, [pc, #152]	@ (80097d4 <TIM_Base_SetConfig+0x148>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d108      	bne.n	8009750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a0e      	ldr	r2, [pc, #56]	@ (80097ac <TIM_Base_SetConfig+0x120>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d003      	beq.n	800977e <TIM_Base_SetConfig+0xf2>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a10      	ldr	r2, [pc, #64]	@ (80097bc <TIM_Base_SetConfig+0x130>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d103      	bne.n	8009786 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f043 0204 	orr.w	r2, r3, #4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40010000 	.word	0x40010000
 80097b0:	40000400 	.word	0x40000400
 80097b4:	40000800 	.word	0x40000800
 80097b8:	40000c00 	.word	0x40000c00
 80097bc:	40010400 	.word	0x40010400
 80097c0:	40014000 	.word	0x40014000
 80097c4:	40014400 	.word	0x40014400
 80097c8:	40014800 	.word	0x40014800
 80097cc:	40001800 	.word	0x40001800
 80097d0:	40001c00 	.word	0x40001c00
 80097d4:	40002000 	.word	0x40002000

080097d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e06d      	b.n	80098cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a30      	ldr	r2, [pc, #192]	@ (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d004      	beq.n	8009824 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a2f      	ldr	r2, [pc, #188]	@ (80098dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d108      	bne.n	8009836 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800982a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a20      	ldr	r2, [pc, #128]	@ (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d022      	beq.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009862:	d01d      	beq.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a1d      	ldr	r2, [pc, #116]	@ (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d018      	beq.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a1c      	ldr	r2, [pc, #112]	@ (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d013      	beq.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a1a      	ldr	r2, [pc, #104]	@ (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00e      	beq.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a15      	ldr	r2, [pc, #84]	@ (80098dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d009      	beq.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a16      	ldr	r2, [pc, #88]	@ (80098ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d004      	beq.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a15      	ldr	r2, [pc, #84]	@ (80098f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10c      	bne.n	80098ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	40010000 	.word	0x40010000
 80098dc:	40010400 	.word	0x40010400
 80098e0:	40000400 	.word	0x40000400
 80098e4:	40000800 	.word	0x40000800
 80098e8:	40000c00 	.word	0x40000c00
 80098ec:	40014000 	.word	0x40014000
 80098f0:	40001800 	.word	0x40001800

080098f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e040      	b.n	80099c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d106      	bne.n	8009958 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7f7 ff7a 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2224      	movs	r2, #36	@ 0x24
 800995c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 0201 	bic.w	r2, r2, #1
 800996c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fe62 	bl	800a640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fbfb 	bl	800a178 <UART_SetConfig>
 8009982:	4603      	mov	r3, r0
 8009984:	2b01      	cmp	r3, #1
 8009986:	d101      	bne.n	800998c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e01b      	b.n	80099c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800999a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	689a      	ldr	r2, [r3, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f042 0201 	orr.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fee1 	bl	800a784 <UART_CheckIdleState>
 80099c2:	4603      	mov	r3, r0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08a      	sub	sp, #40	@ 0x28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	4613      	mov	r3, r2
 80099d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d165      	bne.n	8009aae <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <HAL_UART_Transmit_DMA+0x22>
 80099e8:	88fb      	ldrh	r3, [r7, #6]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e05e      	b.n	8009ab0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	88fa      	ldrh	r2, [r7, #6]
 80099fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	88fa      	ldrh	r2, [r7, #6]
 8009a04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2221      	movs	r2, #33	@ 0x21
 8009a14:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d027      	beq.n	8009a6e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a22:	4a25      	ldr	r2, [pc, #148]	@ (8009ab8 <HAL_UART_Transmit_DMA+0xec>)
 8009a24:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a2a:	4a24      	ldr	r2, [pc, #144]	@ (8009abc <HAL_UART_Transmit_DMA+0xf0>)
 8009a2c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a32:	4a23      	ldr	r2, [pc, #140]	@ (8009ac0 <HAL_UART_Transmit_DMA+0xf4>)
 8009a34:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a46:	4619      	mov	r1, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3328      	adds	r3, #40	@ 0x28
 8009a4e:	461a      	mov	r2, r3
 8009a50:	88fb      	ldrh	r3, [r7, #6]
 8009a52:	f7f9 fac9 	bl	8002fe8 <HAL_DMA_Start_IT>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2210      	movs	r2, #16
 8009a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2220      	movs	r2, #32
 8009a68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e020      	b.n	8009ab0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2240      	movs	r2, #64	@ 0x40
 8009a74:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	e853 3f00 	ldrex	r3, [r3]
 8009a84:	613b      	str	r3, [r7, #16]
   return(result);
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3308      	adds	r3, #8
 8009a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a96:	623a      	str	r2, [r7, #32]
 8009a98:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	69f9      	ldr	r1, [r7, #28]
 8009a9c:	6a3a      	ldr	r2, [r7, #32]
 8009a9e:	e841 2300 	strex	r3, r2, [r1]
 8009aa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1e5      	bne.n	8009a76 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e000      	b.n	8009ab0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009aae:	2302      	movs	r3, #2
  }
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3728      	adds	r7, #40	@ 0x28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	0800ab61 	.word	0x0800ab61
 8009abc:	0800abf7 	.word	0x0800abf7
 8009ac0:	0800ade3 	.word	0x0800ade3

08009ac4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08a      	sub	sp, #40	@ 0x28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d132      	bne.n	8009b42 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <HAL_UART_Receive_DMA+0x24>
 8009ae2:	88fb      	ldrh	r3, [r7, #6]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e02b      	b.n	8009b44 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d018      	beq.n	8009b32 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	623b      	str	r3, [r7, #32]
 8009b20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	69f9      	ldr	r1, [r7, #28]
 8009b24:	6a3a      	ldr	r2, [r7, #32]
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e6      	bne.n	8009b00 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009b32:	88fb      	ldrh	r3, [r7, #6]
 8009b34:	461a      	mov	r2, r3
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 fee7 	bl	800a90c <UART_Start_Receive_DMA>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	e000      	b.n	8009b44 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009b42:	2302      	movs	r3, #2
  }
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3728      	adds	r7, #40	@ 0x28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b0ba      	sub	sp, #232	@ 0xe8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b76:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d115      	bne.n	8009bb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00f      	beq.n	8009bb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d009      	beq.n	8009bb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 82b1 	beq.w	800a10c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	4798      	blx	r3
      }
      return;
 8009bb2:	e2ab      	b.n	800a10c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 8117 	beq.w	8009dec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009bca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009bce:	4b85      	ldr	r3, [pc, #532]	@ (8009de4 <HAL_UART_IRQHandler+0x298>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 810a 	beq.w	8009dec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d011      	beq.n	8009c08 <HAL_UART_IRQHandler+0xbc>
 8009be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bfe:	f043 0201 	orr.w	r2, r3, #1
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d011      	beq.n	8009c38 <HAL_UART_IRQHandler+0xec>
 8009c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00b      	beq.n	8009c38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2202      	movs	r2, #2
 8009c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c2e:	f043 0204 	orr.w	r2, r3, #4
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d011      	beq.n	8009c68 <HAL_UART_IRQHandler+0x11c>
 8009c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2204      	movs	r2, #4
 8009c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c5e:	f043 0202 	orr.w	r2, r3, #2
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6c:	f003 0308 	and.w	r3, r3, #8
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d017      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d105      	bne.n	8009c8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00b      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2208      	movs	r2, #8
 8009c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c9a:	f043 0208 	orr.w	r2, r3, #8
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d012      	beq.n	8009cd6 <HAL_UART_IRQHandler+0x18a>
 8009cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00c      	beq.n	8009cd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ccc:	f043 0220 	orr.w	r2, r3, #32
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 8217 	beq.w	800a110 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00d      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf2:	f003 0320 	and.w	r3, r3, #32
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d007      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1e:	2b40      	cmp	r3, #64	@ 0x40
 8009d20:	d005      	beq.n	8009d2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d04f      	beq.n	8009dce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 feb2 	bl	800aa98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d3e:	2b40      	cmp	r3, #64	@ 0x40
 8009d40:	d141      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3308      	adds	r3, #8
 8009d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d50:	e853 3f00 	ldrex	r3, [r3]
 8009d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3308      	adds	r3, #8
 8009d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1d9      	bne.n	8009d42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d013      	beq.n	8009dbe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d9a:	4a13      	ldr	r2, [pc, #76]	@ (8009de8 <HAL_UART_IRQHandler+0x29c>)
 8009d9c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7f9 f9f0 	bl	8003188 <HAL_DMA_Abort_IT>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d017      	beq.n	8009dde <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009db8:	4610      	mov	r0, r2
 8009dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbc:	e00f      	b.n	8009dde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f9c4 	bl	800a14c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc4:	e00b      	b.n	8009dde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f9c0 	bl	800a14c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dcc:	e007      	b.n	8009dde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f9bc 	bl	800a14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009ddc:	e198      	b.n	800a110 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dde:	bf00      	nop
    return;
 8009de0:	e196      	b.n	800a110 <HAL_UART_IRQHandler+0x5c4>
 8009de2:	bf00      	nop
 8009de4:	04000120 	.word	0x04000120
 8009de8:	0800ae61 	.word	0x0800ae61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	f040 8166 	bne.w	800a0c2 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dfa:	f003 0310 	and.w	r3, r3, #16
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 815f 	beq.w	800a0c2 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 8158 	beq.w	800a0c2 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2210      	movs	r2, #16
 8009e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e24:	2b40      	cmp	r3, #64	@ 0x40
 8009e26:	f040 80d0 	bne.w	8009fca <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 80ab 	beq.w	8009f96 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	f080 80a3 	bcs.w	8009f96 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e64:	f000 8086 	beq.w	8009f74 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1da      	bne.n	8009e68 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ec4:	f023 0301 	bic.w	r3, r3, #1
 8009ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ed6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009eda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ee2:	e841 2300 	strex	r3, r2, [r1]
 8009ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1e1      	bne.n	8009eb2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ef8:	e853 3f00 	ldrex	r3, [r3]
 8009efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e3      	bne.n	8009eee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f44:	f023 0310 	bic.w	r3, r3, #16
 8009f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	461a      	mov	r2, r3
 8009f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e4      	bne.n	8009f34 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7f9 f89a 	bl	80030a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f8e6 	bl	800a160 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f94:	e0be      	b.n	800a114 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009f9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	f040 80b7 	bne.w	800a114 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fb0:	f040 80b0 	bne.w	800a114 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8cc 	bl	800a160 <HAL_UARTEx_RxEventCallback>
      return;
 8009fc8:	e0a4      	b.n	800a114 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 8096 	beq.w	800a118 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8009fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 8091 	beq.w	800a118 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	e853 3f00 	ldrex	r3, [r3]
 800a002:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a00a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a018:	647b      	str	r3, [r7, #68]	@ 0x44
 800a01a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a01e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a020:	e841 2300 	strex	r3, r2, [r1]
 800a024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e4      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3308      	adds	r3, #8
 800a032:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	623b      	str	r3, [r7, #32]
   return(result);
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	f023 0301 	bic.w	r3, r3, #1
 800a042:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a050:	633a      	str	r2, [r7, #48]	@ 0x30
 800a052:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e3      	bne.n	800a02c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2220      	movs	r2, #32
 800a068:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	e853 3f00 	ldrex	r3, [r3]
 800a084:	60fb      	str	r3, [r7, #12]
   return(result);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f023 0310 	bic.w	r3, r3, #16
 800a08c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	461a      	mov	r2, r3
 800a096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a09a:	61fb      	str	r3, [r7, #28]
 800a09c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	69b9      	ldr	r1, [r7, #24]
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	e841 2300 	strex	r3, r2, [r1]
 800a0a6:	617b      	str	r3, [r7, #20]
   return(result);
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e4      	bne.n	800a078 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f850 	bl	800a160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0c0:	e02a      	b.n	800a118 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00e      	beq.n	800a0ec <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a0ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d008      	beq.n	800a0ec <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01c      	beq.n	800a11c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	4798      	blx	r3
    }
    return;
 800a0ea:	e017      	b.n	800a11c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d012      	beq.n	800a11e <HAL_UART_IRQHandler+0x5d2>
 800a0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00c      	beq.n	800a11e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 febd 	bl	800ae84 <UART_EndTransmit_IT>
    return;
 800a10a:	e008      	b.n	800a11e <HAL_UART_IRQHandler+0x5d2>
      return;
 800a10c:	bf00      	nop
 800a10e:	e006      	b.n	800a11e <HAL_UART_IRQHandler+0x5d2>
    return;
 800a110:	bf00      	nop
 800a112:	e004      	b.n	800a11e <HAL_UART_IRQHandler+0x5d2>
      return;
 800a114:	bf00      	nop
 800a116:	e002      	b.n	800a11e <HAL_UART_IRQHandler+0x5d2>
      return;
 800a118:	bf00      	nop
 800a11a:	e000      	b.n	800a11e <HAL_UART_IRQHandler+0x5d2>
    return;
 800a11c:	bf00      	nop
  }

}
 800a11e:	37e8      	adds	r7, #232	@ 0xe8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	431a      	orrs	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	431a      	orrs	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	4313      	orrs	r3, r2
 800a19a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	4ba6      	ldr	r3, [pc, #664]	@ (800a43c <UART_SetConfig+0x2c4>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	6812      	ldr	r2, [r2, #0]
 800a1aa:	6979      	ldr	r1, [r7, #20]
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a94      	ldr	r2, [pc, #592]	@ (800a440 <UART_SetConfig+0x2c8>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d120      	bne.n	800a236 <UART_SetConfig+0xbe>
 800a1f4:	4b93      	ldr	r3, [pc, #588]	@ (800a444 <UART_SetConfig+0x2cc>)
 800a1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d816      	bhi.n	800a230 <UART_SetConfig+0xb8>
 800a202:	a201      	add	r2, pc, #4	@ (adr r2, 800a208 <UART_SetConfig+0x90>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a219 	.word	0x0800a219
 800a20c:	0800a225 	.word	0x0800a225
 800a210:	0800a21f 	.word	0x0800a21f
 800a214:	0800a22b 	.word	0x0800a22b
 800a218:	2301      	movs	r3, #1
 800a21a:	77fb      	strb	r3, [r7, #31]
 800a21c:	e150      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a21e:	2302      	movs	r3, #2
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	e14d      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a224:	2304      	movs	r3, #4
 800a226:	77fb      	strb	r3, [r7, #31]
 800a228:	e14a      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a22a:	2308      	movs	r3, #8
 800a22c:	77fb      	strb	r3, [r7, #31]
 800a22e:	e147      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a230:	2310      	movs	r3, #16
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e144      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a83      	ldr	r2, [pc, #524]	@ (800a448 <UART_SetConfig+0x2d0>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d132      	bne.n	800a2a6 <UART_SetConfig+0x12e>
 800a240:	4b80      	ldr	r3, [pc, #512]	@ (800a444 <UART_SetConfig+0x2cc>)
 800a242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a246:	f003 030c 	and.w	r3, r3, #12
 800a24a:	2b0c      	cmp	r3, #12
 800a24c:	d828      	bhi.n	800a2a0 <UART_SetConfig+0x128>
 800a24e:	a201      	add	r2, pc, #4	@ (adr r2, 800a254 <UART_SetConfig+0xdc>)
 800a250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a254:	0800a289 	.word	0x0800a289
 800a258:	0800a2a1 	.word	0x0800a2a1
 800a25c:	0800a2a1 	.word	0x0800a2a1
 800a260:	0800a2a1 	.word	0x0800a2a1
 800a264:	0800a295 	.word	0x0800a295
 800a268:	0800a2a1 	.word	0x0800a2a1
 800a26c:	0800a2a1 	.word	0x0800a2a1
 800a270:	0800a2a1 	.word	0x0800a2a1
 800a274:	0800a28f 	.word	0x0800a28f
 800a278:	0800a2a1 	.word	0x0800a2a1
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a2a1 	.word	0x0800a2a1
 800a284:	0800a29b 	.word	0x0800a29b
 800a288:	2300      	movs	r3, #0
 800a28a:	77fb      	strb	r3, [r7, #31]
 800a28c:	e118      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a28e:	2302      	movs	r3, #2
 800a290:	77fb      	strb	r3, [r7, #31]
 800a292:	e115      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a294:	2304      	movs	r3, #4
 800a296:	77fb      	strb	r3, [r7, #31]
 800a298:	e112      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a29a:	2308      	movs	r3, #8
 800a29c:	77fb      	strb	r3, [r7, #31]
 800a29e:	e10f      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e10c      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a68      	ldr	r2, [pc, #416]	@ (800a44c <UART_SetConfig+0x2d4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d120      	bne.n	800a2f2 <UART_SetConfig+0x17a>
 800a2b0:	4b64      	ldr	r3, [pc, #400]	@ (800a444 <UART_SetConfig+0x2cc>)
 800a2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a2ba:	2b30      	cmp	r3, #48	@ 0x30
 800a2bc:	d013      	beq.n	800a2e6 <UART_SetConfig+0x16e>
 800a2be:	2b30      	cmp	r3, #48	@ 0x30
 800a2c0:	d814      	bhi.n	800a2ec <UART_SetConfig+0x174>
 800a2c2:	2b20      	cmp	r3, #32
 800a2c4:	d009      	beq.n	800a2da <UART_SetConfig+0x162>
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	d810      	bhi.n	800a2ec <UART_SetConfig+0x174>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <UART_SetConfig+0x15c>
 800a2ce:	2b10      	cmp	r3, #16
 800a2d0:	d006      	beq.n	800a2e0 <UART_SetConfig+0x168>
 800a2d2:	e00b      	b.n	800a2ec <UART_SetConfig+0x174>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	77fb      	strb	r3, [r7, #31]
 800a2d8:	e0f2      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a2da:	2302      	movs	r3, #2
 800a2dc:	77fb      	strb	r3, [r7, #31]
 800a2de:	e0ef      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a2e0:	2304      	movs	r3, #4
 800a2e2:	77fb      	strb	r3, [r7, #31]
 800a2e4:	e0ec      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a2e6:	2308      	movs	r3, #8
 800a2e8:	77fb      	strb	r3, [r7, #31]
 800a2ea:	e0e9      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	77fb      	strb	r3, [r7, #31]
 800a2f0:	e0e6      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a56      	ldr	r2, [pc, #344]	@ (800a450 <UART_SetConfig+0x2d8>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d120      	bne.n	800a33e <UART_SetConfig+0x1c6>
 800a2fc:	4b51      	ldr	r3, [pc, #324]	@ (800a444 <UART_SetConfig+0x2cc>)
 800a2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a302:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a306:	2bc0      	cmp	r3, #192	@ 0xc0
 800a308:	d013      	beq.n	800a332 <UART_SetConfig+0x1ba>
 800a30a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a30c:	d814      	bhi.n	800a338 <UART_SetConfig+0x1c0>
 800a30e:	2b80      	cmp	r3, #128	@ 0x80
 800a310:	d009      	beq.n	800a326 <UART_SetConfig+0x1ae>
 800a312:	2b80      	cmp	r3, #128	@ 0x80
 800a314:	d810      	bhi.n	800a338 <UART_SetConfig+0x1c0>
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <UART_SetConfig+0x1a8>
 800a31a:	2b40      	cmp	r3, #64	@ 0x40
 800a31c:	d006      	beq.n	800a32c <UART_SetConfig+0x1b4>
 800a31e:	e00b      	b.n	800a338 <UART_SetConfig+0x1c0>
 800a320:	2300      	movs	r3, #0
 800a322:	77fb      	strb	r3, [r7, #31]
 800a324:	e0cc      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a326:	2302      	movs	r3, #2
 800a328:	77fb      	strb	r3, [r7, #31]
 800a32a:	e0c9      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a32c:	2304      	movs	r3, #4
 800a32e:	77fb      	strb	r3, [r7, #31]
 800a330:	e0c6      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a332:	2308      	movs	r3, #8
 800a334:	77fb      	strb	r3, [r7, #31]
 800a336:	e0c3      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a338:	2310      	movs	r3, #16
 800a33a:	77fb      	strb	r3, [r7, #31]
 800a33c:	e0c0      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a44      	ldr	r2, [pc, #272]	@ (800a454 <UART_SetConfig+0x2dc>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d125      	bne.n	800a394 <UART_SetConfig+0x21c>
 800a348:	4b3e      	ldr	r3, [pc, #248]	@ (800a444 <UART_SetConfig+0x2cc>)
 800a34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a34e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a356:	d017      	beq.n	800a388 <UART_SetConfig+0x210>
 800a358:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a35c:	d817      	bhi.n	800a38e <UART_SetConfig+0x216>
 800a35e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a362:	d00b      	beq.n	800a37c <UART_SetConfig+0x204>
 800a364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a368:	d811      	bhi.n	800a38e <UART_SetConfig+0x216>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <UART_SetConfig+0x1fe>
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a372:	d006      	beq.n	800a382 <UART_SetConfig+0x20a>
 800a374:	e00b      	b.n	800a38e <UART_SetConfig+0x216>
 800a376:	2300      	movs	r3, #0
 800a378:	77fb      	strb	r3, [r7, #31]
 800a37a:	e0a1      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a37c:	2302      	movs	r3, #2
 800a37e:	77fb      	strb	r3, [r7, #31]
 800a380:	e09e      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a382:	2304      	movs	r3, #4
 800a384:	77fb      	strb	r3, [r7, #31]
 800a386:	e09b      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a388:	2308      	movs	r3, #8
 800a38a:	77fb      	strb	r3, [r7, #31]
 800a38c:	e098      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a38e:	2310      	movs	r3, #16
 800a390:	77fb      	strb	r3, [r7, #31]
 800a392:	e095      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a2f      	ldr	r2, [pc, #188]	@ (800a458 <UART_SetConfig+0x2e0>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d125      	bne.n	800a3ea <UART_SetConfig+0x272>
 800a39e:	4b29      	ldr	r3, [pc, #164]	@ (800a444 <UART_SetConfig+0x2cc>)
 800a3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a3a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3ac:	d017      	beq.n	800a3de <UART_SetConfig+0x266>
 800a3ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3b2:	d817      	bhi.n	800a3e4 <UART_SetConfig+0x26c>
 800a3b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3b8:	d00b      	beq.n	800a3d2 <UART_SetConfig+0x25a>
 800a3ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3be:	d811      	bhi.n	800a3e4 <UART_SetConfig+0x26c>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <UART_SetConfig+0x254>
 800a3c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3c8:	d006      	beq.n	800a3d8 <UART_SetConfig+0x260>
 800a3ca:	e00b      	b.n	800a3e4 <UART_SetConfig+0x26c>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	77fb      	strb	r3, [r7, #31]
 800a3d0:	e076      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	77fb      	strb	r3, [r7, #31]
 800a3d6:	e073      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a3d8:	2304      	movs	r3, #4
 800a3da:	77fb      	strb	r3, [r7, #31]
 800a3dc:	e070      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a3de:	2308      	movs	r3, #8
 800a3e0:	77fb      	strb	r3, [r7, #31]
 800a3e2:	e06d      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	77fb      	strb	r3, [r7, #31]
 800a3e8:	e06a      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a1b      	ldr	r2, [pc, #108]	@ (800a45c <UART_SetConfig+0x2e4>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d138      	bne.n	800a466 <UART_SetConfig+0x2ee>
 800a3f4:	4b13      	ldr	r3, [pc, #76]	@ (800a444 <UART_SetConfig+0x2cc>)
 800a3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3fa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a3fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a402:	d017      	beq.n	800a434 <UART_SetConfig+0x2bc>
 800a404:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a408:	d82a      	bhi.n	800a460 <UART_SetConfig+0x2e8>
 800a40a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a40e:	d00b      	beq.n	800a428 <UART_SetConfig+0x2b0>
 800a410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a414:	d824      	bhi.n	800a460 <UART_SetConfig+0x2e8>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <UART_SetConfig+0x2aa>
 800a41a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a41e:	d006      	beq.n	800a42e <UART_SetConfig+0x2b6>
 800a420:	e01e      	b.n	800a460 <UART_SetConfig+0x2e8>
 800a422:	2300      	movs	r3, #0
 800a424:	77fb      	strb	r3, [r7, #31]
 800a426:	e04b      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a428:	2302      	movs	r3, #2
 800a42a:	77fb      	strb	r3, [r7, #31]
 800a42c:	e048      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a42e:	2304      	movs	r3, #4
 800a430:	77fb      	strb	r3, [r7, #31]
 800a432:	e045      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a434:	2308      	movs	r3, #8
 800a436:	77fb      	strb	r3, [r7, #31]
 800a438:	e042      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a43a:	bf00      	nop
 800a43c:	efff69f3 	.word	0xefff69f3
 800a440:	40011000 	.word	0x40011000
 800a444:	40023800 	.word	0x40023800
 800a448:	40004400 	.word	0x40004400
 800a44c:	40004800 	.word	0x40004800
 800a450:	40004c00 	.word	0x40004c00
 800a454:	40005000 	.word	0x40005000
 800a458:	40011400 	.word	0x40011400
 800a45c:	40007800 	.word	0x40007800
 800a460:	2310      	movs	r3, #16
 800a462:	77fb      	strb	r3, [r7, #31]
 800a464:	e02c      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a72      	ldr	r2, [pc, #456]	@ (800a634 <UART_SetConfig+0x4bc>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d125      	bne.n	800a4bc <UART_SetConfig+0x344>
 800a470:	4b71      	ldr	r3, [pc, #452]	@ (800a638 <UART_SetConfig+0x4c0>)
 800a472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a476:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a47a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a47e:	d017      	beq.n	800a4b0 <UART_SetConfig+0x338>
 800a480:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a484:	d817      	bhi.n	800a4b6 <UART_SetConfig+0x33e>
 800a486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a48a:	d00b      	beq.n	800a4a4 <UART_SetConfig+0x32c>
 800a48c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a490:	d811      	bhi.n	800a4b6 <UART_SetConfig+0x33e>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <UART_SetConfig+0x326>
 800a496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a49a:	d006      	beq.n	800a4aa <UART_SetConfig+0x332>
 800a49c:	e00b      	b.n	800a4b6 <UART_SetConfig+0x33e>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	77fb      	strb	r3, [r7, #31]
 800a4a2:	e00d      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	77fb      	strb	r3, [r7, #31]
 800a4a8:	e00a      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a4aa:	2304      	movs	r3, #4
 800a4ac:	77fb      	strb	r3, [r7, #31]
 800a4ae:	e007      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a4b0:	2308      	movs	r3, #8
 800a4b2:	77fb      	strb	r3, [r7, #31]
 800a4b4:	e004      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	77fb      	strb	r3, [r7, #31]
 800a4ba:	e001      	b.n	800a4c0 <UART_SetConfig+0x348>
 800a4bc:	2310      	movs	r3, #16
 800a4be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4c8:	d15b      	bne.n	800a582 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a4ca:	7ffb      	ldrb	r3, [r7, #31]
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d828      	bhi.n	800a522 <UART_SetConfig+0x3aa>
 800a4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <UART_SetConfig+0x360>)
 800a4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d6:	bf00      	nop
 800a4d8:	0800a4fd 	.word	0x0800a4fd
 800a4dc:	0800a505 	.word	0x0800a505
 800a4e0:	0800a50d 	.word	0x0800a50d
 800a4e4:	0800a523 	.word	0x0800a523
 800a4e8:	0800a513 	.word	0x0800a513
 800a4ec:	0800a523 	.word	0x0800a523
 800a4f0:	0800a523 	.word	0x0800a523
 800a4f4:	0800a523 	.word	0x0800a523
 800a4f8:	0800a51b 	.word	0x0800a51b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4fc:	f7fd f9c0 	bl	8007880 <HAL_RCC_GetPCLK1Freq>
 800a500:	61b8      	str	r0, [r7, #24]
        break;
 800a502:	e013      	b.n	800a52c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a504:	f7fd f9d0 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800a508:	61b8      	str	r0, [r7, #24]
        break;
 800a50a:	e00f      	b.n	800a52c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a50c:	4b4b      	ldr	r3, [pc, #300]	@ (800a63c <UART_SetConfig+0x4c4>)
 800a50e:	61bb      	str	r3, [r7, #24]
        break;
 800a510:	e00c      	b.n	800a52c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a512:	f7fd f8a3 	bl	800765c <HAL_RCC_GetSysClockFreq>
 800a516:	61b8      	str	r0, [r7, #24]
        break;
 800a518:	e008      	b.n	800a52c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a51a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a51e:	61bb      	str	r3, [r7, #24]
        break;
 800a520:	e004      	b.n	800a52c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a522:	2300      	movs	r3, #0
 800a524:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	77bb      	strb	r3, [r7, #30]
        break;
 800a52a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d074      	beq.n	800a61c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	005a      	lsls	r2, r3, #1
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	085b      	lsrs	r3, r3, #1
 800a53c:	441a      	add	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	fbb2 f3f3 	udiv	r3, r2, r3
 800a546:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	2b0f      	cmp	r3, #15
 800a54c:	d916      	bls.n	800a57c <UART_SetConfig+0x404>
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a554:	d212      	bcs.n	800a57c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	f023 030f 	bic.w	r3, r3, #15
 800a55e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	085b      	lsrs	r3, r3, #1
 800a564:	b29b      	uxth	r3, r3
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	89fb      	ldrh	r3, [r7, #14]
 800a56e:	4313      	orrs	r3, r2
 800a570:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	89fa      	ldrh	r2, [r7, #14]
 800a578:	60da      	str	r2, [r3, #12]
 800a57a:	e04f      	b.n	800a61c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	77bb      	strb	r3, [r7, #30]
 800a580:	e04c      	b.n	800a61c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a582:	7ffb      	ldrb	r3, [r7, #31]
 800a584:	2b08      	cmp	r3, #8
 800a586:	d828      	bhi.n	800a5da <UART_SetConfig+0x462>
 800a588:	a201      	add	r2, pc, #4	@ (adr r2, 800a590 <UART_SetConfig+0x418>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5b5 	.word	0x0800a5b5
 800a594:	0800a5bd 	.word	0x0800a5bd
 800a598:	0800a5c5 	.word	0x0800a5c5
 800a59c:	0800a5db 	.word	0x0800a5db
 800a5a0:	0800a5cb 	.word	0x0800a5cb
 800a5a4:	0800a5db 	.word	0x0800a5db
 800a5a8:	0800a5db 	.word	0x0800a5db
 800a5ac:	0800a5db 	.word	0x0800a5db
 800a5b0:	0800a5d3 	.word	0x0800a5d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b4:	f7fd f964 	bl	8007880 <HAL_RCC_GetPCLK1Freq>
 800a5b8:	61b8      	str	r0, [r7, #24]
        break;
 800a5ba:	e013      	b.n	800a5e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5bc:	f7fd f974 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800a5c0:	61b8      	str	r0, [r7, #24]
        break;
 800a5c2:	e00f      	b.n	800a5e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a63c <UART_SetConfig+0x4c4>)
 800a5c6:	61bb      	str	r3, [r7, #24]
        break;
 800a5c8:	e00c      	b.n	800a5e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5ca:	f7fd f847 	bl	800765c <HAL_RCC_GetSysClockFreq>
 800a5ce:	61b8      	str	r0, [r7, #24]
        break;
 800a5d0:	e008      	b.n	800a5e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5d6:	61bb      	str	r3, [r7, #24]
        break;
 800a5d8:	e004      	b.n	800a5e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	77bb      	strb	r3, [r7, #30]
        break;
 800a5e2:	bf00      	nop
    }

    if (pclk != 0U)
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d018      	beq.n	800a61c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	085a      	lsrs	r2, r3, #1
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	441a      	add	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	2b0f      	cmp	r3, #15
 800a602:	d909      	bls.n	800a618 <UART_SetConfig+0x4a0>
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a60a:	d205      	bcs.n	800a618 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	b29a      	uxth	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60da      	str	r2, [r3, #12]
 800a616:	e001      	b.n	800a61c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a628:	7fbb      	ldrb	r3, [r7, #30]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3720      	adds	r7, #32
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	40007c00 	.word	0x40007c00
 800a638:	40023800 	.word	0x40023800
 800a63c:	00f42400 	.word	0x00f42400

0800a640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64c:	f003 0308 	and.w	r3, r3, #8
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00a      	beq.n	800a66a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00a      	beq.n	800a68c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a690:	f003 0302 	and.w	r3, r3, #2
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00a      	beq.n	800a6ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b2:	f003 0304 	and.w	r3, r3, #4
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d4:	f003 0310 	and.w	r3, r3, #16
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00a      	beq.n	800a6f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f6:	f003 0320 	and.w	r3, r3, #32
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00a      	beq.n	800a714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d01a      	beq.n	800a756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	430a      	orrs	r2, r1
 800a734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a73a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a73e:	d10a      	bne.n	800a756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	605a      	str	r2, [r3, #4]
  }
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08c      	sub	sp, #48	@ 0x30
 800a788:	af02      	add	r7, sp, #8
 800a78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a794:	f7f7 fc8e 	bl	80020b4 <HAL_GetTick>
 800a798:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0308 	and.w	r3, r3, #8
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	d12e      	bne.n	800a806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f83b 	bl	800a832 <UART_WaitOnFlagUntilTimeout>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d021      	beq.n	800a806 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	e853 3f00 	ldrex	r3, [r3]
 800a7ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7d6:	623b      	str	r3, [r7, #32]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6a3b      	ldr	r3, [r7, #32]
 800a7e0:	61fb      	str	r3, [r7, #28]
 800a7e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e4:	69b9      	ldr	r1, [r7, #24]
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	e841 2300 	strex	r3, r2, [r1]
 800a7ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e6      	bne.n	800a7c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e011      	b.n	800a82a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3728      	adds	r7, #40	@ 0x28
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	60f8      	str	r0, [r7, #12]
 800a83a:	60b9      	str	r1, [r7, #8]
 800a83c:	603b      	str	r3, [r7, #0]
 800a83e:	4613      	mov	r3, r2
 800a840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a842:	e04f      	b.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84a:	d04b      	beq.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a84c:	f7f7 fc32 	bl	80020b4 <HAL_GetTick>
 800a850:	4602      	mov	r2, r0
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d302      	bcc.n	800a862 <UART_WaitOnFlagUntilTimeout+0x30>
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e04e      	b.n	800a904 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0304 	and.w	r3, r3, #4
 800a870:	2b00      	cmp	r3, #0
 800a872:	d037      	beq.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b80      	cmp	r3, #128	@ 0x80
 800a878:	d034      	beq.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b40      	cmp	r3, #64	@ 0x40
 800a87e:	d031      	beq.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	f003 0308 	and.w	r3, r3, #8
 800a88a:	2b08      	cmp	r3, #8
 800a88c:	d110      	bne.n	800a8b0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2208      	movs	r2, #8
 800a894:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 f8fe 	bl	800aa98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2208      	movs	r2, #8
 800a8a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e029      	b.n	800a904 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8be:	d111      	bne.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 f8e4 	bl	800aa98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e00f      	b.n	800a904 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	69da      	ldr	r2, [r3, #28]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	bf0c      	ite	eq
 800a8f4:	2301      	moveq	r3, #1
 800a8f6:	2300      	movne	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d0a0      	beq.n	800a844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b096      	sub	sp, #88	@ 0x58
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	4613      	mov	r3, r2
 800a918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	88fa      	ldrh	r2, [r7, #6]
 800a924:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2222      	movs	r2, #34	@ 0x22
 800a934:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d028      	beq.n	800a992 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a944:	4a3e      	ldr	r2, [pc, #248]	@ (800aa40 <UART_Start_Receive_DMA+0x134>)
 800a946:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a94c:	4a3d      	ldr	r2, [pc, #244]	@ (800aa44 <UART_Start_Receive_DMA+0x138>)
 800a94e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a954:	4a3c      	ldr	r2, [pc, #240]	@ (800aa48 <UART_Start_Receive_DMA+0x13c>)
 800a956:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a95c:	2200      	movs	r2, #0
 800a95e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3324      	adds	r3, #36	@ 0x24
 800a96a:	4619      	mov	r1, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a970:	461a      	mov	r2, r3
 800a972:	88fb      	ldrh	r3, [r7, #6]
 800a974:	f7f8 fb38 	bl	8002fe8 <HAL_DMA_Start_IT>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d009      	beq.n	800a992 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2210      	movs	r2, #16
 800a982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2220      	movs	r2, #32
 800a98a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e051      	b.n	800aa36 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d018      	beq.n	800a9cc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a2:	e853 3f00 	ldrex	r3, [r3]
 800a9a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a9be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a9c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e6      	bne.n	800a99a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9de:	f043 0301 	orr.w	r3, r3, #1
 800a9e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a9ec:	637a      	str	r2, [r7, #52]	@ 0x34
 800a9ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e5      	bne.n	800a9cc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3308      	adds	r3, #8
 800aa06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	e853 3f00 	ldrex	r3, [r3]
 800aa0e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa20:	623a      	str	r2, [r7, #32]
 800aa22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa24:	69f9      	ldr	r1, [r7, #28]
 800aa26:	6a3a      	ldr	r2, [r7, #32]
 800aa28:	e841 2300 	strex	r3, r2, [r1]
 800aa2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1e5      	bne.n	800aa00 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3758      	adds	r7, #88	@ 0x58
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	0800ac13 	.word	0x0800ac13
 800aa44:	0800ad71 	.word	0x0800ad71
 800aa48:	0800ade3 	.word	0x0800ade3

0800aa4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b089      	sub	sp, #36	@ 0x24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aa68:	61fb      	str	r3, [r7, #28]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	61bb      	str	r3, [r7, #24]
 800aa74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa76:	6979      	ldr	r1, [r7, #20]
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	e841 2300 	strex	r3, r2, [r1]
 800aa7e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1e6      	bne.n	800aa54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2220      	movs	r2, #32
 800aa8a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800aa8c:	bf00      	nop
 800aa8e:	3724      	adds	r7, #36	@ 0x24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b095      	sub	sp, #84	@ 0x54
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aabe:	643b      	str	r3, [r7, #64]	@ 0x40
 800aac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e6      	bne.n	800aaa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	e853 3f00 	ldrex	r3, [r3]
 800aae0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	f023 0301 	bic.w	r3, r3, #1
 800aae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aaf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aaf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e5      	bne.n	800aad2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d118      	bne.n	800ab40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f023 0310 	bic.w	r3, r3, #16
 800ab22:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab2c:	61bb      	str	r3, [r7, #24]
 800ab2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	6979      	ldr	r1, [r7, #20]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	613b      	str	r3, [r7, #16]
   return(result);
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e6      	bne.n	800ab0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2220      	movs	r2, #32
 800ab44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ab54:	bf00      	nop
 800ab56:	3754      	adds	r7, #84	@ 0x54
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b090      	sub	sp, #64	@ 0x40
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab76:	d037      	beq.n	800abe8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ab78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3308      	adds	r3, #8
 800ab86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	e853 3f00 	ldrex	r3, [r3]
 800ab8e:	623b      	str	r3, [r7, #32]
   return(result);
 800ab90:	6a3b      	ldr	r3, [r7, #32]
 800ab92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab96:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aba0:	633a      	str	r2, [r7, #48]	@ 0x30
 800aba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aba8:	e841 2300 	strex	r3, r2, [r1]
 800abac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1e5      	bne.n	800ab80 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	60fb      	str	r3, [r7, #12]
   return(result);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800abca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	461a      	mov	r2, r3
 800abd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd2:	61fb      	str	r3, [r7, #28]
 800abd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	69b9      	ldr	r1, [r7, #24]
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	e841 2300 	strex	r3, r2, [r1]
 800abde:	617b      	str	r3, [r7, #20]
   return(result);
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1e6      	bne.n	800abb4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abe6:	e002      	b.n	800abee <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800abe8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800abea:	f00b fed1 	bl	8016990 <HAL_UART_TxCpltCallback>
}
 800abee:	bf00      	nop
 800abf0:	3740      	adds	r7, #64	@ 0x40
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff fa8d 	bl	800a124 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac0a:	bf00      	nop
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b09c      	sub	sp, #112	@ 0x70
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	69db      	ldr	r3, [r3, #28]
 800ac24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac28:	d071      	beq.n	800ad0e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ac2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac3a:	e853 3f00 	ldrex	r3, [r3]
 800ac3e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac46:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac50:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac52:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac58:	e841 2300 	strex	r3, r2, [r1]
 800ac5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ac5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e6      	bne.n	800ac32 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3308      	adds	r3, #8
 800ac6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac6e:	e853 3f00 	ldrex	r3, [r3]
 800ac72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac76:	f023 0301 	bic.w	r3, r3, #1
 800ac7a:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3308      	adds	r3, #8
 800ac82:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ac84:	643a      	str	r2, [r7, #64]	@ 0x40
 800ac86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac8c:	e841 2300 	strex	r3, r2, [r1]
 800ac90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e5      	bne.n	800ac64 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3308      	adds	r3, #8
 800ac9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	e853 3f00 	ldrex	r3, [r3]
 800aca6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acae:	663b      	str	r3, [r7, #96]	@ 0x60
 800acb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3308      	adds	r3, #8
 800acb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800acb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800acba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acc0:	e841 2300 	strex	r3, r2, [r1]
 800acc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1e5      	bne.n	800ac98 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800accc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acce:	2220      	movs	r2, #32
 800acd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d118      	bne.n	800ad0e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	60bb      	str	r3, [r7, #8]
   return(result);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	f023 0310 	bic.w	r3, r3, #16
 800acf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acfa:	61bb      	str	r3, [r7, #24]
 800acfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfe:	6979      	ldr	r1, [r7, #20]
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	613b      	str	r3, [r7, #16]
   return(result);
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e6      	bne.n	800acdc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad10:	2200      	movs	r2, #0
 800ad12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d122      	bne.n	800ad62 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800ad1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800ad2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ad34:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d204      	bcs.n	800ad46 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800ad3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad3e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800ad42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ad4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad5c:	f7ff fa00 	bl	800a160 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad60:	e002      	b.n	800ad68 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800ad62:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad64:	f00b fe36 	bl	80169d4 <HAL_UART_RxCpltCallback>
}
 800ad68:	bf00      	nop
 800ad6a:	3770      	adds	r7, #112	@ 0x70
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2201      	movs	r2, #1
 800ad82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d123      	bne.n	800add4 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ad92:	085b      	lsrs	r3, r3, #1
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800adaa:	897a      	ldrh	r2, [r7, #10]
 800adac:	429a      	cmp	r2, r3
 800adae:	d803      	bhi.n	800adb8 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	897a      	ldrh	r2, [r7, #10]
 800adb4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	b29b      	uxth	r3, r3
 800adca:	4619      	mov	r1, r3
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f7ff f9c7 	bl	800a160 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800add2:	e002      	b.n	800adda <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff f9af 	bl	800a138 <HAL_UART_RxHalfCpltCallback>
}
 800adda:	bf00      	nop
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b086      	sub	sp, #24
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adf4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae08:	2b80      	cmp	r3, #128	@ 0x80
 800ae0a:	d109      	bne.n	800ae20 <UART_DMAError+0x3e>
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2b21      	cmp	r3, #33	@ 0x21
 800ae10:	d106      	bne.n	800ae20 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800ae1a:	6978      	ldr	r0, [r7, #20]
 800ae1c:	f7ff fe16 	bl	800aa4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae2a:	2b40      	cmp	r3, #64	@ 0x40
 800ae2c:	d109      	bne.n	800ae42 <UART_DMAError+0x60>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b22      	cmp	r3, #34	@ 0x22
 800ae32:	d106      	bne.n	800ae42 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800ae3c:	6978      	ldr	r0, [r7, #20]
 800ae3e:	f7ff fe2b 	bl	800aa98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae48:	f043 0210 	orr.w	r2, r3, #16
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae52:	6978      	ldr	r0, [r7, #20]
 800ae54:	f7ff f97a 	bl	800a14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae58:	bf00      	nop
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7ff f968 	bl	800a14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae7c:	bf00      	nop
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aea0:	61fb      	str	r3, [r7, #28]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	61bb      	str	r3, [r7, #24]
 800aeac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	6979      	ldr	r1, [r7, #20]
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e6      	bne.n	800ae8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2220      	movs	r2, #32
 800aec2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f00b fd60 	bl	8016990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aed0:	bf00      	nop
 800aed2:	3720      	adds	r7, #32
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aed8:	b084      	sub	sp, #16
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	f107 001c 	add.w	r0, r7, #28
 800aee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aeea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d121      	bne.n	800af36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	4b21      	ldr	r3, [pc, #132]	@ (800af88 <USB_CoreInit+0xb0>)
 800af04:	4013      	ands	r3, r2
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800af16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d105      	bne.n	800af2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fa92 	bl	800b454 <USB_CoreReset>
 800af30:	4603      	mov	r3, r0
 800af32:	73fb      	strb	r3, [r7, #15]
 800af34:	e010      	b.n	800af58 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fa86 	bl	800b454 <USB_CoreReset>
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800af58:	7fbb      	ldrb	r3, [r7, #30]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d10b      	bne.n	800af76 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f043 0206 	orr.w	r2, r3, #6
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f043 0220 	orr.w	r2, r3, #32
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800af76:	7bfb      	ldrb	r3, [r7, #15]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af82:	b004      	add	sp, #16
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	ffbdffbf 	.word	0xffbdffbf

0800af8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	f023 0201 	bic.w	r2, r3, #1
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	460b      	mov	r3, r1
 800afb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800afca:	78fb      	ldrb	r3, [r7, #3]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d115      	bne.n	800affc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800afdc:	200a      	movs	r0, #10
 800afde:	f7f7 f875 	bl	80020cc <HAL_Delay>
      ms += 10U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	330a      	adds	r3, #10
 800afe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fa25 	bl	800b438 <USB_GetMode>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d01e      	beq.n	800b032 <USB_SetCurrentMode+0x84>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2bc7      	cmp	r3, #199	@ 0xc7
 800aff8:	d9f0      	bls.n	800afdc <USB_SetCurrentMode+0x2e>
 800affa:	e01a      	b.n	800b032 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800affc:	78fb      	ldrb	r3, [r7, #3]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d115      	bne.n	800b02e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b00e:	200a      	movs	r0, #10
 800b010:	f7f7 f85c 	bl	80020cc <HAL_Delay>
      ms += 10U;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	330a      	adds	r3, #10
 800b018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa0c 	bl	800b438 <USB_GetMode>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d005      	beq.n	800b032 <USB_SetCurrentMode+0x84>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2bc7      	cmp	r3, #199	@ 0xc7
 800b02a:	d9f0      	bls.n	800b00e <USB_SetCurrentMode+0x60>
 800b02c:	e001      	b.n	800b032 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e005      	b.n	800b03e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2bc8      	cmp	r3, #200	@ 0xc8
 800b036:	d101      	bne.n	800b03c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e000      	b.n	800b03e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b048:	b084      	sub	sp, #16
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b086      	sub	sp, #24
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b062:	2300      	movs	r3, #0
 800b064:	613b      	str	r3, [r7, #16]
 800b066:	e009      	b.n	800b07c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	3340      	adds	r3, #64	@ 0x40
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	2200      	movs	r2, #0
 800b074:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	3301      	adds	r3, #1
 800b07a:	613b      	str	r3, [r7, #16]
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	2b0e      	cmp	r3, #14
 800b080:	d9f2      	bls.n	800b068 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b082:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b086:	2b00      	cmp	r3, #0
 800b088:	d11c      	bne.n	800b0c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b098:	f043 0302 	orr.w	r3, r3, #2
 800b09c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	601a      	str	r2, [r3, #0]
 800b0c2:	e005      	b.n	800b0d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	2300      	movs	r3, #0
 800b0da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d10d      	bne.n	800b100 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d104      	bne.n	800b0f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f968 	bl	800b3c4 <USB_SetDevSpeed>
 800b0f4:	e008      	b.n	800b108 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f963 	bl	800b3c4 <USB_SetDevSpeed>
 800b0fe:	e003      	b.n	800b108 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b100:	2103      	movs	r1, #3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f95e 	bl	800b3c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b108:	2110      	movs	r1, #16
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f8fa 	bl	800b304 <USB_FlushTxFifo>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f924 	bl	800b368 <USB_FlushRxFifo>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b130:	461a      	mov	r2, r3
 800b132:	2300      	movs	r3, #0
 800b134:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b13c:	461a      	mov	r2, r3
 800b13e:	2300      	movs	r3, #0
 800b140:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b148:	461a      	mov	r2, r3
 800b14a:	2300      	movs	r3, #0
 800b14c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b14e:	2300      	movs	r3, #0
 800b150:	613b      	str	r3, [r7, #16]
 800b152:	e043      	b.n	800b1dc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	015a      	lsls	r2, r3, #5
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4413      	add	r3, r2
 800b15c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b166:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b16a:	d118      	bne.n	800b19e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10a      	bne.n	800b188 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b17e:	461a      	mov	r2, r3
 800b180:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	e013      	b.n	800b1b0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b194:	461a      	mov	r2, r3
 800b196:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	e008      	b.n	800b1b0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	015a      	lsls	r2, r3, #5
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1bc:	461a      	mov	r2, r3
 800b1be:	2300      	movs	r3, #0
 800b1c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b1d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	613b      	str	r3, [r7, #16]
 800b1dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d3b5      	bcc.n	800b154 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	613b      	str	r3, [r7, #16]
 800b1ec:	e043      	b.n	800b276 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b204:	d118      	bne.n	800b238 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10a      	bne.n	800b222 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b218:	461a      	mov	r2, r3
 800b21a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	e013      	b.n	800b24a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22e:	461a      	mov	r2, r3
 800b230:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	e008      	b.n	800b24a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b244:	461a      	mov	r2, r3
 800b246:	2300      	movs	r3, #0
 800b248:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b256:	461a      	mov	r2, r3
 800b258:	2300      	movs	r3, #0
 800b25a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	015a      	lsls	r2, r3, #5
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	4413      	add	r3, r2
 800b264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b268:	461a      	mov	r2, r3
 800b26a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b26e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	3301      	adds	r3, #1
 800b274:	613b      	str	r3, [r7, #16]
 800b276:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b27a:	461a      	mov	r2, r3
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	4293      	cmp	r3, r2
 800b280:	d3b5      	bcc.n	800b1ee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b294:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b2a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b2a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d105      	bne.n	800b2b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	f043 0210 	orr.w	r2, r3, #16
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	699a      	ldr	r2, [r3, #24]
 800b2bc:	4b0f      	ldr	r3, [pc, #60]	@ (800b2fc <USB_DevInit+0x2b4>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b2c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	f043 0208 	orr.w	r2, r3, #8
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b2d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d105      	bne.n	800b2ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	699a      	ldr	r2, [r3, #24]
 800b2e4:	4b06      	ldr	r3, [pc, #24]	@ (800b300 <USB_DevInit+0x2b8>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2f8:	b004      	add	sp, #16
 800b2fa:	4770      	bx	lr
 800b2fc:	803c3800 	.word	0x803c3800
 800b300:	40000004 	.word	0x40000004

0800b304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3301      	adds	r3, #1
 800b316:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b31e:	d901      	bls.n	800b324 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e01b      	b.n	800b35c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	daf2      	bge.n	800b312 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b32c:	2300      	movs	r3, #0
 800b32e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	019b      	lsls	r3, r3, #6
 800b334:	f043 0220 	orr.w	r2, r3, #32
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	3301      	adds	r3, #1
 800b340:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b348:	d901      	bls.n	800b34e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b34a:	2303      	movs	r3, #3
 800b34c:	e006      	b.n	800b35c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	f003 0320 	and.w	r3, r3, #32
 800b356:	2b20      	cmp	r3, #32
 800b358:	d0f0      	beq.n	800b33c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3301      	adds	r3, #1
 800b378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b380:	d901      	bls.n	800b386 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e018      	b.n	800b3b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	daf2      	bge.n	800b374 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2210      	movs	r2, #16
 800b396:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3301      	adds	r3, #1
 800b39c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3a4:	d901      	bls.n	800b3aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e006      	b.n	800b3b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	f003 0310 	and.w	r3, r3, #16
 800b3b2:	2b10      	cmp	r3, #16
 800b3b4:	d0f0      	beq.n	800b398 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	78fb      	ldrb	r3, [r7, #3]
 800b3de:	68f9      	ldr	r1, [r7, #12]
 800b3e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b085      	sub	sp, #20
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b410:	f023 0303 	bic.w	r3, r3, #3
 800b414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b424:	f043 0302 	orr.w	r3, r3, #2
 800b428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	f003 0301 	and.w	r3, r3, #1
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b45c:	2300      	movs	r3, #0
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3301      	adds	r3, #1
 800b464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b46c:	d901      	bls.n	800b472 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b46e:	2303      	movs	r3, #3
 800b470:	e022      	b.n	800b4b8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	daf2      	bge.n	800b460 <USB_CoreReset+0xc>

  count = 10U;
 800b47a:	230a      	movs	r3, #10
 800b47c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b47e:	e002      	b.n	800b486 <USB_CoreReset+0x32>
  {
    count--;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3b01      	subs	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1f9      	bne.n	800b480 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	f043 0201 	orr.w	r2, r3, #1
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3301      	adds	r3, #1
 800b49c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4a4:	d901      	bls.n	800b4aa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e006      	b.n	800b4b8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d0f0      	beq.n	800b498 <USB_CoreReset+0x44>

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800b4ca:	4b87      	ldr	r3, [pc, #540]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b4cc:	220a      	movs	r2, #10
 800b4ce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 100;
 800b4d0:	4b85      	ldr	r3, [pc, #532]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b4d2:	2264      	movs	r2, #100	@ 0x64
 800b4d4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 102;
 800b4d6:	4b84      	ldr	r3, [pc, #528]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b4d8:	2266      	movs	r2, #102	@ 0x66
 800b4da:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800b4dc:	4b82      	ldr	r3, [pc, #520]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b4de:	2264      	movs	r2, #100	@ 0x64
 800b4e0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b4e2:	4b82      	ldr	r3, [pc, #520]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b4e4:	22ff      	movs	r2, #255	@ 0xff
 800b4e6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b4e8:	4b80      	ldr	r3, [pc, #512]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b4ea:	22ff      	movs	r2, #255	@ 0xff
 800b4ec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b4ee:	4b7f      	ldr	r3, [pc, #508]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b4f0:	22ff      	movs	r2, #255	@ 0xff
 800b4f2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b4f4:	4b7d      	ldr	r3, [pc, #500]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800b4fa:	4b7d      	ldr	r3, [pc, #500]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b4fc:	220a      	movs	r2, #10
 800b4fe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 100;
 800b500:	4b7b      	ldr	r3, [pc, #492]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b502:	2264      	movs	r2, #100	@ 0x64
 800b504:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 102;
 800b506:	4b7a      	ldr	r3, [pc, #488]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b508:	2266      	movs	r2, #102	@ 0x66
 800b50a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b50c:	4b78      	ldr	r3, [pc, #480]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b50e:	2201      	movs	r2, #1
 800b510:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800b512:	f000 fd42 	bl	800bf9a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b516:	4b74      	ldr	r3, [pc, #464]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	061a      	lsls	r2, r3, #24
 800b51c:	4b72      	ldr	r3, [pc, #456]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b51e:	785b      	ldrb	r3, [r3, #1]
 800b520:	041b      	lsls	r3, r3, #16
 800b522:	431a      	orrs	r2, r3
 800b524:	4b70      	ldr	r3, [pc, #448]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b526:	789b      	ldrb	r3, [r3, #2]
 800b528:	021b      	lsls	r3, r3, #8
 800b52a:	4313      	orrs	r3, r2
 800b52c:	4a6e      	ldr	r2, [pc, #440]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b52e:	78d2      	ldrb	r2, [r2, #3]
 800b530:	4313      	orrs	r3, r2
 800b532:	061a      	lsls	r2, r3, #24
 800b534:	4b6c      	ldr	r3, [pc, #432]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	0619      	lsls	r1, r3, #24
 800b53a:	4b6b      	ldr	r3, [pc, #428]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b53c:	785b      	ldrb	r3, [r3, #1]
 800b53e:	041b      	lsls	r3, r3, #16
 800b540:	4319      	orrs	r1, r3
 800b542:	4b69      	ldr	r3, [pc, #420]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b544:	789b      	ldrb	r3, [r3, #2]
 800b546:	021b      	lsls	r3, r3, #8
 800b548:	430b      	orrs	r3, r1
 800b54a:	4967      	ldr	r1, [pc, #412]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b54c:	78c9      	ldrb	r1, [r1, #3]
 800b54e:	430b      	orrs	r3, r1
 800b550:	021b      	lsls	r3, r3, #8
 800b552:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b556:	431a      	orrs	r2, r3
 800b558:	4b63      	ldr	r3, [pc, #396]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	0619      	lsls	r1, r3, #24
 800b55e:	4b62      	ldr	r3, [pc, #392]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b560:	785b      	ldrb	r3, [r3, #1]
 800b562:	041b      	lsls	r3, r3, #16
 800b564:	4319      	orrs	r1, r3
 800b566:	4b60      	ldr	r3, [pc, #384]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b568:	789b      	ldrb	r3, [r3, #2]
 800b56a:	021b      	lsls	r3, r3, #8
 800b56c:	430b      	orrs	r3, r1
 800b56e:	495e      	ldr	r1, [pc, #376]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b570:	78c9      	ldrb	r1, [r1, #3]
 800b572:	430b      	orrs	r3, r1
 800b574:	0a1b      	lsrs	r3, r3, #8
 800b576:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b57a:	431a      	orrs	r2, r3
 800b57c:	4b5a      	ldr	r3, [pc, #360]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	0619      	lsls	r1, r3, #24
 800b582:	4b59      	ldr	r3, [pc, #356]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	041b      	lsls	r3, r3, #16
 800b588:	4319      	orrs	r1, r3
 800b58a:	4b57      	ldr	r3, [pc, #348]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b58c:	789b      	ldrb	r3, [r3, #2]
 800b58e:	021b      	lsls	r3, r3, #8
 800b590:	430b      	orrs	r3, r1
 800b592:	4955      	ldr	r1, [pc, #340]	@ (800b6e8 <MX_LWIP_Init+0x224>)
 800b594:	78c9      	ldrb	r1, [r1, #3]
 800b596:	430b      	orrs	r3, r1
 800b598:	0e1b      	lsrs	r3, r3, #24
 800b59a:	4313      	orrs	r3, r2
 800b59c:	4a55      	ldr	r2, [pc, #340]	@ (800b6f4 <MX_LWIP_Init+0x230>)
 800b59e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b5a0:	4b52      	ldr	r3, [pc, #328]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	061a      	lsls	r2, r3, #24
 800b5a6:	4b51      	ldr	r3, [pc, #324]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5a8:	785b      	ldrb	r3, [r3, #1]
 800b5aa:	041b      	lsls	r3, r3, #16
 800b5ac:	431a      	orrs	r2, r3
 800b5ae:	4b4f      	ldr	r3, [pc, #316]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5b0:	789b      	ldrb	r3, [r3, #2]
 800b5b2:	021b      	lsls	r3, r3, #8
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	4a4d      	ldr	r2, [pc, #308]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5b8:	78d2      	ldrb	r2, [r2, #3]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	061a      	lsls	r2, r3, #24
 800b5be:	4b4b      	ldr	r3, [pc, #300]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	0619      	lsls	r1, r3, #24
 800b5c4:	4b49      	ldr	r3, [pc, #292]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5c6:	785b      	ldrb	r3, [r3, #1]
 800b5c8:	041b      	lsls	r3, r3, #16
 800b5ca:	4319      	orrs	r1, r3
 800b5cc:	4b47      	ldr	r3, [pc, #284]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5ce:	789b      	ldrb	r3, [r3, #2]
 800b5d0:	021b      	lsls	r3, r3, #8
 800b5d2:	430b      	orrs	r3, r1
 800b5d4:	4945      	ldr	r1, [pc, #276]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5d6:	78c9      	ldrb	r1, [r1, #3]
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	021b      	lsls	r3, r3, #8
 800b5dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b5e0:	431a      	orrs	r2, r3
 800b5e2:	4b42      	ldr	r3, [pc, #264]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	0619      	lsls	r1, r3, #24
 800b5e8:	4b40      	ldr	r3, [pc, #256]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5ea:	785b      	ldrb	r3, [r3, #1]
 800b5ec:	041b      	lsls	r3, r3, #16
 800b5ee:	4319      	orrs	r1, r3
 800b5f0:	4b3e      	ldr	r3, [pc, #248]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5f2:	789b      	ldrb	r3, [r3, #2]
 800b5f4:	021b      	lsls	r3, r3, #8
 800b5f6:	430b      	orrs	r3, r1
 800b5f8:	493c      	ldr	r1, [pc, #240]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b5fa:	78c9      	ldrb	r1, [r1, #3]
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	0a1b      	lsrs	r3, r3, #8
 800b600:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b604:	431a      	orrs	r2, r3
 800b606:	4b39      	ldr	r3, [pc, #228]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	0619      	lsls	r1, r3, #24
 800b60c:	4b37      	ldr	r3, [pc, #220]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b60e:	785b      	ldrb	r3, [r3, #1]
 800b610:	041b      	lsls	r3, r3, #16
 800b612:	4319      	orrs	r1, r3
 800b614:	4b35      	ldr	r3, [pc, #212]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b616:	789b      	ldrb	r3, [r3, #2]
 800b618:	021b      	lsls	r3, r3, #8
 800b61a:	430b      	orrs	r3, r1
 800b61c:	4933      	ldr	r1, [pc, #204]	@ (800b6ec <MX_LWIP_Init+0x228>)
 800b61e:	78c9      	ldrb	r1, [r1, #3]
 800b620:	430b      	orrs	r3, r1
 800b622:	0e1b      	lsrs	r3, r3, #24
 800b624:	4313      	orrs	r3, r2
 800b626:	4a34      	ldr	r2, [pc, #208]	@ (800b6f8 <MX_LWIP_Init+0x234>)
 800b628:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b62a:	4b31      	ldr	r3, [pc, #196]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	061a      	lsls	r2, r3, #24
 800b630:	4b2f      	ldr	r3, [pc, #188]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b632:	785b      	ldrb	r3, [r3, #1]
 800b634:	041b      	lsls	r3, r3, #16
 800b636:	431a      	orrs	r2, r3
 800b638:	4b2d      	ldr	r3, [pc, #180]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b63a:	789b      	ldrb	r3, [r3, #2]
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	4313      	orrs	r3, r2
 800b640:	4a2b      	ldr	r2, [pc, #172]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b642:	78d2      	ldrb	r2, [r2, #3]
 800b644:	4313      	orrs	r3, r2
 800b646:	061a      	lsls	r2, r3, #24
 800b648:	4b29      	ldr	r3, [pc, #164]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	0619      	lsls	r1, r3, #24
 800b64e:	4b28      	ldr	r3, [pc, #160]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b650:	785b      	ldrb	r3, [r3, #1]
 800b652:	041b      	lsls	r3, r3, #16
 800b654:	4319      	orrs	r1, r3
 800b656:	4b26      	ldr	r3, [pc, #152]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b658:	789b      	ldrb	r3, [r3, #2]
 800b65a:	021b      	lsls	r3, r3, #8
 800b65c:	430b      	orrs	r3, r1
 800b65e:	4924      	ldr	r1, [pc, #144]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b660:	78c9      	ldrb	r1, [r1, #3]
 800b662:	430b      	orrs	r3, r1
 800b664:	021b      	lsls	r3, r3, #8
 800b666:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b66a:	431a      	orrs	r2, r3
 800b66c:	4b20      	ldr	r3, [pc, #128]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	0619      	lsls	r1, r3, #24
 800b672:	4b1f      	ldr	r3, [pc, #124]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b674:	785b      	ldrb	r3, [r3, #1]
 800b676:	041b      	lsls	r3, r3, #16
 800b678:	4319      	orrs	r1, r3
 800b67a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b67c:	789b      	ldrb	r3, [r3, #2]
 800b67e:	021b      	lsls	r3, r3, #8
 800b680:	430b      	orrs	r3, r1
 800b682:	491b      	ldr	r1, [pc, #108]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b684:	78c9      	ldrb	r1, [r1, #3]
 800b686:	430b      	orrs	r3, r1
 800b688:	0a1b      	lsrs	r3, r3, #8
 800b68a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b68e:	431a      	orrs	r2, r3
 800b690:	4b17      	ldr	r3, [pc, #92]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	0619      	lsls	r1, r3, #24
 800b696:	4b16      	ldr	r3, [pc, #88]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b698:	785b      	ldrb	r3, [r3, #1]
 800b69a:	041b      	lsls	r3, r3, #16
 800b69c:	4319      	orrs	r1, r3
 800b69e:	4b14      	ldr	r3, [pc, #80]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b6a0:	789b      	ldrb	r3, [r3, #2]
 800b6a2:	021b      	lsls	r3, r3, #8
 800b6a4:	430b      	orrs	r3, r1
 800b6a6:	4912      	ldr	r1, [pc, #72]	@ (800b6f0 <MX_LWIP_Init+0x22c>)
 800b6a8:	78c9      	ldrb	r1, [r1, #3]
 800b6aa:	430b      	orrs	r3, r1
 800b6ac:	0e1b      	lsrs	r3, r3, #24
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	4a12      	ldr	r2, [pc, #72]	@ (800b6fc <MX_LWIP_Init+0x238>)
 800b6b2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b6b4:	4b12      	ldr	r3, [pc, #72]	@ (800b700 <MX_LWIP_Init+0x23c>)
 800b6b6:	9302      	str	r3, [sp, #8]
 800b6b8:	4b12      	ldr	r3, [pc, #72]	@ (800b704 <MX_LWIP_Init+0x240>)
 800b6ba:	9301      	str	r3, [sp, #4]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9300      	str	r3, [sp, #0]
 800b6c0:	4b0e      	ldr	r3, [pc, #56]	@ (800b6fc <MX_LWIP_Init+0x238>)
 800b6c2:	4a0d      	ldr	r2, [pc, #52]	@ (800b6f8 <MX_LWIP_Init+0x234>)
 800b6c4:	490b      	ldr	r1, [pc, #44]	@ (800b6f4 <MX_LWIP_Init+0x230>)
 800b6c6:	4810      	ldr	r0, [pc, #64]	@ (800b708 <MX_LWIP_Init+0x244>)
 800b6c8:	f001 f94e 	bl	800c968 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b6cc:	480e      	ldr	r0, [pc, #56]	@ (800b708 <MX_LWIP_Init+0x244>)
 800b6ce:	f001 fafd 	bl	800cccc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b6d2:	480d      	ldr	r0, [pc, #52]	@ (800b708 <MX_LWIP_Init+0x244>)
 800b6d4:	f001 fb0a 	bl	800ccec <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b6d8:	490c      	ldr	r1, [pc, #48]	@ (800b70c <MX_LWIP_Init+0x248>)
 800b6da:	480b      	ldr	r0, [pc, #44]	@ (800b708 <MX_LWIP_Init+0x244>)
 800b6dc:	f001 fc08 	bl	800cef0 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b6e0:	bf00      	nop
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20000e60 	.word	0x20000e60
 800b6ec:	20000e64 	.word	0x20000e64
 800b6f0:	20000e68 	.word	0x20000e68
 800b6f4:	20000e54 	.word	0x20000e54
 800b6f8:	20000e58 	.word	0x20000e58
 800b6fc:	20000e5c 	.word	0x20000e5c
 800b700:	08015da5 	.word	0x08015da5
 800b704:	0800ba85 	.word	0x0800ba85
 800b708:	20000e20 	.word	0x20000e20
 800b70c:	0800b761 	.word	0x0800b761

0800b710 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800b718:	f7f6 fccc 	bl	80020b4 <HAL_GetTick>
 800b71c:	4602      	mov	r2, r0
 800b71e:	4b08      	ldr	r3, [pc, #32]	@ (800b740 <Ethernet_Link_Periodic_Handle+0x30>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	2b63      	cmp	r3, #99	@ 0x63
 800b726:	d907      	bls.n	800b738 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800b728:	f7f6 fcc4 	bl	80020b4 <HAL_GetTick>
 800b72c:	4603      	mov	r3, r0
 800b72e:	4a04      	ldr	r2, [pc, #16]	@ (800b740 <Ethernet_Link_Periodic_Handle+0x30>)
 800b730:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fb04 	bl	800bd40 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	20000e1c 	.word	0x20000e1c

0800b744 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800b748:	4804      	ldr	r0, [pc, #16]	@ (800b75c <MX_LWIP_Process+0x18>)
 800b74a:	f000 f97b 	bl	800ba44 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800b74e:	f007 fc4d 	bl	8012fec <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800b752:	4802      	ldr	r0, [pc, #8]	@ (800b75c <MX_LWIP_Process+0x18>)
 800b754:	f7ff ffdc 	bl	800b710 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800b758:	bf00      	nop
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000e20 	.word	0x20000e20

0800b760 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <SCB_InvalidateDCache_by_Addr>:
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800b786:	2320      	movs	r3, #32
 800b788:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b78a:	f3bf 8f4f 	dsb	sy
}
 800b78e:	bf00      	nop
    while (op_size > 0) {
 800b790:	e00b      	b.n	800b7aa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800b792:	4a0d      	ldr	r2, [pc, #52]	@ (800b7c8 <SCB_InvalidateDCache_by_Addr+0x54>)
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	4413      	add	r3, r2
 800b7a0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dcf0      	bgt.n	800b792 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b7b0:	f3bf 8f4f 	dsb	sy
}
 800b7b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b7b6:	f3bf 8f6f 	isb	sy
}
 800b7ba:	bf00      	nop
}
 800b7bc:	bf00      	nop
 800b7be:	371c      	adds	r7, #28
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	e000ed00 	.word	0xe000ed00

0800b7cc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b7d8:	4b44      	ldr	r3, [pc, #272]	@ (800b8ec <low_level_init+0x120>)
 800b7da:	4a45      	ldr	r2, [pc, #276]	@ (800b8f0 <low_level_init+0x124>)
 800b7dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b7e2:	2380      	movs	r3, #128	@ 0x80
 800b7e4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b7e6:	23e1      	movs	r3, #225	@ 0xe1
 800b7e8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b7f6:	4a3d      	ldr	r2, [pc, #244]	@ (800b8ec <low_level_init+0x120>)
 800b7f8:	f107 0308 	add.w	r3, r7, #8
 800b7fc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b7fe:	4b3b      	ldr	r3, [pc, #236]	@ (800b8ec <low_level_init+0x120>)
 800b800:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b804:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b806:	4b39      	ldr	r3, [pc, #228]	@ (800b8ec <low_level_init+0x120>)
 800b808:	4a3a      	ldr	r2, [pc, #232]	@ (800b8f4 <low_level_init+0x128>)
 800b80a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b80c:	4b37      	ldr	r3, [pc, #220]	@ (800b8ec <low_level_init+0x120>)
 800b80e:	4a3a      	ldr	r2, [pc, #232]	@ (800b8f8 <low_level_init+0x12c>)
 800b810:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b812:	4b36      	ldr	r3, [pc, #216]	@ (800b8ec <low_level_init+0x120>)
 800b814:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b818:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b81a:	4834      	ldr	r0, [pc, #208]	@ (800b8ec <low_level_init+0x120>)
 800b81c:	f7f7 ff4e 	bl	80036bc <HAL_ETH_Init>
 800b820:	4603      	mov	r3, r0
 800b822:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b824:	2238      	movs	r2, #56	@ 0x38
 800b826:	2100      	movs	r1, #0
 800b828:	4834      	ldr	r0, [pc, #208]	@ (800b8fc <low_level_init+0x130>)
 800b82a:	f00b fb56 	bl	8016eda <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b82e:	4b33      	ldr	r3, [pc, #204]	@ (800b8fc <low_level_init+0x130>)
 800b830:	2221      	movs	r2, #33	@ 0x21
 800b832:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b834:	4b31      	ldr	r3, [pc, #196]	@ (800b8fc <low_level_init+0x130>)
 800b836:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800b83a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b83c:	4b2f      	ldr	r3, [pc, #188]	@ (800b8fc <low_level_init+0x130>)
 800b83e:	2200      	movs	r2, #0
 800b840:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b842:	482f      	ldr	r0, [pc, #188]	@ (800b900 <low_level_init+0x134>)
 800b844:	f000 ff58 	bl	800c6f8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2206      	movs	r2, #6
 800b84c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b850:	4b26      	ldr	r3, [pc, #152]	@ (800b8ec <low_level_init+0x120>)
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	781a      	ldrb	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b85c:	4b23      	ldr	r3, [pc, #140]	@ (800b8ec <low_level_init+0x120>)
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	785a      	ldrb	r2, [r3, #1]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b868:	4b20      	ldr	r3, [pc, #128]	@ (800b8ec <low_level_init+0x120>)
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	789a      	ldrb	r2, [r3, #2]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b874:	4b1d      	ldr	r3, [pc, #116]	@ (800b8ec <low_level_init+0x120>)
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	78da      	ldrb	r2, [r3, #3]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b880:	4b1a      	ldr	r3, [pc, #104]	@ (800b8ec <low_level_init+0x120>)
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	791a      	ldrb	r2, [r3, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b88c:	4b17      	ldr	r3, [pc, #92]	@ (800b8ec <low_level_init+0x120>)
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	795a      	ldrb	r2, [r3, #5]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b89e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b8a6:	f043 030a 	orr.w	r3, r3, #10
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b8b2:	4914      	ldr	r1, [pc, #80]	@ (800b904 <low_level_init+0x138>)
 800b8b4:	4814      	ldr	r0, [pc, #80]	@ (800b908 <low_level_init+0x13c>)
 800b8b6:	f7f6 faa6 	bl	8001e06 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800b8ba:	4813      	ldr	r0, [pc, #76]	@ (800b908 <low_level_init+0x13c>)
 800b8bc:	f7f6 fad5 	bl	8001e6a <LAN8742_Init>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d006      	beq.n	800b8d4 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fae2 	bl	800ce90 <netif_set_link_down>
    netif_set_down(netif);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f001 fa79 	bl	800cdc4 <netif_set_down>
 800b8d2:	e008      	b.n	800b8e6 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d103      	bne.n	800b8e2 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fa30 	bl	800bd40 <ethernet_link_check_state>
 800b8e0:	e001      	b.n	800b8e6 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800b8e2:	f7f5 faaf 	bl	8000e44 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	200057f8 	.word	0x200057f8
 800b8f0:	40028000 	.word	0x40028000
 800b8f4:	20000128 	.word	0x20000128
 800b8f8:	20000088 	.word	0x20000088
 800b8fc:	200058a8 	.word	0x200058a8
 800b900:	0801a638 	.word	0x0801a638
 800b904:	2000000c 	.word	0x2000000c
 800b908:	200058e0 	.word	0x200058e0

0800b90c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b092      	sub	sp, #72	@ 0x48
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b916:	2300      	movs	r3, #0
 800b918:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b924:	f107 030c 	add.w	r3, r7, #12
 800b928:	2230      	movs	r2, #48	@ 0x30
 800b92a:	2100      	movs	r1, #0
 800b92c:	4618      	mov	r0, r3
 800b92e:	f00b fad4 	bl	8016eda <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b932:	f107 030c 	add.w	r3, r7, #12
 800b936:	2230      	movs	r2, #48	@ 0x30
 800b938:	2100      	movs	r1, #0
 800b93a:	4618      	mov	r0, r3
 800b93c:	f00b facd 	bl	8016eda <memset>

  for(q = p; q != NULL; q = q->next)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	643b      	str	r3, [r7, #64]	@ 0x40
 800b944:	e045      	b.n	800b9d2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b948:	2b03      	cmp	r3, #3
 800b94a:	d902      	bls.n	800b952 <low_level_output+0x46>
      return ERR_IF;
 800b94c:	f06f 030b 	mvn.w	r3, #11
 800b950:	e055      	b.n	800b9fe <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800b952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b954:	6859      	ldr	r1, [r3, #4]
 800b956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b958:	4613      	mov	r3, r2
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	4413      	add	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	3348      	adds	r3, #72	@ 0x48
 800b962:	443b      	add	r3, r7
 800b964:	3b3c      	subs	r3, #60	@ 0x3c
 800b966:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b96a:	895b      	ldrh	r3, [r3, #10]
 800b96c:	4619      	mov	r1, r3
 800b96e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b970:	4613      	mov	r3, r2
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	4413      	add	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	3348      	adds	r3, #72	@ 0x48
 800b97a:	443b      	add	r3, r7
 800b97c:	3b38      	subs	r3, #56	@ 0x38
 800b97e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b982:	2b00      	cmp	r3, #0
 800b984:	d011      	beq.n	800b9aa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b988:	1e5a      	subs	r2, r3, #1
 800b98a:	f107 000c 	add.w	r0, r7, #12
 800b98e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b990:	460b      	mov	r3, r1
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	440b      	add	r3, r1
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	18c1      	adds	r1, r0, r3
 800b99a:	4613      	mov	r3, r2
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	3348      	adds	r3, #72	@ 0x48
 800b9a4:	443b      	add	r3, r7
 800b9a6:	3b34      	subs	r3, #52	@ 0x34
 800b9a8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b9aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d109      	bne.n	800b9c6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b9b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	005b      	lsls	r3, r3, #1
 800b9b8:	4413      	add	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	3348      	adds	r3, #72	@ 0x48
 800b9be:	443b      	add	r3, r7
 800b9c0:	3b34      	subs	r3, #52	@ 0x34
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b9c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1b6      	bne.n	800b946 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	891b      	ldrh	r3, [r3, #8]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b0a      	ldr	r3, [pc, #40]	@ (800ba08 <low_level_output+0xfc>)
 800b9e0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b9e2:	4a09      	ldr	r2, [pc, #36]	@ (800ba08 <low_level_output+0xfc>)
 800b9e4:	f107 030c 	add.w	r3, r7, #12
 800b9e8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b9ea:	4a07      	ldr	r2, [pc, #28]	@ (800ba08 <low_level_output+0xfc>)
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b9f0:	2214      	movs	r2, #20
 800b9f2:	4905      	ldr	r1, [pc, #20]	@ (800ba08 <low_level_output+0xfc>)
 800b9f4:	4805      	ldr	r0, [pc, #20]	@ (800ba0c <low_level_output+0x100>)
 800b9f6:	f7f7 ffeb 	bl	80039d0 <HAL_ETH_Transmit>

  return errval;
 800b9fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3748      	adds	r7, #72	@ 0x48
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	200058a8 	.word	0x200058a8
 800ba0c:	200057f8 	.word	0x200057f8

0800ba10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800ba1c:	4b07      	ldr	r3, [pc, #28]	@ (800ba3c <low_level_input+0x2c>)
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d105      	bne.n	800ba30 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800ba24:	f107 030c 	add.w	r3, r7, #12
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4805      	ldr	r0, [pc, #20]	@ (800ba40 <low_level_input+0x30>)
 800ba2c:	f7f8 f864 	bl	8003af8 <HAL_ETH_ReadData>
  }

  return p;
 800ba30:	68fb      	ldr	r3, [r7, #12]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	200057f4 	.word	0x200057f4
 800ba40:	200057f8 	.word	0x200057f8

0800ba44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7ff ffdd 	bl	800ba10 <low_level_input>
 800ba56:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	4798      	blx	r3
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f001 fdbe 	bl	800d5f0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1ea      	bne.n	800ba50 <ethernetif_input+0xc>
}
 800ba7a:	bf00      	nop
 800ba7c:	bf00      	nop
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d106      	bne.n	800baa0 <ethernetif_init+0x1c>
 800ba92:	4b0e      	ldr	r3, [pc, #56]	@ (800bacc <ethernetif_init+0x48>)
 800ba94:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800ba98:	490d      	ldr	r1, [pc, #52]	@ (800bad0 <ethernetif_init+0x4c>)
 800ba9a:	480e      	ldr	r0, [pc, #56]	@ (800bad4 <ethernetif_init+0x50>)
 800ba9c:	f00b f9b8 	bl	8016e10 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2273      	movs	r2, #115	@ 0x73
 800baa4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2274      	movs	r2, #116	@ 0x74
 800baac:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a09      	ldr	r2, [pc, #36]	@ (800bad8 <ethernetif_init+0x54>)
 800bab4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a08      	ldr	r2, [pc, #32]	@ (800badc <ethernetif_init+0x58>)
 800baba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7ff fe85 	bl	800b7cc <low_level_init>

  return ERR_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	08017c38 	.word	0x08017c38
 800bad0:	08017c54 	.word	0x08017c54
 800bad4:	08017c64 	.word	0x08017c64
 800bad8:	0801425d 	.word	0x0801425d
 800badc:	0800b90d 	.word	0x0800b90d

0800bae0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800baec:	68f9      	ldr	r1, [r7, #12]
 800baee:	4807      	ldr	r0, [pc, #28]	@ (800bb0c <pbuf_free_custom+0x2c>)
 800baf0:	f000 fee4 	bl	800c8bc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800baf4:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <pbuf_free_custom+0x30>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d102      	bne.n	800bb02 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bafc:	4b04      	ldr	r3, [pc, #16]	@ (800bb10 <pbuf_free_custom+0x30>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	701a      	strb	r2, [r3, #0]
  }
}
 800bb02:	bf00      	nop
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	0801a638 	.word	0x0801a638
 800bb10:	200057f4 	.word	0x200057f4

0800bb14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bb18:	f7f6 facc 	bl	80020b4 <HAL_GetTick>
 800bb1c:	4603      	mov	r3, r0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b08e      	sub	sp, #56	@ 0x38
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	605a      	str	r2, [r3, #4]
 800bb36:	609a      	str	r2, [r3, #8]
 800bb38:	60da      	str	r2, [r3, #12]
 800bb3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a52      	ldr	r2, [pc, #328]	@ (800bc8c <HAL_ETH_MspInit+0x168>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	f040 809e 	bne.w	800bc84 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800bb48:	4b51      	ldr	r3, [pc, #324]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb4c:	4a50      	ldr	r2, [pc, #320]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bb52:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb54:	4b4e      	ldr	r3, [pc, #312]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb5c:	623b      	str	r3, [r7, #32]
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	4b4b      	ldr	r3, [pc, #300]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb64:	4a4a      	ldr	r2, [pc, #296]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb6a:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb6c:	4b48      	ldr	r3, [pc, #288]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb74:	61fb      	str	r3, [r7, #28]
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	4b45      	ldr	r3, [pc, #276]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb7c:	4a44      	ldr	r2, [pc, #272]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb82:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb84:	4b42      	ldr	r3, [pc, #264]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb8c:	61bb      	str	r3, [r7, #24]
 800bb8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bb90:	4b3f      	ldr	r3, [pc, #252]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb94:	4a3e      	ldr	r2, [pc, #248]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb96:	f043 0304 	orr.w	r3, r3, #4
 800bb9a:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb9c:	4b3c      	ldr	r3, [pc, #240]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bb9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bba0:	f003 0304 	and.w	r3, r3, #4
 800bba4:	617b      	str	r3, [r7, #20]
 800bba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bba8:	4b39      	ldr	r3, [pc, #228]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbac:	4a38      	ldr	r2, [pc, #224]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbae:	f043 0301 	orr.w	r3, r3, #1
 800bbb2:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbb4:	4b36      	ldr	r3, [pc, #216]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	613b      	str	r3, [r7, #16]
 800bbbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bbc0:	4b33      	ldr	r3, [pc, #204]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc4:	4a32      	ldr	r2, [pc, #200]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbc6:	f043 0302 	orr.w	r3, r3, #2
 800bbca:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbcc:	4b30      	ldr	r3, [pc, #192]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd0:	f003 0302 	and.w	r3, r3, #2
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bbd8:	4b2d      	ldr	r3, [pc, #180]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbdc:	4a2c      	ldr	r2, [pc, #176]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbe2:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbe4:	4b2a      	ldr	r3, [pc, #168]	@ (800bc90 <HAL_ETH_MspInit+0x16c>)
 800bbe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbec:	60bb      	str	r3, [r7, #8]
 800bbee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bbf0:	2332      	movs	r3, #50	@ 0x32
 800bbf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bc00:	230b      	movs	r3, #11
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4822      	ldr	r0, [pc, #136]	@ (800bc94 <HAL_ETH_MspInit+0x170>)
 800bc0c:	f7f8 ffa4 	bl	8004b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bc10:	2386      	movs	r3, #134	@ 0x86
 800bc12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc14:	2302      	movs	r3, #2
 800bc16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bc20:	230b      	movs	r3, #11
 800bc22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc28:	4619      	mov	r1, r3
 800bc2a:	481b      	ldr	r0, [pc, #108]	@ (800bc98 <HAL_ETH_MspInit+0x174>)
 800bc2c:	f7f8 ff94 	bl	8004b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800bc30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bc34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc36:	2302      	movs	r3, #2
 800bc38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bc42:	230b      	movs	r3, #11
 800bc44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800bc46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4813      	ldr	r0, [pc, #76]	@ (800bc9c <HAL_ETH_MspInit+0x178>)
 800bc4e:	f7f8 ff83 	bl	8004b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800bc52:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800bc56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc60:	2303      	movs	r3, #3
 800bc62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bc64:	230b      	movs	r3, #11
 800bc66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bc68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	480c      	ldr	r0, [pc, #48]	@ (800bca0 <HAL_ETH_MspInit+0x17c>)
 800bc70:	f7f8 ff72 	bl	8004b58 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800bc74:	2200      	movs	r2, #0
 800bc76:	2100      	movs	r1, #0
 800bc78:	203d      	movs	r0, #61	@ 0x3d
 800bc7a:	f7f7 f8d0 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bc7e:	203d      	movs	r0, #61	@ 0x3d
 800bc80:	f7f7 f8e9 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bc84:	bf00      	nop
 800bc86:	3738      	adds	r7, #56	@ 0x38
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	40028000 	.word	0x40028000
 800bc90:	40023800 	.word	0x40023800
 800bc94:	40020800 	.word	0x40020800
 800bc98:	40020000 	.word	0x40020000
 800bc9c:	40020400 	.word	0x40020400
 800bca0:	40021800 	.word	0x40021800

0800bca4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800bca8:	4802      	ldr	r0, [pc, #8]	@ (800bcb4 <ETH_PHY_IO_Init+0x10>)
 800bcaa:	f7f8 faf3 	bl	8004294 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	200057f8 	.word	0x200057f8

0800bcb8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  return 0;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	68f9      	ldr	r1, [r7, #12]
 800bcda:	4807      	ldr	r0, [pc, #28]	@ (800bcf8 <ETH_PHY_IO_ReadReg+0x30>)
 800bcdc:	f7f8 f934 	bl	8003f48 <HAL_ETH_ReadPHYRegister>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800bce6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcea:	e000      	b.n	800bcee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	200057f8 	.word	0x200057f8

0800bcfc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	68f9      	ldr	r1, [r7, #12]
 800bd0e:	4807      	ldr	r0, [pc, #28]	@ (800bd2c <ETH_PHY_IO_WriteReg+0x30>)
 800bd10:	f7f8 f965 	bl	8003fde <HAL_ETH_WritePHYRegister>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800bd1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1e:	e000      	b.n	800bd22 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	200057f8 	.word	0x200057f8

0800bd30 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bd34:	f7f6 f9be 	bl	80020b4 <HAL_GetTick>
 800bd38:	4603      	mov	r3, r0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b0a0      	sub	sp, #128	@ 0x80
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800bd48:	f107 030c 	add.w	r3, r7, #12
 800bd4c:	2264      	movs	r2, #100	@ 0x64
 800bd4e:	2100      	movs	r1, #0
 800bd50:	4618      	mov	r0, r3
 800bd52:	f00b f8c2 	bl	8016eda <memset>
  int32_t PHYLinkState = 0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bd5e:	2300      	movs	r3, #0
 800bd60:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bd62:	2300      	movs	r3, #0
 800bd64:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bd66:	483a      	ldr	r0, [pc, #232]	@ (800be50 <ethernet_link_check_state+0x110>)
 800bd68:	f7f6 f8cc 	bl	8001f04 <LAN8742_GetLinkState>
 800bd6c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd74:	089b      	lsrs	r3, r3, #2
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00c      	beq.n	800bd9a <ethernet_link_check_state+0x5a>
 800bd80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	dc09      	bgt.n	800bd9a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 800bd86:	4833      	ldr	r0, [pc, #204]	@ (800be54 <ethernet_link_check_state+0x114>)
 800bd88:	f7f7 fda2 	bl	80038d0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f001 f819 	bl	800cdc4 <netif_set_down>
    netif_set_link_down(netif);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f001 f87c 	bl	800ce90 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800bd98:	e055      	b.n	800be46 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bda0:	f003 0304 	and.w	r3, r3, #4
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d14e      	bne.n	800be46 <ethernet_link_check_state+0x106>
 800bda8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	dd4b      	ble.n	800be46 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800bdae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bdb0:	3b02      	subs	r3, #2
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d82a      	bhi.n	800be0c <ethernet_link_check_state+0xcc>
 800bdb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdbc <ethernet_link_check_state+0x7c>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800bdcd 	.word	0x0800bdcd
 800bdc0:	0800bddf 	.word	0x0800bddf
 800bdc4:	0800bdef 	.word	0x0800bdef
 800bdc8:	0800bdff 	.word	0x0800bdff
      duplex = ETH_FULLDUPLEX_MODE;
 800bdcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bdd0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bdd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bdd6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bddc:	e017      	b.n	800be0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bdde:	2300      	movs	r3, #0
 800bde0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bde2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bde6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bde8:	2301      	movs	r3, #1
 800bdea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bdec:	e00f      	b.n	800be0e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800bdee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bdf2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bdfc:	e007      	b.n	800be0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800be02:	2300      	movs	r3, #0
 800be04:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800be06:	2301      	movs	r3, #1
 800be08:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800be0a:	e000      	b.n	800be0e <ethernet_link_check_state+0xce>
      break;
 800be0c:	bf00      	nop
    if(linkchanged)
 800be0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800be10:	2b00      	cmp	r3, #0
 800be12:	d018      	beq.n	800be46 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	4619      	mov	r1, r3
 800be1a:	480e      	ldr	r0, [pc, #56]	@ (800be54 <ethernet_link_check_state+0x114>)
 800be1c:	f7f8 f928 	bl	8004070 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800be20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be22:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800be24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be26:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800be28:	f107 030c 	add.w	r3, r7, #12
 800be2c:	4619      	mov	r1, r3
 800be2e:	4809      	ldr	r0, [pc, #36]	@ (800be54 <ethernet_link_check_state+0x114>)
 800be30:	f7f8 fa15 	bl	800425e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800be34:	4807      	ldr	r0, [pc, #28]	@ (800be54 <ethernet_link_check_state+0x114>)
 800be36:	f7f7 fcdb 	bl	80037f0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 ff56 	bl	800ccec <netif_set_up>
      netif_set_link_up(netif);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fff1 	bl	800ce28 <netif_set_link_up>
}
 800be46:	bf00      	nop
 800be48:	3780      	adds	r7, #128	@ 0x80
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	200058e0 	.word	0x200058e0
 800be54:	200057f8 	.word	0x200057f8

0800be58 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af02      	add	r7, sp, #8
 800be5e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800be60:	4812      	ldr	r0, [pc, #72]	@ (800beac <HAL_ETH_RxAllocateCallback+0x54>)
 800be62:	f000 fcbd 	bl	800c7e0 <memp_malloc_pool>
 800be66:	60f8      	str	r0, [r7, #12]
  if (p)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d014      	beq.n	800be98 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f103 0220 	add.w	r2, r3, #32
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4a0d      	ldr	r2, [pc, #52]	@ (800beb0 <HAL_ETH_RxAllocateCallback+0x58>)
 800be7c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800be86:	9201      	str	r2, [sp, #4]
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2241      	movs	r2, #65	@ 0x41
 800be8e:	2100      	movs	r1, #0
 800be90:	2000      	movs	r0, #0
 800be92:	f001 f9f3 	bl	800d27c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800be96:	e005      	b.n	800bea4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800be98:	4b06      	ldr	r3, [pc, #24]	@ (800beb4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800be9a:	2201      	movs	r2, #1
 800be9c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]
}
 800bea4:	bf00      	nop
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	0801a638 	.word	0x0801a638
 800beb0:	0800bae1 	.word	0x0800bae1
 800beb4:	200057f4 	.word	0x200057f4

0800beb8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3b20      	subs	r3, #32
 800bed6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	2200      	movs	r2, #0
 800bedc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	2200      	movs	r2, #0
 800bee2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	887a      	ldrh	r2, [r7, #2]
 800bee8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d103      	bne.n	800befa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	e003      	b.n	800bf02 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	69fa      	ldr	r2, [r7, #28]
 800bf00:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	69fa      	ldr	r2, [r7, #28]
 800bf06:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	61fb      	str	r3, [r7, #28]
 800bf0e:	e009      	b.n	800bf24 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	891a      	ldrh	r2, [r3, #8]
 800bf14:	887b      	ldrh	r3, [r7, #2]
 800bf16:	4413      	add	r3, r2
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	61fb      	str	r3, [r7, #28]
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1f2      	bne.n	800bf10 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800bf2a:	887b      	ldrh	r3, [r7, #2]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff fc20 	bl	800b774 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bf34:	bf00      	nop
 800bf36:	3720      	adds	r7, #32
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	4603      	mov	r3, r0
 800bf44:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bf46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf4a:	021b      	lsls	r3, r3, #8
 800bf4c:	b21a      	sxth	r2, r3
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	0a1b      	lsrs	r3, r3, #8
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	b21b      	sxth	r3, r3
 800bf56:	4313      	orrs	r3, r2
 800bf58:	b21b      	sxth	r3, r3
 800bf5a:	b29b      	uxth	r3, r3
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	061a      	lsls	r2, r3, #24
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	021b      	lsls	r3, r3, #8
 800bf78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	0a1b      	lsrs	r3, r3, #8
 800bf82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf86:	431a      	orrs	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	0e1b      	lsrs	r3, r3, #24
 800bf8c:	4313      	orrs	r3, r2
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b082      	sub	sp, #8
 800bf9e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800bfa4:	f000 f8d4 	bl	800c150 <mem_init>
  memp_init();
 800bfa8:	f000 fbd6 	bl	800c758 <memp_init>
  pbuf_init();
  netif_init();
 800bfac:	f000 fcd4 	bl	800c958 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bfb0:	f007 f85e 	bl	8013070 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bfb4:	f001 fdba 	bl	800db2c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bfb8:	f006 ffd0 	bl	8012f5c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	4603      	mov	r3, r0
 800bfcc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bfce:	4b05      	ldr	r3, [pc, #20]	@ (800bfe4 <ptr_to_mem+0x20>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	4413      	add	r3, r2
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	20005918 	.word	0x20005918

0800bfe8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bff0:	4b05      	ldr	r3, [pc, #20]	@ (800c008 <mem_to_ptr+0x20>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	b29b      	uxth	r3, r3
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	20005918 	.word	0x20005918

0800c00c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c00c:	b590      	push	{r4, r7, lr}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c014:	4b45      	ldr	r3, [pc, #276]	@ (800c12c <plug_holes+0x120>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d206      	bcs.n	800c02c <plug_holes+0x20>
 800c01e:	4b44      	ldr	r3, [pc, #272]	@ (800c130 <plug_holes+0x124>)
 800c020:	f240 12df 	movw	r2, #479	@ 0x1df
 800c024:	4943      	ldr	r1, [pc, #268]	@ (800c134 <plug_holes+0x128>)
 800c026:	4844      	ldr	r0, [pc, #272]	@ (800c138 <plug_holes+0x12c>)
 800c028:	f00a fef2 	bl	8016e10 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c02c:	4b43      	ldr	r3, [pc, #268]	@ (800c13c <plug_holes+0x130>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	429a      	cmp	r2, r3
 800c034:	d306      	bcc.n	800c044 <plug_holes+0x38>
 800c036:	4b3e      	ldr	r3, [pc, #248]	@ (800c130 <plug_holes+0x124>)
 800c038:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c03c:	4940      	ldr	r1, [pc, #256]	@ (800c140 <plug_holes+0x134>)
 800c03e:	483e      	ldr	r0, [pc, #248]	@ (800c138 <plug_holes+0x12c>)
 800c040:	f00a fee6 	bl	8016e10 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	791b      	ldrb	r3, [r3, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d006      	beq.n	800c05a <plug_holes+0x4e>
 800c04c:	4b38      	ldr	r3, [pc, #224]	@ (800c130 <plug_holes+0x124>)
 800c04e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c052:	493c      	ldr	r1, [pc, #240]	@ (800c144 <plug_holes+0x138>)
 800c054:	4838      	ldr	r0, [pc, #224]	@ (800c138 <plug_holes+0x12c>)
 800c056:	f00a fedb 	bl	8016e10 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c062:	d906      	bls.n	800c072 <plug_holes+0x66>
 800c064:	4b32      	ldr	r3, [pc, #200]	@ (800c130 <plug_holes+0x124>)
 800c066:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c06a:	4937      	ldr	r1, [pc, #220]	@ (800c148 <plug_holes+0x13c>)
 800c06c:	4832      	ldr	r0, [pc, #200]	@ (800c138 <plug_holes+0x12c>)
 800c06e:	f00a fecf 	bl	8016e10 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff ffa4 	bl	800bfc4 <ptr_to_mem>
 800c07c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	429a      	cmp	r2, r3
 800c084:	d024      	beq.n	800c0d0 <plug_holes+0xc4>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	791b      	ldrb	r3, [r3, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d120      	bne.n	800c0d0 <plug_holes+0xc4>
 800c08e:	4b2b      	ldr	r3, [pc, #172]	@ (800c13c <plug_holes+0x130>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	429a      	cmp	r2, r3
 800c096:	d01b      	beq.n	800c0d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c098:	4b2c      	ldr	r3, [pc, #176]	@ (800c14c <plug_holes+0x140>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d102      	bne.n	800c0a8 <plug_holes+0x9c>
      lfree = mem;
 800c0a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c14c <plug_holes+0x140>)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	881a      	ldrh	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c0b8:	d00a      	beq.n	800c0d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	881b      	ldrh	r3, [r3, #0]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7ff ff80 	bl	800bfc4 <ptr_to_mem>
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff ff8e 	bl	800bfe8 <mem_to_ptr>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	885b      	ldrh	r3, [r3, #2]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7ff ff75 	bl	800bfc4 <ptr_to_mem>
 800c0da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d01f      	beq.n	800c124 <plug_holes+0x118>
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	791b      	ldrb	r3, [r3, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d11b      	bne.n	800c124 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c0ec:	4b17      	ldr	r3, [pc, #92]	@ (800c14c <plug_holes+0x140>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d102      	bne.n	800c0fc <plug_holes+0xf0>
      lfree = pmem;
 800c0f6:	4a15      	ldr	r2, [pc, #84]	@ (800c14c <plug_holes+0x140>)
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	881a      	ldrh	r2, [r3, #0]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c10c:	d00a      	beq.n	800c124 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff ff56 	bl	800bfc4 <ptr_to_mem>
 800c118:	4604      	mov	r4, r0
 800c11a:	68b8      	ldr	r0, [r7, #8]
 800c11c:	f7ff ff64 	bl	800bfe8 <mem_to_ptr>
 800c120:	4603      	mov	r3, r0
 800c122:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c124:	bf00      	nop
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd90      	pop	{r4, r7, pc}
 800c12c:	20005918 	.word	0x20005918
 800c130:	08017c8c 	.word	0x08017c8c
 800c134:	08017cbc 	.word	0x08017cbc
 800c138:	08017cd4 	.word	0x08017cd4
 800c13c:	2000591c 	.word	0x2000591c
 800c140:	08017cfc 	.word	0x08017cfc
 800c144:	08017d18 	.word	0x08017d18
 800c148:	08017d34 	.word	0x08017d34
 800c14c:	20005920 	.word	0x20005920

0800c150 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c156:	4b16      	ldr	r3, [pc, #88]	@ (800c1b0 <mem_init+0x60>)
 800c158:	4a16      	ldr	r2, [pc, #88]	@ (800c1b4 <mem_init+0x64>)
 800c15a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c15c:	4b14      	ldr	r3, [pc, #80]	@ (800c1b0 <mem_init+0x60>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c168:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c176:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800c17a:	f7ff ff23 	bl	800bfc4 <ptr_to_mem>
 800c17e:	4603      	mov	r3, r0
 800c180:	4a0d      	ldr	r2, [pc, #52]	@ (800c1b8 <mem_init+0x68>)
 800c182:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c184:	4b0c      	ldr	r3, [pc, #48]	@ (800c1b8 <mem_init+0x68>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2201      	movs	r2, #1
 800c18a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c18c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b8 <mem_init+0x68>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c194:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c196:	4b08      	ldr	r3, [pc, #32]	@ (800c1b8 <mem_init+0x68>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c19e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c1a0:	4b03      	ldr	r3, [pc, #12]	@ (800c1b0 <mem_init+0x60>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a05      	ldr	r2, [pc, #20]	@ (800c1bc <mem_init+0x6c>)
 800c1a6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20005918 	.word	0x20005918
 800c1b4:	20048000 	.word	0x20048000
 800c1b8:	2000591c 	.word	0x2000591c
 800c1bc:	20005920 	.word	0x20005920

0800c1c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff ff0d 	bl	800bfe8 <mem_to_ptr>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7ff fef4 	bl	800bfc4 <ptr_to_mem>
 800c1dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	885b      	ldrh	r3, [r3, #2]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7ff feee 	bl	800bfc4 <ptr_to_mem>
 800c1e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c1f2:	d818      	bhi.n	800c226 <mem_link_valid+0x66>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	885b      	ldrh	r3, [r3, #2]
 800c1f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c1fc:	d813      	bhi.n	800c226 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c202:	8afa      	ldrh	r2, [r7, #22]
 800c204:	429a      	cmp	r2, r3
 800c206:	d004      	beq.n	800c212 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	8afa      	ldrh	r2, [r7, #22]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d109      	bne.n	800c226 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c212:	4b08      	ldr	r3, [pc, #32]	@ (800c234 <mem_link_valid+0x74>)
 800c214:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d006      	beq.n	800c22a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	885b      	ldrh	r3, [r3, #2]
 800c220:	8afa      	ldrh	r2, [r7, #22]
 800c222:	429a      	cmp	r2, r3
 800c224:	d001      	beq.n	800c22a <mem_link_valid+0x6a>
    return 0;
 800c226:	2300      	movs	r3, #0
 800c228:	e000      	b.n	800c22c <mem_link_valid+0x6c>
  }
  return 1;
 800c22a:	2301      	movs	r3, #1
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3718      	adds	r7, #24
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	2000591c 	.word	0x2000591c

0800c238 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d04c      	beq.n	800c2e0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d007      	beq.n	800c260 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c250:	4b25      	ldr	r3, [pc, #148]	@ (800c2e8 <mem_free+0xb0>)
 800c252:	f240 2273 	movw	r2, #627	@ 0x273
 800c256:	4925      	ldr	r1, [pc, #148]	@ (800c2ec <mem_free+0xb4>)
 800c258:	4825      	ldr	r0, [pc, #148]	@ (800c2f0 <mem_free+0xb8>)
 800c25a:	f00a fdd9 	bl	8016e10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c25e:	e040      	b.n	800c2e2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3b08      	subs	r3, #8
 800c264:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c266:	4b23      	ldr	r3, [pc, #140]	@ (800c2f4 <mem_free+0xbc>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d306      	bcc.n	800c27e <mem_free+0x46>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f103 020c 	add.w	r2, r3, #12
 800c276:	4b20      	ldr	r3, [pc, #128]	@ (800c2f8 <mem_free+0xc0>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d907      	bls.n	800c28e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c27e:	4b1a      	ldr	r3, [pc, #104]	@ (800c2e8 <mem_free+0xb0>)
 800c280:	f240 227f 	movw	r2, #639	@ 0x27f
 800c284:	491d      	ldr	r1, [pc, #116]	@ (800c2fc <mem_free+0xc4>)
 800c286:	481a      	ldr	r0, [pc, #104]	@ (800c2f0 <mem_free+0xb8>)
 800c288:	f00a fdc2 	bl	8016e10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c28c:	e029      	b.n	800c2e2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	791b      	ldrb	r3, [r3, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d107      	bne.n	800c2a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c296:	4b14      	ldr	r3, [pc, #80]	@ (800c2e8 <mem_free+0xb0>)
 800c298:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c29c:	4918      	ldr	r1, [pc, #96]	@ (800c300 <mem_free+0xc8>)
 800c29e:	4814      	ldr	r0, [pc, #80]	@ (800c2f0 <mem_free+0xb8>)
 800c2a0:	f00a fdb6 	bl	8016e10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c2a4:	e01d      	b.n	800c2e2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f7ff ff8a 	bl	800c1c0 <mem_link_valid>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d107      	bne.n	800c2c2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e8 <mem_free+0xb0>)
 800c2b4:	f240 2295 	movw	r2, #661	@ 0x295
 800c2b8:	4912      	ldr	r1, [pc, #72]	@ (800c304 <mem_free+0xcc>)
 800c2ba:	480d      	ldr	r0, [pc, #52]	@ (800c2f0 <mem_free+0xb8>)
 800c2bc:	f00a fda8 	bl	8016e10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c2c0:	e00f      	b.n	800c2e2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c2c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c308 <mem_free+0xd0>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d202      	bcs.n	800c2d8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c2d2:	4a0d      	ldr	r2, [pc, #52]	@ (800c308 <mem_free+0xd0>)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f7ff fe97 	bl	800c00c <plug_holes>
 800c2de:	e000      	b.n	800c2e2 <mem_free+0xaa>
    return;
 800c2e0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	08017c8c 	.word	0x08017c8c
 800c2ec:	08017d60 	.word	0x08017d60
 800c2f0:	08017cd4 	.word	0x08017cd4
 800c2f4:	20005918 	.word	0x20005918
 800c2f8:	2000591c 	.word	0x2000591c
 800c2fc:	08017d84 	.word	0x08017d84
 800c300:	08017da0 	.word	0x08017da0
 800c304:	08017dc8 	.word	0x08017dc8
 800c308:	20005920 	.word	0x20005920

0800c30c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c318:	887b      	ldrh	r3, [r7, #2]
 800c31a:	3303      	adds	r3, #3
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	f023 0303 	bic.w	r3, r3, #3
 800c322:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c324:	8bfb      	ldrh	r3, [r7, #30]
 800c326:	2b0b      	cmp	r3, #11
 800c328:	d801      	bhi.n	800c32e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c32a:	230c      	movs	r3, #12
 800c32c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c32e:	8bfb      	ldrh	r3, [r7, #30]
 800c330:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c334:	d803      	bhi.n	800c33e <mem_trim+0x32>
 800c336:	8bfa      	ldrh	r2, [r7, #30]
 800c338:	887b      	ldrh	r3, [r7, #2]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d201      	bcs.n	800c342 <mem_trim+0x36>
    return NULL;
 800c33e:	2300      	movs	r3, #0
 800c340:	e0cc      	b.n	800c4dc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c342:	4b68      	ldr	r3, [pc, #416]	@ (800c4e4 <mem_trim+0x1d8>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d304      	bcc.n	800c356 <mem_trim+0x4a>
 800c34c:	4b66      	ldr	r3, [pc, #408]	@ (800c4e8 <mem_trim+0x1dc>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d306      	bcc.n	800c364 <mem_trim+0x58>
 800c356:	4b65      	ldr	r3, [pc, #404]	@ (800c4ec <mem_trim+0x1e0>)
 800c358:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c35c:	4964      	ldr	r1, [pc, #400]	@ (800c4f0 <mem_trim+0x1e4>)
 800c35e:	4865      	ldr	r0, [pc, #404]	@ (800c4f4 <mem_trim+0x1e8>)
 800c360:	f00a fd56 	bl	8016e10 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c364:	4b5f      	ldr	r3, [pc, #380]	@ (800c4e4 <mem_trim+0x1d8>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d304      	bcc.n	800c378 <mem_trim+0x6c>
 800c36e:	4b5e      	ldr	r3, [pc, #376]	@ (800c4e8 <mem_trim+0x1dc>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	429a      	cmp	r2, r3
 800c376:	d301      	bcc.n	800c37c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	e0af      	b.n	800c4dc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	3b08      	subs	r3, #8
 800c380:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c382:	69b8      	ldr	r0, [r7, #24]
 800c384:	f7ff fe30 	bl	800bfe8 <mem_to_ptr>
 800c388:	4603      	mov	r3, r0
 800c38a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	881a      	ldrh	r2, [r3, #0]
 800c390:	8afb      	ldrh	r3, [r7, #22]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	b29b      	uxth	r3, r3
 800c396:	3b08      	subs	r3, #8
 800c398:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c39a:	8bfa      	ldrh	r2, [r7, #30]
 800c39c:	8abb      	ldrh	r3, [r7, #20]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d906      	bls.n	800c3b0 <mem_trim+0xa4>
 800c3a2:	4b52      	ldr	r3, [pc, #328]	@ (800c4ec <mem_trim+0x1e0>)
 800c3a4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c3a8:	4953      	ldr	r1, [pc, #332]	@ (800c4f8 <mem_trim+0x1ec>)
 800c3aa:	4852      	ldr	r0, [pc, #328]	@ (800c4f4 <mem_trim+0x1e8>)
 800c3ac:	f00a fd30 	bl	8016e10 <iprintf>
  if (newsize > size) {
 800c3b0:	8bfa      	ldrh	r2, [r7, #30]
 800c3b2:	8abb      	ldrh	r3, [r7, #20]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d901      	bls.n	800c3bc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	e08f      	b.n	800c4dc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c3bc:	8bfa      	ldrh	r2, [r7, #30]
 800c3be:	8abb      	ldrh	r3, [r7, #20]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d101      	bne.n	800c3c8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	e089      	b.n	800c4dc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fdf9 	bl	800bfc4 <ptr_to_mem>
 800c3d2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	791b      	ldrb	r3, [r3, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d13f      	bne.n	800c45c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c3e4:	d106      	bne.n	800c3f4 <mem_trim+0xe8>
 800c3e6:	4b41      	ldr	r3, [pc, #260]	@ (800c4ec <mem_trim+0x1e0>)
 800c3e8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c3ec:	4943      	ldr	r1, [pc, #268]	@ (800c4fc <mem_trim+0x1f0>)
 800c3ee:	4841      	ldr	r0, [pc, #260]	@ (800c4f4 <mem_trim+0x1e8>)
 800c3f0:	f00a fd0e 	bl	8016e10 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	881b      	ldrh	r3, [r3, #0]
 800c3f8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c3fa:	8afa      	ldrh	r2, [r7, #22]
 800c3fc:	8bfb      	ldrh	r3, [r7, #30]
 800c3fe:	4413      	add	r3, r2
 800c400:	b29b      	uxth	r3, r3
 800c402:	3308      	adds	r3, #8
 800c404:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c406:	4b3e      	ldr	r3, [pc, #248]	@ (800c500 <mem_trim+0x1f4>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d106      	bne.n	800c41e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c410:	89fb      	ldrh	r3, [r7, #14]
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fdd6 	bl	800bfc4 <ptr_to_mem>
 800c418:	4603      	mov	r3, r0
 800c41a:	4a39      	ldr	r2, [pc, #228]	@ (800c500 <mem_trim+0x1f4>)
 800c41c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c41e:	89fb      	ldrh	r3, [r7, #14]
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fdcf 	bl	800bfc4 <ptr_to_mem>
 800c426:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	2200      	movs	r2, #0
 800c42c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	89ba      	ldrh	r2, [r7, #12]
 800c432:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	8afa      	ldrh	r2, [r7, #22]
 800c438:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	89fa      	ldrh	r2, [r7, #14]
 800c43e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	881b      	ldrh	r3, [r3, #0]
 800c444:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c448:	d047      	beq.n	800c4da <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	4618      	mov	r0, r3
 800c450:	f7ff fdb8 	bl	800bfc4 <ptr_to_mem>
 800c454:	4602      	mov	r2, r0
 800c456:	89fb      	ldrh	r3, [r7, #14]
 800c458:	8053      	strh	r3, [r2, #2]
 800c45a:	e03e      	b.n	800c4da <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c45c:	8bfb      	ldrh	r3, [r7, #30]
 800c45e:	f103 0214 	add.w	r2, r3, #20
 800c462:	8abb      	ldrh	r3, [r7, #20]
 800c464:	429a      	cmp	r2, r3
 800c466:	d838      	bhi.n	800c4da <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c468:	8afa      	ldrh	r2, [r7, #22]
 800c46a:	8bfb      	ldrh	r3, [r7, #30]
 800c46c:	4413      	add	r3, r2
 800c46e:	b29b      	uxth	r3, r3
 800c470:	3308      	adds	r3, #8
 800c472:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c47c:	d106      	bne.n	800c48c <mem_trim+0x180>
 800c47e:	4b1b      	ldr	r3, [pc, #108]	@ (800c4ec <mem_trim+0x1e0>)
 800c480:	f240 3216 	movw	r2, #790	@ 0x316
 800c484:	491d      	ldr	r1, [pc, #116]	@ (800c4fc <mem_trim+0x1f0>)
 800c486:	481b      	ldr	r0, [pc, #108]	@ (800c4f4 <mem_trim+0x1e8>)
 800c488:	f00a fcc2 	bl	8016e10 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c48c:	89fb      	ldrh	r3, [r7, #14]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7ff fd98 	bl	800bfc4 <ptr_to_mem>
 800c494:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c496:	4b1a      	ldr	r3, [pc, #104]	@ (800c500 <mem_trim+0x1f4>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	693a      	ldr	r2, [r7, #16]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d202      	bcs.n	800c4a6 <mem_trim+0x19a>
      lfree = mem2;
 800c4a0:	4a17      	ldr	r2, [pc, #92]	@ (800c500 <mem_trim+0x1f4>)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	881a      	ldrh	r2, [r3, #0]
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	8afa      	ldrh	r2, [r7, #22]
 800c4b8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	89fa      	ldrh	r2, [r7, #14]
 800c4be:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	881b      	ldrh	r3, [r3, #0]
 800c4c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c4c8:	d007      	beq.n	800c4da <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7ff fd78 	bl	800bfc4 <ptr_to_mem>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	89fb      	ldrh	r3, [r7, #14]
 800c4d8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c4da:	687b      	ldr	r3, [r7, #4]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3720      	adds	r7, #32
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	20005918 	.word	0x20005918
 800c4e8:	2000591c 	.word	0x2000591c
 800c4ec:	08017c8c 	.word	0x08017c8c
 800c4f0:	08017dfc 	.word	0x08017dfc
 800c4f4:	08017cd4 	.word	0x08017cd4
 800c4f8:	08017e14 	.word	0x08017e14
 800c4fc:	08017e34 	.word	0x08017e34
 800c500:	20005920 	.word	0x20005920

0800c504 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b088      	sub	sp, #32
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c50e:	88fb      	ldrh	r3, [r7, #6]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <mem_malloc+0x14>
    return NULL;
 800c514:	2300      	movs	r3, #0
 800c516:	e0d9      	b.n	800c6cc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c518:	88fb      	ldrh	r3, [r7, #6]
 800c51a:	3303      	adds	r3, #3
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f023 0303 	bic.w	r3, r3, #3
 800c522:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c524:	8bbb      	ldrh	r3, [r7, #28]
 800c526:	2b0b      	cmp	r3, #11
 800c528:	d801      	bhi.n	800c52e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c52a:	230c      	movs	r3, #12
 800c52c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c52e:	8bbb      	ldrh	r3, [r7, #28]
 800c530:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c534:	d803      	bhi.n	800c53e <mem_malloc+0x3a>
 800c536:	8bba      	ldrh	r2, [r7, #28]
 800c538:	88fb      	ldrh	r3, [r7, #6]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d201      	bcs.n	800c542 <mem_malloc+0x3e>
    return NULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	e0c4      	b.n	800c6cc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c542:	4b64      	ldr	r3, [pc, #400]	@ (800c6d4 <mem_malloc+0x1d0>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff fd4e 	bl	800bfe8 <mem_to_ptr>
 800c54c:	4603      	mov	r3, r0
 800c54e:	83fb      	strh	r3, [r7, #30]
 800c550:	e0b4      	b.n	800c6bc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c552:	8bfb      	ldrh	r3, [r7, #30]
 800c554:	4618      	mov	r0, r3
 800c556:	f7ff fd35 	bl	800bfc4 <ptr_to_mem>
 800c55a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	791b      	ldrb	r3, [r3, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f040 80a4 	bne.w	800c6ae <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	461a      	mov	r2, r3
 800c56c:	8bfb      	ldrh	r3, [r7, #30]
 800c56e:	1ad3      	subs	r3, r2, r3
 800c570:	f1a3 0208 	sub.w	r2, r3, #8
 800c574:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c576:	429a      	cmp	r2, r3
 800c578:	f0c0 8099 	bcc.w	800c6ae <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	881b      	ldrh	r3, [r3, #0]
 800c580:	461a      	mov	r2, r3
 800c582:	8bfb      	ldrh	r3, [r7, #30]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	f1a3 0208 	sub.w	r2, r3, #8
 800c58a:	8bbb      	ldrh	r3, [r7, #28]
 800c58c:	3314      	adds	r3, #20
 800c58e:	429a      	cmp	r2, r3
 800c590:	d333      	bcc.n	800c5fa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c592:	8bfa      	ldrh	r2, [r7, #30]
 800c594:	8bbb      	ldrh	r3, [r7, #28]
 800c596:	4413      	add	r3, r2
 800c598:	b29b      	uxth	r3, r3
 800c59a:	3308      	adds	r3, #8
 800c59c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c59e:	8a7b      	ldrh	r3, [r7, #18]
 800c5a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c5a4:	d106      	bne.n	800c5b4 <mem_malloc+0xb0>
 800c5a6:	4b4c      	ldr	r3, [pc, #304]	@ (800c6d8 <mem_malloc+0x1d4>)
 800c5a8:	f240 3287 	movw	r2, #903	@ 0x387
 800c5ac:	494b      	ldr	r1, [pc, #300]	@ (800c6dc <mem_malloc+0x1d8>)
 800c5ae:	484c      	ldr	r0, [pc, #304]	@ (800c6e0 <mem_malloc+0x1dc>)
 800c5b0:	f00a fc2e 	bl	8016e10 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c5b4:	8a7b      	ldrh	r3, [r7, #18]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7ff fd04 	bl	800bfc4 <ptr_to_mem>
 800c5bc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	881a      	ldrh	r2, [r3, #0]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	8bfa      	ldrh	r2, [r7, #30]
 800c5d0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	8a7a      	ldrh	r2, [r7, #18]
 800c5d6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c5e6:	d00b      	beq.n	800c600 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	881b      	ldrh	r3, [r3, #0]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff fce9 	bl	800bfc4 <ptr_to_mem>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	8a7b      	ldrh	r3, [r7, #18]
 800c5f6:	8053      	strh	r3, [r2, #2]
 800c5f8:	e002      	b.n	800c600 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c600:	4b34      	ldr	r3, [pc, #208]	@ (800c6d4 <mem_malloc+0x1d0>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	697a      	ldr	r2, [r7, #20]
 800c606:	429a      	cmp	r2, r3
 800c608:	d127      	bne.n	800c65a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c60a:	4b32      	ldr	r3, [pc, #200]	@ (800c6d4 <mem_malloc+0x1d0>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c610:	e005      	b.n	800c61e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff fcd4 	bl	800bfc4 <ptr_to_mem>
 800c61c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	791b      	ldrb	r3, [r3, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d004      	beq.n	800c630 <mem_malloc+0x12c>
 800c626:	4b2f      	ldr	r3, [pc, #188]	@ (800c6e4 <mem_malloc+0x1e0>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	69ba      	ldr	r2, [r7, #24]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d1f0      	bne.n	800c612 <mem_malloc+0x10e>
          }
          lfree = cur;
 800c630:	4a28      	ldr	r2, [pc, #160]	@ (800c6d4 <mem_malloc+0x1d0>)
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c636:	4b27      	ldr	r3, [pc, #156]	@ (800c6d4 <mem_malloc+0x1d0>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b2a      	ldr	r3, [pc, #168]	@ (800c6e4 <mem_malloc+0x1e0>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d00b      	beq.n	800c65a <mem_malloc+0x156>
 800c642:	4b24      	ldr	r3, [pc, #144]	@ (800c6d4 <mem_malloc+0x1d0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	791b      	ldrb	r3, [r3, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d006      	beq.n	800c65a <mem_malloc+0x156>
 800c64c:	4b22      	ldr	r3, [pc, #136]	@ (800c6d8 <mem_malloc+0x1d4>)
 800c64e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c652:	4925      	ldr	r1, [pc, #148]	@ (800c6e8 <mem_malloc+0x1e4>)
 800c654:	4822      	ldr	r0, [pc, #136]	@ (800c6e0 <mem_malloc+0x1dc>)
 800c656:	f00a fbdb 	bl	8016e10 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c65a:	8bba      	ldrh	r2, [r7, #28]
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	4413      	add	r3, r2
 800c660:	3308      	adds	r3, #8
 800c662:	4a20      	ldr	r2, [pc, #128]	@ (800c6e4 <mem_malloc+0x1e0>)
 800c664:	6812      	ldr	r2, [r2, #0]
 800c666:	4293      	cmp	r3, r2
 800c668:	d906      	bls.n	800c678 <mem_malloc+0x174>
 800c66a:	4b1b      	ldr	r3, [pc, #108]	@ (800c6d8 <mem_malloc+0x1d4>)
 800c66c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c670:	491e      	ldr	r1, [pc, #120]	@ (800c6ec <mem_malloc+0x1e8>)
 800c672:	481b      	ldr	r0, [pc, #108]	@ (800c6e0 <mem_malloc+0x1dc>)
 800c674:	f00a fbcc 	bl	8016e10 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	f003 0303 	and.w	r3, r3, #3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d006      	beq.n	800c690 <mem_malloc+0x18c>
 800c682:	4b15      	ldr	r3, [pc, #84]	@ (800c6d8 <mem_malloc+0x1d4>)
 800c684:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c688:	4919      	ldr	r1, [pc, #100]	@ (800c6f0 <mem_malloc+0x1ec>)
 800c68a:	4815      	ldr	r0, [pc, #84]	@ (800c6e0 <mem_malloc+0x1dc>)
 800c68c:	f00a fbc0 	bl	8016e10 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f003 0303 	and.w	r3, r3, #3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d006      	beq.n	800c6a8 <mem_malloc+0x1a4>
 800c69a:	4b0f      	ldr	r3, [pc, #60]	@ (800c6d8 <mem_malloc+0x1d4>)
 800c69c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c6a0:	4914      	ldr	r1, [pc, #80]	@ (800c6f4 <mem_malloc+0x1f0>)
 800c6a2:	480f      	ldr	r0, [pc, #60]	@ (800c6e0 <mem_malloc+0x1dc>)
 800c6a4:	f00a fbb4 	bl	8016e10 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	3308      	adds	r3, #8
 800c6ac:	e00e      	b.n	800c6cc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c6ae:	8bfb      	ldrh	r3, [r7, #30]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7ff fc87 	bl	800bfc4 <ptr_to_mem>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c6bc:	8bfa      	ldrh	r2, [r7, #30]
 800c6be:	8bbb      	ldrh	r3, [r7, #28]
 800c6c0:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	f4ff af44 	bcc.w	800c552 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3720      	adds	r7, #32
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20005920 	.word	0x20005920
 800c6d8:	08017c8c 	.word	0x08017c8c
 800c6dc:	08017e34 	.word	0x08017e34
 800c6e0:	08017cd4 	.word	0x08017cd4
 800c6e4:	2000591c 	.word	0x2000591c
 800c6e8:	08017e48 	.word	0x08017e48
 800c6ec:	08017e64 	.word	0x08017e64
 800c6f0:	08017e94 	.word	0x08017e94
 800c6f4:	08017ec4 	.word	0x08017ec4

0800c6f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	3303      	adds	r3, #3
 800c70e:	f023 0303 	bic.w	r3, r3, #3
 800c712:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	e011      	b.n	800c73e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	461a      	mov	r2, r3
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	4413      	add	r3, r2
 800c736:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	3301      	adds	r3, #1
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	885b      	ldrh	r3, [r3, #2]
 800c742:	461a      	mov	r2, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4293      	cmp	r3, r2
 800c748:	dbe7      	blt.n	800c71a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c74a:	bf00      	nop
 800c74c:	bf00      	nop
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c75e:	2300      	movs	r3, #0
 800c760:	80fb      	strh	r3, [r7, #6]
 800c762:	e009      	b.n	800c778 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c764:	88fb      	ldrh	r3, [r7, #6]
 800c766:	4a08      	ldr	r2, [pc, #32]	@ (800c788 <memp_init+0x30>)
 800c768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff ffc3 	bl	800c6f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c772:	88fb      	ldrh	r3, [r7, #6]
 800c774:	3301      	adds	r3, #1
 800c776:	80fb      	strh	r3, [r7, #6]
 800c778:	88fb      	ldrh	r3, [r7, #6]
 800c77a:	2b08      	cmp	r3, #8
 800c77c:	d9f2      	bls.n	800c764 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c77e:	bf00      	nop
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	0801a6b0 	.word	0x0801a6b0

0800c78c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d012      	beq.n	800c7c8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	6812      	ldr	r2, [r2, #0]
 800c7aa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f003 0303 	and.w	r3, r3, #3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d006      	beq.n	800c7c4 <do_memp_malloc_pool+0x38>
 800c7b6:	4b07      	ldr	r3, [pc, #28]	@ (800c7d4 <do_memp_malloc_pool+0x48>)
 800c7b8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c7bc:	4906      	ldr	r1, [pc, #24]	@ (800c7d8 <do_memp_malloc_pool+0x4c>)
 800c7be:	4807      	ldr	r0, [pc, #28]	@ (800c7dc <do_memp_malloc_pool+0x50>)
 800c7c0:	f00a fb26 	bl	8016e10 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	e000      	b.n	800c7ca <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	08017ee8 	.word	0x08017ee8
 800c7d8:	08017f18 	.word	0x08017f18
 800c7dc:	08017f3c 	.word	0x08017f3c

0800c7e0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d106      	bne.n	800c7fc <memp_malloc_pool+0x1c>
 800c7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c818 <memp_malloc_pool+0x38>)
 800c7f0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c7f4:	4909      	ldr	r1, [pc, #36]	@ (800c81c <memp_malloc_pool+0x3c>)
 800c7f6:	480a      	ldr	r0, [pc, #40]	@ (800c820 <memp_malloc_pool+0x40>)
 800c7f8:	f00a fb0a 	bl	8016e10 <iprintf>
  if (desc == NULL) {
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <memp_malloc_pool+0x26>
    return NULL;
 800c802:	2300      	movs	r3, #0
 800c804:	e003      	b.n	800c80e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7ff ffc0 	bl	800c78c <do_memp_malloc_pool>
 800c80c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	08017ee8 	.word	0x08017ee8
 800c81c:	08017f64 	.word	0x08017f64
 800c820:	08017f3c 	.word	0x08017f3c

0800c824 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	4603      	mov	r3, r0
 800c82c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c82e:	79fb      	ldrb	r3, [r7, #7]
 800c830:	2b08      	cmp	r3, #8
 800c832:	d908      	bls.n	800c846 <memp_malloc+0x22>
 800c834:	4b0a      	ldr	r3, [pc, #40]	@ (800c860 <memp_malloc+0x3c>)
 800c836:	f240 1257 	movw	r2, #343	@ 0x157
 800c83a:	490a      	ldr	r1, [pc, #40]	@ (800c864 <memp_malloc+0x40>)
 800c83c:	480a      	ldr	r0, [pc, #40]	@ (800c868 <memp_malloc+0x44>)
 800c83e:	f00a fae7 	bl	8016e10 <iprintf>
 800c842:	2300      	movs	r3, #0
 800c844:	e008      	b.n	800c858 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	4a08      	ldr	r2, [pc, #32]	@ (800c86c <memp_malloc+0x48>)
 800c84a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c84e:	4618      	mov	r0, r3
 800c850:	f7ff ff9c 	bl	800c78c <do_memp_malloc_pool>
 800c854:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c856:	68fb      	ldr	r3, [r7, #12]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	08017ee8 	.word	0x08017ee8
 800c864:	08017f78 	.word	0x08017f78
 800c868:	08017f3c 	.word	0x08017f3c
 800c86c:	0801a6b0 	.word	0x0801a6b0

0800c870 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	f003 0303 	and.w	r3, r3, #3
 800c880:	2b00      	cmp	r3, #0
 800c882:	d006      	beq.n	800c892 <do_memp_free_pool+0x22>
 800c884:	4b0a      	ldr	r3, [pc, #40]	@ (800c8b0 <do_memp_free_pool+0x40>)
 800c886:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c88a:	490a      	ldr	r1, [pc, #40]	@ (800c8b4 <do_memp_free_pool+0x44>)
 800c88c:	480a      	ldr	r0, [pc, #40]	@ (800c8b8 <do_memp_free_pool+0x48>)
 800c88e:	f00a fabf 	bl	8016e10 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c8a8:	bf00      	nop
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	08017ee8 	.word	0x08017ee8
 800c8b4:	08017f98 	.word	0x08017f98
 800c8b8:	08017f3c 	.word	0x08017f3c

0800c8bc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d106      	bne.n	800c8da <memp_free_pool+0x1e>
 800c8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f8 <memp_free_pool+0x3c>)
 800c8ce:	f240 1295 	movw	r2, #405	@ 0x195
 800c8d2:	490a      	ldr	r1, [pc, #40]	@ (800c8fc <memp_free_pool+0x40>)
 800c8d4:	480a      	ldr	r0, [pc, #40]	@ (800c900 <memp_free_pool+0x44>)
 800c8d6:	f00a fa9b 	bl	8016e10 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d007      	beq.n	800c8f0 <memp_free_pool+0x34>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d004      	beq.n	800c8f0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff ffc1 	bl	800c870 <do_memp_free_pool>
 800c8ee:	e000      	b.n	800c8f2 <memp_free_pool+0x36>
    return;
 800c8f0:	bf00      	nop
}
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	08017ee8 	.word	0x08017ee8
 800c8fc:	08017f64 	.word	0x08017f64
 800c900:	08017f3c 	.word	0x08017f3c

0800c904 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	4603      	mov	r3, r0
 800c90c:	6039      	str	r1, [r7, #0]
 800c90e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	2b08      	cmp	r3, #8
 800c914:	d907      	bls.n	800c926 <memp_free+0x22>
 800c916:	4b0c      	ldr	r3, [pc, #48]	@ (800c948 <memp_free+0x44>)
 800c918:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c91c:	490b      	ldr	r1, [pc, #44]	@ (800c94c <memp_free+0x48>)
 800c91e:	480c      	ldr	r0, [pc, #48]	@ (800c950 <memp_free+0x4c>)
 800c920:	f00a fa76 	bl	8016e10 <iprintf>
 800c924:	e00c      	b.n	800c940 <memp_free+0x3c>

  if (mem == NULL) {
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d008      	beq.n	800c93e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c92c:	79fb      	ldrb	r3, [r7, #7]
 800c92e:	4a09      	ldr	r2, [pc, #36]	@ (800c954 <memp_free+0x50>)
 800c930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff ff9a 	bl	800c870 <do_memp_free_pool>
 800c93c:	e000      	b.n	800c940 <memp_free+0x3c>
    return;
 800c93e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	08017ee8 	.word	0x08017ee8
 800c94c:	08017fb8 	.word	0x08017fb8
 800c950:	08017f3c 	.word	0x08017f3c
 800c954:	0801a6b0 	.word	0x0801a6b0

0800c958 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c958:	b480      	push	{r7}
 800c95a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c95c:	bf00      	nop
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
	...

0800c968 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d108      	bne.n	800c98e <netif_add+0x26>
 800c97c:	4b57      	ldr	r3, [pc, #348]	@ (800cadc <netif_add+0x174>)
 800c97e:	f240 1227 	movw	r2, #295	@ 0x127
 800c982:	4957      	ldr	r1, [pc, #348]	@ (800cae0 <netif_add+0x178>)
 800c984:	4857      	ldr	r0, [pc, #348]	@ (800cae4 <netif_add+0x17c>)
 800c986:	f00a fa43 	bl	8016e10 <iprintf>
 800c98a:	2300      	movs	r3, #0
 800c98c:	e0a2      	b.n	800cad4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d108      	bne.n	800c9a6 <netif_add+0x3e>
 800c994:	4b51      	ldr	r3, [pc, #324]	@ (800cadc <netif_add+0x174>)
 800c996:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c99a:	4953      	ldr	r1, [pc, #332]	@ (800cae8 <netif_add+0x180>)
 800c99c:	4851      	ldr	r0, [pc, #324]	@ (800cae4 <netif_add+0x17c>)
 800c99e:	f00a fa37 	bl	8016e10 <iprintf>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e096      	b.n	800cad4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c9ac:	4b4f      	ldr	r3, [pc, #316]	@ (800caec <netif_add+0x184>)
 800c9ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c9b6:	4b4d      	ldr	r3, [pc, #308]	@ (800caec <netif_add+0x184>)
 800c9b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d101      	bne.n	800c9c4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c9c0:	4b4a      	ldr	r3, [pc, #296]	@ (800caec <netif_add+0x184>)
 800c9c2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	4a45      	ldr	r2, [pc, #276]	@ (800caf0 <netif_add+0x188>)
 800c9da:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6a3a      	ldr	r2, [r7, #32]
 800c9f4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c9f6:	4b3f      	ldr	r3, [pc, #252]	@ (800caf4 <netif_add+0x18c>)
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca04:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	68b9      	ldr	r1, [r7, #8]
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f000 f913 	bl	800cc38 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ca12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	4798      	blx	r3
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d001      	beq.n	800ca22 <netif_add+0xba>
    return NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e058      	b.n	800cad4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca28:	2bff      	cmp	r3, #255	@ 0xff
 800ca2a:	d103      	bne.n	800ca34 <netif_add+0xcc>
        netif->num = 0;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ca38:	4b2f      	ldr	r3, [pc, #188]	@ (800caf8 <netif_add+0x190>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	617b      	str	r3, [r7, #20]
 800ca3e:	e02b      	b.n	800ca98 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d106      	bne.n	800ca56 <netif_add+0xee>
 800ca48:	4b24      	ldr	r3, [pc, #144]	@ (800cadc <netif_add+0x174>)
 800ca4a:	f240 128b 	movw	r2, #395	@ 0x18b
 800ca4e:	492b      	ldr	r1, [pc, #172]	@ (800cafc <netif_add+0x194>)
 800ca50:	4824      	ldr	r0, [pc, #144]	@ (800cae4 <netif_add+0x17c>)
 800ca52:	f00a f9dd 	bl	8016e10 <iprintf>
        num_netifs++;
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2bff      	cmp	r3, #255	@ 0xff
 800ca60:	dd06      	ble.n	800ca70 <netif_add+0x108>
 800ca62:	4b1e      	ldr	r3, [pc, #120]	@ (800cadc <netif_add+0x174>)
 800ca64:	f240 128d 	movw	r2, #397	@ 0x18d
 800ca68:	4925      	ldr	r1, [pc, #148]	@ (800cb00 <netif_add+0x198>)
 800ca6a:	481e      	ldr	r0, [pc, #120]	@ (800cae4 <netif_add+0x17c>)
 800ca6c:	f00a f9d0 	bl	8016e10 <iprintf>
        if (netif2->num == netif->num) {
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d108      	bne.n	800ca92 <netif_add+0x12a>
          netif->num++;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca86:	3301      	adds	r3, #1
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800ca90:	e005      	b.n	800ca9e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	617b      	str	r3, [r7, #20]
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1d0      	bne.n	800ca40 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1be      	bne.n	800ca22 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800caaa:	2bfe      	cmp	r3, #254	@ 0xfe
 800caac:	d103      	bne.n	800cab6 <netif_add+0x14e>
    netif_num = 0;
 800caae:	4b11      	ldr	r3, [pc, #68]	@ (800caf4 <netif_add+0x18c>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	701a      	strb	r2, [r3, #0]
 800cab4:	e006      	b.n	800cac4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cabc:	3301      	adds	r3, #1
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	4b0c      	ldr	r3, [pc, #48]	@ (800caf4 <netif_add+0x18c>)
 800cac2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cac4:	4b0c      	ldr	r3, [pc, #48]	@ (800caf8 <netif_add+0x190>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cacc:	4a0a      	ldr	r2, [pc, #40]	@ (800caf8 <netif_add+0x190>)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cad2:	68fb      	ldr	r3, [r7, #12]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3718      	adds	r7, #24
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	08017fd4 	.word	0x08017fd4
 800cae0:	08018068 	.word	0x08018068
 800cae4:	08018024 	.word	0x08018024
 800cae8:	08018084 	.word	0x08018084
 800caec:	0801a714 	.word	0x0801a714
 800caf0:	0800cf13 	.word	0x0800cf13
 800caf4:	20008818 	.word	0x20008818
 800caf8:	20008810 	.word	0x20008810
 800cafc:	080180a8 	.word	0x080180a8
 800cb00:	080180bc 	.word	0x080180bc

0800cb04 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f002 fb55 	bl	800f1c0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f006 ff23 	bl	8013964 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cb1e:	bf00      	nop
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d106      	bne.n	800cb48 <netif_do_set_ipaddr+0x20>
 800cb3a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbb0 <netif_do_set_ipaddr+0x88>)
 800cb3c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800cb40:	491c      	ldr	r1, [pc, #112]	@ (800cbb4 <netif_do_set_ipaddr+0x8c>)
 800cb42:	481d      	ldr	r0, [pc, #116]	@ (800cbb8 <netif_do_set_ipaddr+0x90>)
 800cb44:	f00a f964 	bl	8016e10 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d106      	bne.n	800cb5c <netif_do_set_ipaddr+0x34>
 800cb4e:	4b18      	ldr	r3, [pc, #96]	@ (800cbb0 <netif_do_set_ipaddr+0x88>)
 800cb50:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800cb54:	4917      	ldr	r1, [pc, #92]	@ (800cbb4 <netif_do_set_ipaddr+0x8c>)
 800cb56:	4818      	ldr	r0, [pc, #96]	@ (800cbb8 <netif_do_set_ipaddr+0x90>)
 800cb58:	f00a f95a 	bl	8016e10 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3304      	adds	r3, #4
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d01c      	beq.n	800cba4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3304      	adds	r3, #4
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cb7a:	f107 0314 	add.w	r3, r7, #20
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7ff ffbf 	bl	800cb04 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <netif_do_set_ipaddr+0x6a>
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	e000      	b.n	800cb94 <netif_do_set_ipaddr+0x6c>
 800cb92:	2300      	movs	r3, #0
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cb98:	2101      	movs	r1, #1
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f000 f8d2 	bl	800cd44 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cba0:	2301      	movs	r3, #1
 800cba2:	e000      	b.n	800cba6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3718      	adds	r7, #24
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	08017fd4 	.word	0x08017fd4
 800cbb4:	080180ec 	.word	0x080180ec
 800cbb8:	08018024 	.word	0x08018024

0800cbbc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	3308      	adds	r3, #8
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d00a      	beq.n	800cbec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <netif_do_set_netmask+0x26>
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	e000      	b.n	800cbe4 <netif_do_set_netmask+0x28>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e000      	b.n	800cbee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b085      	sub	sp, #20
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	60f8      	str	r0, [r7, #12]
 800cc02:	60b9      	str	r1, [r7, #8]
 800cc04:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	330c      	adds	r3, #12
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d00a      	beq.n	800cc2a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d002      	beq.n	800cc20 <netif_do_set_gw+0x26>
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	e000      	b.n	800cc22 <netif_do_set_gw+0x28>
 800cc20:	2300      	movs	r3, #0
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cc26:	2301      	movs	r3, #1
 800cc28:	e000      	b.n	800cc2c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cc54:	4b1c      	ldr	r3, [pc, #112]	@ (800ccc8 <netif_set_addr+0x90>)
 800cc56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d101      	bne.n	800cc62 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cc5e:	4b1a      	ldr	r3, [pc, #104]	@ (800ccc8 <netif_set_addr+0x90>)
 800cc60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cc68:	4b17      	ldr	r3, [pc, #92]	@ (800ccc8 <netif_set_addr+0x90>)
 800cc6a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <netif_set_addr+0x42>
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d101      	bne.n	800cc7e <netif_set_addr+0x46>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e000      	b.n	800cc80 <netif_set_addr+0x48>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d006      	beq.n	800cc96 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cc88:	f107 0310 	add.w	r3, r7, #16
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	f7ff ff49 	bl	800cb28 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cc96:	69fa      	ldr	r2, [r7, #28]
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f7ff ff8e 	bl	800cbbc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cca0:	69ba      	ldr	r2, [r7, #24]
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f7ff ffa8 	bl	800cbfa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d106      	bne.n	800ccbe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ccb0:	f107 0310 	add.w	r3, r7, #16
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f7ff ff35 	bl	800cb28 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ccbe:	bf00      	nop
 800ccc0:	3720      	adds	r7, #32
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	0801a714 	.word	0x0801a714

0800cccc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ccd4:	4a04      	ldr	r2, [pc, #16]	@ (800cce8 <netif_set_default+0x1c>)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ccda:	bf00      	nop
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	20008814 	.word	0x20008814

0800ccec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d107      	bne.n	800cd0a <netif_set_up+0x1e>
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	@ (800cd38 <netif_set_up+0x4c>)
 800ccfc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800cd00:	490e      	ldr	r1, [pc, #56]	@ (800cd3c <netif_set_up+0x50>)
 800cd02:	480f      	ldr	r0, [pc, #60]	@ (800cd40 <netif_set_up+0x54>)
 800cd04:	f00a f884 	bl	8016e10 <iprintf>
 800cd08:	e013      	b.n	800cd32 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd10:	f003 0301 	and.w	r3, r3, #1
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10c      	bne.n	800cd32 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd1e:	f043 0301 	orr.w	r3, r3, #1
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cd2a:	2103      	movs	r1, #3
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 f809 	bl	800cd44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	08017fd4 	.word	0x08017fd4
 800cd3c:	0801815c 	.word	0x0801815c
 800cd40:	08018024 	.word	0x08018024

0800cd44 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d106      	bne.n	800cd64 <netif_issue_reports+0x20>
 800cd56:	4b18      	ldr	r3, [pc, #96]	@ (800cdb8 <netif_issue_reports+0x74>)
 800cd58:	f240 326d 	movw	r2, #877	@ 0x36d
 800cd5c:	4917      	ldr	r1, [pc, #92]	@ (800cdbc <netif_issue_reports+0x78>)
 800cd5e:	4818      	ldr	r0, [pc, #96]	@ (800cdc0 <netif_issue_reports+0x7c>)
 800cd60:	f00a f856 	bl	8016e10 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd6a:	f003 0304 	and.w	r3, r3, #4
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d01e      	beq.n	800cdb0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd78:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d017      	beq.n	800cdb0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd80:	78fb      	ldrb	r3, [r7, #3]
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d013      	beq.n	800cdb2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00e      	beq.n	800cdb2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd9a:	f003 0308 	and.w	r3, r3, #8
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d007      	beq.n	800cdb2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	3304      	adds	r3, #4
 800cda6:	4619      	mov	r1, r3
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f007 fd45 	bl	8014838 <etharp_request>
 800cdae:	e000      	b.n	800cdb2 <netif_issue_reports+0x6e>
    return;
 800cdb0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	08017fd4 	.word	0x08017fd4
 800cdbc:	08018178 	.word	0x08018178
 800cdc0:	08018024 	.word	0x08018024

0800cdc4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d107      	bne.n	800cde2 <netif_set_down+0x1e>
 800cdd2:	4b12      	ldr	r3, [pc, #72]	@ (800ce1c <netif_set_down+0x58>)
 800cdd4:	f240 329b 	movw	r2, #923	@ 0x39b
 800cdd8:	4911      	ldr	r1, [pc, #68]	@ (800ce20 <netif_set_down+0x5c>)
 800cdda:	4812      	ldr	r0, [pc, #72]	@ (800ce24 <netif_set_down+0x60>)
 800cddc:	f00a f818 	bl	8016e10 <iprintf>
 800cde0:	e019      	b.n	800ce16 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d012      	beq.n	800ce16 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cdf6:	f023 0301 	bic.w	r3, r3, #1
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ce08:	f003 0308 	and.w	r3, r3, #8
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d002      	beq.n	800ce16 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f007 f8cf 	bl	8013fb4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	08017fd4 	.word	0x08017fd4
 800ce20:	0801819c 	.word	0x0801819c
 800ce24:	08018024 	.word	0x08018024

0800ce28 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d107      	bne.n	800ce46 <netif_set_link_up+0x1e>
 800ce36:	4b13      	ldr	r3, [pc, #76]	@ (800ce84 <netif_set_link_up+0x5c>)
 800ce38:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ce3c:	4912      	ldr	r1, [pc, #72]	@ (800ce88 <netif_set_link_up+0x60>)
 800ce3e:	4813      	ldr	r0, [pc, #76]	@ (800ce8c <netif_set_link_up+0x64>)
 800ce40:	f009 ffe6 	bl	8016e10 <iprintf>
 800ce44:	e01b      	b.n	800ce7e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ce4c:	f003 0304 	and.w	r3, r3, #4
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d114      	bne.n	800ce7e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ce5a:	f043 0304 	orr.w	r3, r3, #4
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ce66:	2103      	movs	r1, #3
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7ff ff6b 	bl	800cd44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	69db      	ldr	r3, [r3, #28]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d003      	beq.n	800ce7e <netif_set_link_up+0x56>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	08017fd4 	.word	0x08017fd4
 800ce88:	080181bc 	.word	0x080181bc
 800ce8c:	08018024 	.word	0x08018024

0800ce90 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d107      	bne.n	800ceae <netif_set_link_down+0x1e>
 800ce9e:	4b11      	ldr	r3, [pc, #68]	@ (800cee4 <netif_set_link_down+0x54>)
 800cea0:	f240 4206 	movw	r2, #1030	@ 0x406
 800cea4:	4910      	ldr	r1, [pc, #64]	@ (800cee8 <netif_set_link_down+0x58>)
 800cea6:	4811      	ldr	r0, [pc, #68]	@ (800ceec <netif_set_link_down+0x5c>)
 800cea8:	f009 ffb2 	bl	8016e10 <iprintf>
 800ceac:	e017      	b.n	800cede <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ceb4:	f003 0304 	and.w	r3, r3, #4
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d010      	beq.n	800cede <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cec2:	f023 0304 	bic.w	r3, r3, #4
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	69db      	ldr	r3, [r3, #28]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d003      	beq.n	800cede <netif_set_link_down+0x4e>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	69db      	ldr	r3, [r3, #28]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	08017fd4 	.word	0x08017fd4
 800cee8:	080181e0 	.word	0x080181e0
 800ceec:	08018024 	.word	0x08018024

0800cef0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	61da      	str	r2, [r3, #28]
  }
}
 800cf06:	bf00      	nop
 800cf08:	370c      	adds	r7, #12
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b085      	sub	sp, #20
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	60f8      	str	r0, [r7, #12]
 800cf1a:	60b9      	str	r1, [r7, #8]
 800cf1c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cf1e:	f06f 030b 	mvn.w	r3, #11
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3714      	adds	r7, #20
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
	...

0800cf30 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cf3a:	79fb      	ldrb	r3, [r7, #7]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d013      	beq.n	800cf68 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cf40:	4b0d      	ldr	r3, [pc, #52]	@ (800cf78 <netif_get_by_index+0x48>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	60fb      	str	r3, [r7, #12]
 800cf46:	e00c      	b.n	800cf62 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf4e:	3301      	adds	r3, #1
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	79fa      	ldrb	r2, [r7, #7]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d101      	bne.n	800cf5c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	e006      	b.n	800cf6a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1ef      	bne.n	800cf48 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	20008810 	.word	0x20008810

0800cf7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cf82:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb4 <pbuf_free_ooseq+0x38>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cf88:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb8 <pbuf_free_ooseq+0x3c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	607b      	str	r3, [r7, #4]
 800cf8e:	e00a      	b.n	800cfa6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f002 f94f 	bl	800f23c <tcp_free_ooseq>
      return;
 800cf9e:	e005      	b.n	800cfac <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	607b      	str	r3, [r7, #4]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1f1      	bne.n	800cf90 <pbuf_free_ooseq+0x14>
    }
  }
}
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20008819 	.word	0x20008819
 800cfb8:	20008828 	.word	0x20008828

0800cfbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800cfc0:	4b03      	ldr	r3, [pc, #12]	@ (800cfd0 <pbuf_pool_is_empty+0x14>)
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cfc6:	bf00      	nop
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	20008819 	.word	0x20008819

0800cfd4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	4611      	mov	r1, r2
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	80fb      	strh	r3, [r7, #6]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	88fa      	ldrh	r2, [r7, #6]
 800cffa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	88ba      	ldrh	r2, [r7, #4]
 800d000:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d002:	8b3b      	ldrh	r3, [r7, #24]
 800d004:	b2da      	uxtb	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	7f3a      	ldrb	r2, [r7, #28]
 800d00e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2201      	movs	r2, #1
 800d014:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	73da      	strb	r2, [r3, #15]
}
 800d01c:	bf00      	nop
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b08c      	sub	sp, #48	@ 0x30
 800d02c:	af02      	add	r7, sp, #8
 800d02e:	4603      	mov	r3, r0
 800d030:	71fb      	strb	r3, [r7, #7]
 800d032:	460b      	mov	r3, r1
 800d034:	80bb      	strh	r3, [r7, #4]
 800d036:	4613      	mov	r3, r2
 800d038:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d03e:	887b      	ldrh	r3, [r7, #2]
 800d040:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d044:	d07f      	beq.n	800d146 <pbuf_alloc+0x11e>
 800d046:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d04a:	f300 80c8 	bgt.w	800d1de <pbuf_alloc+0x1b6>
 800d04e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d052:	d010      	beq.n	800d076 <pbuf_alloc+0x4e>
 800d054:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d058:	f300 80c1 	bgt.w	800d1de <pbuf_alloc+0x1b6>
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d002      	beq.n	800d066 <pbuf_alloc+0x3e>
 800d060:	2b41      	cmp	r3, #65	@ 0x41
 800d062:	f040 80bc 	bne.w	800d1de <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d066:	887a      	ldrh	r2, [r7, #2]
 800d068:	88bb      	ldrh	r3, [r7, #4]
 800d06a:	4619      	mov	r1, r3
 800d06c:	2000      	movs	r0, #0
 800d06e:	f000 f8d1 	bl	800d214 <pbuf_alloc_reference>
 800d072:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d074:	e0bd      	b.n	800d1f2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d076:	2300      	movs	r3, #0
 800d078:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d07a:	2300      	movs	r3, #0
 800d07c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d07e:	88bb      	ldrh	r3, [r7, #4]
 800d080:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d082:	2008      	movs	r0, #8
 800d084:	f7ff fbce 	bl	800c824 <memp_malloc>
 800d088:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d109      	bne.n	800d0a4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d090:	f7ff ff94 	bl	800cfbc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d09a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d09c:	f000 faa8 	bl	800d5f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	e0a7      	b.n	800d1f4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d0a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d0a6:	3303      	adds	r3, #3
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	f023 0303 	bic.w	r3, r3, #3
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	8b7a      	ldrh	r2, [r7, #26]
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	bf28      	it	cs
 800d0bc:	4613      	movcs	r3, r2
 800d0be:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d0c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d0c2:	3310      	adds	r3, #16
 800d0c4:	693a      	ldr	r2, [r7, #16]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	3303      	adds	r3, #3
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	89f9      	ldrh	r1, [r7, #14]
 800d0d2:	8b7a      	ldrh	r2, [r7, #26]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9301      	str	r3, [sp, #4]
 800d0d8:	887b      	ldrh	r3, [r7, #2]
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	4601      	mov	r1, r0
 800d0e0:	6938      	ldr	r0, [r7, #16]
 800d0e2:	f7ff ff77 	bl	800cfd4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d006      	beq.n	800d100 <pbuf_alloc+0xd8>
 800d0f2:	4b42      	ldr	r3, [pc, #264]	@ (800d1fc <pbuf_alloc+0x1d4>)
 800d0f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d0f8:	4941      	ldr	r1, [pc, #260]	@ (800d200 <pbuf_alloc+0x1d8>)
 800d0fa:	4842      	ldr	r0, [pc, #264]	@ (800d204 <pbuf_alloc+0x1dc>)
 800d0fc:	f009 fe88 	bl	8016e10 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d100:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d102:	3303      	adds	r3, #3
 800d104:	f023 0303 	bic.w	r3, r3, #3
 800d108:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d10c:	d106      	bne.n	800d11c <pbuf_alloc+0xf4>
 800d10e:	4b3b      	ldr	r3, [pc, #236]	@ (800d1fc <pbuf_alloc+0x1d4>)
 800d110:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d114:	493c      	ldr	r1, [pc, #240]	@ (800d208 <pbuf_alloc+0x1e0>)
 800d116:	483b      	ldr	r0, [pc, #236]	@ (800d204 <pbuf_alloc+0x1dc>)
 800d118:	f009 fe7a 	bl	8016e10 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d102      	bne.n	800d128 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	627b      	str	r3, [r7, #36]	@ 0x24
 800d126:	e002      	b.n	800d12e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	693a      	ldr	r2, [r7, #16]
 800d12c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d132:	8b7a      	ldrh	r2, [r7, #26]
 800d134:	89fb      	ldrh	r3, [r7, #14]
 800d136:	1ad3      	subs	r3, r2, r3
 800d138:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d13e:	8b7b      	ldrh	r3, [r7, #26]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d19e      	bne.n	800d082 <pbuf_alloc+0x5a>
      break;
 800d144:	e055      	b.n	800d1f2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d146:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d148:	3303      	adds	r3, #3
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	f023 0303 	bic.w	r3, r3, #3
 800d150:	b29a      	uxth	r2, r3
 800d152:	88bb      	ldrh	r3, [r7, #4]
 800d154:	3303      	adds	r3, #3
 800d156:	b29b      	uxth	r3, r3
 800d158:	f023 0303 	bic.w	r3, r3, #3
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	4413      	add	r3, r2
 800d160:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d162:	8b3b      	ldrh	r3, [r7, #24]
 800d164:	3310      	adds	r3, #16
 800d166:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d168:	8b3a      	ldrh	r2, [r7, #24]
 800d16a:	88bb      	ldrh	r3, [r7, #4]
 800d16c:	3303      	adds	r3, #3
 800d16e:	f023 0303 	bic.w	r3, r3, #3
 800d172:	429a      	cmp	r2, r3
 800d174:	d306      	bcc.n	800d184 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d176:	8afa      	ldrh	r2, [r7, #22]
 800d178:	88bb      	ldrh	r3, [r7, #4]
 800d17a:	3303      	adds	r3, #3
 800d17c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d180:	429a      	cmp	r2, r3
 800d182:	d201      	bcs.n	800d188 <pbuf_alloc+0x160>
        return NULL;
 800d184:	2300      	movs	r3, #0
 800d186:	e035      	b.n	800d1f4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d188:	8afb      	ldrh	r3, [r7, #22]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7ff f9ba 	bl	800c504 <mem_malloc>
 800d190:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <pbuf_alloc+0x174>
        return NULL;
 800d198:	2300      	movs	r3, #0
 800d19a:	e02b      	b.n	800d1f4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d19c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d19e:	3310      	adds	r3, #16
 800d1a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1a2:	4413      	add	r3, r2
 800d1a4:	3303      	adds	r3, #3
 800d1a6:	f023 0303 	bic.w	r3, r3, #3
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	88b9      	ldrh	r1, [r7, #4]
 800d1ae:	88ba      	ldrh	r2, [r7, #4]
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	9301      	str	r3, [sp, #4]
 800d1b4:	887b      	ldrh	r3, [r7, #2]
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4601      	mov	r1, r0
 800d1bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1be:	f7ff ff09 	bl	800cfd4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f003 0303 	and.w	r3, r3, #3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d010      	beq.n	800d1f0 <pbuf_alloc+0x1c8>
 800d1ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d1fc <pbuf_alloc+0x1d4>)
 800d1d0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d1d4:	490d      	ldr	r1, [pc, #52]	@ (800d20c <pbuf_alloc+0x1e4>)
 800d1d6:	480b      	ldr	r0, [pc, #44]	@ (800d204 <pbuf_alloc+0x1dc>)
 800d1d8:	f009 fe1a 	bl	8016e10 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d1dc:	e008      	b.n	800d1f0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d1de:	4b07      	ldr	r3, [pc, #28]	@ (800d1fc <pbuf_alloc+0x1d4>)
 800d1e0:	f240 1227 	movw	r2, #295	@ 0x127
 800d1e4:	490a      	ldr	r1, [pc, #40]	@ (800d210 <pbuf_alloc+0x1e8>)
 800d1e6:	4807      	ldr	r0, [pc, #28]	@ (800d204 <pbuf_alloc+0x1dc>)
 800d1e8:	f009 fe12 	bl	8016e10 <iprintf>
      return NULL;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e001      	b.n	800d1f4 <pbuf_alloc+0x1cc>
      break;
 800d1f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3728      	adds	r7, #40	@ 0x28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	08018204 	.word	0x08018204
 800d200:	08018234 	.word	0x08018234
 800d204:	08018264 	.word	0x08018264
 800d208:	0801828c 	.word	0x0801828c
 800d20c:	080182c0 	.word	0x080182c0
 800d210:	080182ec 	.word	0x080182ec

0800d214 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af02      	add	r7, sp, #8
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	807b      	strh	r3, [r7, #2]
 800d220:	4613      	mov	r3, r2
 800d222:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d224:	883b      	ldrh	r3, [r7, #0]
 800d226:	2b41      	cmp	r3, #65	@ 0x41
 800d228:	d009      	beq.n	800d23e <pbuf_alloc_reference+0x2a>
 800d22a:	883b      	ldrh	r3, [r7, #0]
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d006      	beq.n	800d23e <pbuf_alloc_reference+0x2a>
 800d230:	4b0f      	ldr	r3, [pc, #60]	@ (800d270 <pbuf_alloc_reference+0x5c>)
 800d232:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d236:	490f      	ldr	r1, [pc, #60]	@ (800d274 <pbuf_alloc_reference+0x60>)
 800d238:	480f      	ldr	r0, [pc, #60]	@ (800d278 <pbuf_alloc_reference+0x64>)
 800d23a:	f009 fde9 	bl	8016e10 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d23e:	2007      	movs	r0, #7
 800d240:	f7ff faf0 	bl	800c824 <memp_malloc>
 800d244:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d101      	bne.n	800d250 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d24c:	2300      	movs	r3, #0
 800d24e:	e00b      	b.n	800d268 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d250:	8879      	ldrh	r1, [r7, #2]
 800d252:	887a      	ldrh	r2, [r7, #2]
 800d254:	2300      	movs	r3, #0
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	883b      	ldrh	r3, [r7, #0]
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	460b      	mov	r3, r1
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f7ff feb7 	bl	800cfd4 <pbuf_init_alloced_pbuf>
  return p;
 800d266:	68fb      	ldr	r3, [r7, #12]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	08018204 	.word	0x08018204
 800d274:	08018308 	.word	0x08018308
 800d278:	08018264 	.word	0x08018264

0800d27c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b088      	sub	sp, #32
 800d280:	af02      	add	r7, sp, #8
 800d282:	607b      	str	r3, [r7, #4]
 800d284:	4603      	mov	r3, r0
 800d286:	73fb      	strb	r3, [r7, #15]
 800d288:	460b      	mov	r3, r1
 800d28a:	81bb      	strh	r3, [r7, #12]
 800d28c:	4613      	mov	r3, r2
 800d28e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d290:	7bfb      	ldrb	r3, [r7, #15]
 800d292:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d294:	8a7b      	ldrh	r3, [r7, #18]
 800d296:	3303      	adds	r3, #3
 800d298:	f023 0203 	bic.w	r2, r3, #3
 800d29c:	89bb      	ldrh	r3, [r7, #12]
 800d29e:	441a      	add	r2, r3
 800d2a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d901      	bls.n	800d2aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e018      	b.n	800d2dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d007      	beq.n	800d2c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d2b0:	8a7b      	ldrh	r3, [r7, #18]
 800d2b2:	3303      	adds	r3, #3
 800d2b4:	f023 0303 	bic.w	r3, r3, #3
 800d2b8:	6a3a      	ldr	r2, [r7, #32]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	617b      	str	r3, [r7, #20]
 800d2be:	e001      	b.n	800d2c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	89b9      	ldrh	r1, [r7, #12]
 800d2c8:	89ba      	ldrh	r2, [r7, #12]
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	9301      	str	r3, [sp, #4]
 800d2ce:	897b      	ldrh	r3, [r7, #10]
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	6979      	ldr	r1, [r7, #20]
 800d2d6:	f7ff fe7d 	bl	800cfd4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d2da:	687b      	ldr	r3, [r7, #4]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <pbuf_realloc+0x20>
 800d2f6:	4b3a      	ldr	r3, [pc, #232]	@ (800d3e0 <pbuf_realloc+0xfc>)
 800d2f8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d2fc:	4939      	ldr	r1, [pc, #228]	@ (800d3e4 <pbuf_realloc+0x100>)
 800d2fe:	483a      	ldr	r0, [pc, #232]	@ (800d3e8 <pbuf_realloc+0x104>)
 800d300:	f009 fd86 	bl	8016e10 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	891b      	ldrh	r3, [r3, #8]
 800d308:	887a      	ldrh	r2, [r7, #2]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d263      	bcs.n	800d3d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	891a      	ldrh	r2, [r3, #8]
 800d312:	887b      	ldrh	r3, [r7, #2]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d318:	887b      	ldrh	r3, [r7, #2]
 800d31a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d320:	e018      	b.n	800d354 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	895b      	ldrh	r3, [r3, #10]
 800d326:	897a      	ldrh	r2, [r7, #10]
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	891a      	ldrh	r2, [r3, #8]
 800d330:	893b      	ldrh	r3, [r7, #8]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	b29a      	uxth	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <pbuf_realloc+0x70>
 800d346:	4b26      	ldr	r3, [pc, #152]	@ (800d3e0 <pbuf_realloc+0xfc>)
 800d348:	f240 12af 	movw	r2, #431	@ 0x1af
 800d34c:	4927      	ldr	r1, [pc, #156]	@ (800d3ec <pbuf_realloc+0x108>)
 800d34e:	4826      	ldr	r0, [pc, #152]	@ (800d3e8 <pbuf_realloc+0x104>)
 800d350:	f009 fd5e 	bl	8016e10 <iprintf>
  while (rem_len > q->len) {
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	895b      	ldrh	r3, [r3, #10]
 800d358:	897a      	ldrh	r2, [r7, #10]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d8e1      	bhi.n	800d322 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	7b1b      	ldrb	r3, [r3, #12]
 800d362:	f003 030f 	and.w	r3, r3, #15
 800d366:	2b00      	cmp	r3, #0
 800d368:	d121      	bne.n	800d3ae <pbuf_realloc+0xca>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	895b      	ldrh	r3, [r3, #10]
 800d36e:	897a      	ldrh	r2, [r7, #10]
 800d370:	429a      	cmp	r2, r3
 800d372:	d01c      	beq.n	800d3ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	7b5b      	ldrb	r3, [r3, #13]
 800d378:	f003 0302 	and.w	r3, r3, #2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d116      	bne.n	800d3ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	b29a      	uxth	r2, r3
 800d38a:	897b      	ldrh	r3, [r7, #10]
 800d38c:	4413      	add	r3, r2
 800d38e:	b29b      	uxth	r3, r3
 800d390:	4619      	mov	r1, r3
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f7fe ffba 	bl	800c30c <mem_trim>
 800d398:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d106      	bne.n	800d3ae <pbuf_realloc+0xca>
 800d3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d3e0 <pbuf_realloc+0xfc>)
 800d3a2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d3a6:	4912      	ldr	r1, [pc, #72]	@ (800d3f0 <pbuf_realloc+0x10c>)
 800d3a8:	480f      	ldr	r0, [pc, #60]	@ (800d3e8 <pbuf_realloc+0x104>)
 800d3aa:	f009 fd31 	bl	8016e10 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	897a      	ldrh	r2, [r7, #10]
 800d3b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	895a      	ldrh	r2, [r3, #10]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d004      	beq.n	800d3ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f000 f911 	bl	800d5f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	e000      	b.n	800d3d8 <pbuf_realloc+0xf4>
    return;
 800d3d6:	bf00      	nop

}
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	08018204 	.word	0x08018204
 800d3e4:	0801831c 	.word	0x0801831c
 800d3e8:	08018264 	.word	0x08018264
 800d3ec:	08018334 	.word	0x08018334
 800d3f0:	0801834c 	.word	0x0801834c

0800d3f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b086      	sub	sp, #24
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	4613      	mov	r3, r2
 800d400:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d106      	bne.n	800d416 <pbuf_add_header_impl+0x22>
 800d408:	4b2b      	ldr	r3, [pc, #172]	@ (800d4b8 <pbuf_add_header_impl+0xc4>)
 800d40a:	f240 12df 	movw	r2, #479	@ 0x1df
 800d40e:	492b      	ldr	r1, [pc, #172]	@ (800d4bc <pbuf_add_header_impl+0xc8>)
 800d410:	482b      	ldr	r0, [pc, #172]	@ (800d4c0 <pbuf_add_header_impl+0xcc>)
 800d412:	f009 fcfd 	bl	8016e10 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d003      	beq.n	800d424 <pbuf_add_header_impl+0x30>
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d422:	d301      	bcc.n	800d428 <pbuf_add_header_impl+0x34>
    return 1;
 800d424:	2301      	movs	r3, #1
 800d426:	e043      	b.n	800d4b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <pbuf_add_header_impl+0x3e>
    return 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	e03e      	b.n	800d4b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	891a      	ldrh	r2, [r3, #8]
 800d43a:	8a7b      	ldrh	r3, [r7, #18]
 800d43c:	4413      	add	r3, r2
 800d43e:	b29b      	uxth	r3, r3
 800d440:	8a7a      	ldrh	r2, [r7, #18]
 800d442:	429a      	cmp	r2, r3
 800d444:	d901      	bls.n	800d44a <pbuf_add_header_impl+0x56>
    return 1;
 800d446:	2301      	movs	r3, #1
 800d448:	e032      	b.n	800d4b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	7b1b      	ldrb	r3, [r3, #12]
 800d44e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d450:	8a3b      	ldrh	r3, [r7, #16]
 800d452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00c      	beq.n	800d474 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	685a      	ldr	r2, [r3, #4]
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	425b      	negs	r3, r3
 800d462:	4413      	add	r3, r2
 800d464:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3310      	adds	r3, #16
 800d46a:	697a      	ldr	r2, [r7, #20]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d20d      	bcs.n	800d48c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d470:	2301      	movs	r3, #1
 800d472:	e01d      	b.n	800d4b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d474:	79fb      	ldrb	r3, [r7, #7]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d006      	beq.n	800d488 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	425b      	negs	r3, r3
 800d482:	4413      	add	r3, r2
 800d484:	617b      	str	r3, [r7, #20]
 800d486:	e001      	b.n	800d48c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d488:	2301      	movs	r3, #1
 800d48a:	e011      	b.n	800d4b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	895a      	ldrh	r2, [r3, #10]
 800d496:	8a7b      	ldrh	r3, [r7, #18]
 800d498:	4413      	add	r3, r2
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	891a      	ldrh	r2, [r3, #8]
 800d4a4:	8a7b      	ldrh	r3, [r7, #18]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	811a      	strh	r2, [r3, #8]


  return 0;
 800d4ae:	2300      	movs	r3, #0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3718      	adds	r7, #24
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	08018204 	.word	0x08018204
 800d4bc:	08018368 	.word	0x08018368
 800d4c0:	08018264 	.word	0x08018264

0800d4c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	6839      	ldr	r1, [r7, #0]
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f7ff ff8e 	bl	800d3f4 <pbuf_add_header_impl>
 800d4d8:	4603      	mov	r3, r0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d106      	bne.n	800d502 <pbuf_remove_header+0x1e>
 800d4f4:	4b20      	ldr	r3, [pc, #128]	@ (800d578 <pbuf_remove_header+0x94>)
 800d4f6:	f240 224b 	movw	r2, #587	@ 0x24b
 800d4fa:	4920      	ldr	r1, [pc, #128]	@ (800d57c <pbuf_remove_header+0x98>)
 800d4fc:	4820      	ldr	r0, [pc, #128]	@ (800d580 <pbuf_remove_header+0x9c>)
 800d4fe:	f009 fc87 	bl	8016e10 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d003      	beq.n	800d510 <pbuf_remove_header+0x2c>
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d50e:	d301      	bcc.n	800d514 <pbuf_remove_header+0x30>
    return 1;
 800d510:	2301      	movs	r3, #1
 800d512:	e02c      	b.n	800d56e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d101      	bne.n	800d51e <pbuf_remove_header+0x3a>
    return 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	e027      	b.n	800d56e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	895b      	ldrh	r3, [r3, #10]
 800d526:	89fa      	ldrh	r2, [r7, #14]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d908      	bls.n	800d53e <pbuf_remove_header+0x5a>
 800d52c:	4b12      	ldr	r3, [pc, #72]	@ (800d578 <pbuf_remove_header+0x94>)
 800d52e:	f240 2255 	movw	r2, #597	@ 0x255
 800d532:	4914      	ldr	r1, [pc, #80]	@ (800d584 <pbuf_remove_header+0xa0>)
 800d534:	4812      	ldr	r0, [pc, #72]	@ (800d580 <pbuf_remove_header+0x9c>)
 800d536:	f009 fc6b 	bl	8016e10 <iprintf>
 800d53a:	2301      	movs	r3, #1
 800d53c:	e017      	b.n	800d56e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	441a      	add	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	895a      	ldrh	r2, [r3, #10]
 800d554:	89fb      	ldrh	r3, [r7, #14]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	b29a      	uxth	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	891a      	ldrh	r2, [r3, #8]
 800d562:	89fb      	ldrh	r3, [r7, #14]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	b29a      	uxth	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	08018204 	.word	0x08018204
 800d57c:	08018368 	.word	0x08018368
 800d580:	08018264 	.word	0x08018264
 800d584:	08018374 	.word	0x08018374

0800d588 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	807b      	strh	r3, [r7, #2]
 800d594:	4613      	mov	r3, r2
 800d596:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	da08      	bge.n	800d5b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d5a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5a4:	425b      	negs	r3, r3
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff ff9b 	bl	800d4e4 <pbuf_remove_header>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	e007      	b.n	800d5c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d5b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5b6:	787a      	ldrb	r2, [r7, #1]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff ff1a 	bl	800d3f4 <pbuf_add_header_impl>
 800d5c0:	4603      	mov	r3, r0
  }
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d5d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7ff ffd2 	bl	800d588 <pbuf_header_impl>
 800d5e4:	4603      	mov	r3, r0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d10b      	bne.n	800d616 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d106      	bne.n	800d612 <pbuf_free+0x22>
 800d604:	4b38      	ldr	r3, [pc, #224]	@ (800d6e8 <pbuf_free+0xf8>)
 800d606:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d60a:	4938      	ldr	r1, [pc, #224]	@ (800d6ec <pbuf_free+0xfc>)
 800d60c:	4838      	ldr	r0, [pc, #224]	@ (800d6f0 <pbuf_free+0x100>)
 800d60e:	f009 fbff 	bl	8016e10 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d612:	2300      	movs	r3, #0
 800d614:	e063      	b.n	800d6de <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d61a:	e05c      	b.n	800d6d6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	7b9b      	ldrb	r3, [r3, #14]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d106      	bne.n	800d632 <pbuf_free+0x42>
 800d624:	4b30      	ldr	r3, [pc, #192]	@ (800d6e8 <pbuf_free+0xf8>)
 800d626:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d62a:	4932      	ldr	r1, [pc, #200]	@ (800d6f4 <pbuf_free+0x104>)
 800d62c:	4830      	ldr	r0, [pc, #192]	@ (800d6f0 <pbuf_free+0x100>)
 800d62e:	f009 fbef 	bl	8016e10 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	7b9b      	ldrb	r3, [r3, #14]
 800d636:	3b01      	subs	r3, #1
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	739a      	strb	r2, [r3, #14]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	7b9b      	ldrb	r3, [r3, #14]
 800d642:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d644:	7dbb      	ldrb	r3, [r7, #22]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d143      	bne.n	800d6d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	7b1b      	ldrb	r3, [r3, #12]
 800d654:	f003 030f 	and.w	r3, r3, #15
 800d658:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7b5b      	ldrb	r3, [r3, #13]
 800d65e:	f003 0302 	and.w	r3, r3, #2
 800d662:	2b00      	cmp	r3, #0
 800d664:	d011      	beq.n	800d68a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d106      	bne.n	800d680 <pbuf_free+0x90>
 800d672:	4b1d      	ldr	r3, [pc, #116]	@ (800d6e8 <pbuf_free+0xf8>)
 800d674:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d678:	491f      	ldr	r1, [pc, #124]	@ (800d6f8 <pbuf_free+0x108>)
 800d67a:	481d      	ldr	r0, [pc, #116]	@ (800d6f0 <pbuf_free+0x100>)
 800d67c:	f009 fbc8 	bl	8016e10 <iprintf>
        pc->custom_free_function(p);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	4798      	blx	r3
 800d688:	e01d      	b.n	800d6c6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d104      	bne.n	800d69a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d690:	6879      	ldr	r1, [r7, #4]
 800d692:	2008      	movs	r0, #8
 800d694:	f7ff f936 	bl	800c904 <memp_free>
 800d698:	e015      	b.n	800d6c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d104      	bne.n	800d6aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d6a0:	6879      	ldr	r1, [r7, #4]
 800d6a2:	2007      	movs	r0, #7
 800d6a4:	f7ff f92e 	bl	800c904 <memp_free>
 800d6a8:	e00d      	b.n	800d6c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d6aa:	7bfb      	ldrb	r3, [r7, #15]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d103      	bne.n	800d6b8 <pbuf_free+0xc8>
          mem_free(p);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7fe fdc1 	bl	800c238 <mem_free>
 800d6b6:	e006      	b.n	800d6c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800d6e8 <pbuf_free+0xf8>)
 800d6ba:	f240 320f 	movw	r2, #783	@ 0x30f
 800d6be:	490f      	ldr	r1, [pc, #60]	@ (800d6fc <pbuf_free+0x10c>)
 800d6c0:	480b      	ldr	r0, [pc, #44]	@ (800d6f0 <pbuf_free+0x100>)
 800d6c2:	f009 fba5 	bl	8016e10 <iprintf>
        }
      }
      count++;
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	607b      	str	r3, [r7, #4]
 800d6d0:	e001      	b.n	800d6d6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d19f      	bne.n	800d61c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3718      	adds	r7, #24
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	08018204 	.word	0x08018204
 800d6ec:	08018368 	.word	0x08018368
 800d6f0:	08018264 	.word	0x08018264
 800d6f4:	08018394 	.word	0x08018394
 800d6f8:	080183ac 	.word	0x080183ac
 800d6fc:	080183d0 	.word	0x080183d0

0800d700 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d70c:	e005      	b.n	800d71a <pbuf_clen+0x1a>
    ++len;
 800d70e:	89fb      	ldrh	r3, [r7, #14]
 800d710:	3301      	adds	r3, #1
 800d712:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f6      	bne.n	800d70e <pbuf_clen+0xe>
  }
  return len;
 800d720:	89fb      	ldrh	r3, [r7, #14]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
	...

0800d730 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d010      	beq.n	800d760 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	7b9b      	ldrb	r3, [r3, #14]
 800d742:	3301      	adds	r3, #1
 800d744:	b2da      	uxtb	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	7b9b      	ldrb	r3, [r3, #14]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <pbuf_ref+0x30>
 800d752:	4b05      	ldr	r3, [pc, #20]	@ (800d768 <pbuf_ref+0x38>)
 800d754:	f240 3242 	movw	r2, #834	@ 0x342
 800d758:	4904      	ldr	r1, [pc, #16]	@ (800d76c <pbuf_ref+0x3c>)
 800d75a:	4805      	ldr	r0, [pc, #20]	@ (800d770 <pbuf_ref+0x40>)
 800d75c:	f009 fb58 	bl	8016e10 <iprintf>
  }
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	08018204 	.word	0x08018204
 800d76c:	080183e4 	.word	0x080183e4
 800d770:	08018264 	.word	0x08018264

0800d774 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d002      	beq.n	800d78a <pbuf_cat+0x16>
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d107      	bne.n	800d79a <pbuf_cat+0x26>
 800d78a:	4b20      	ldr	r3, [pc, #128]	@ (800d80c <pbuf_cat+0x98>)
 800d78c:	f240 3259 	movw	r2, #857	@ 0x359
 800d790:	491f      	ldr	r1, [pc, #124]	@ (800d810 <pbuf_cat+0x9c>)
 800d792:	4820      	ldr	r0, [pc, #128]	@ (800d814 <pbuf_cat+0xa0>)
 800d794:	f009 fb3c 	bl	8016e10 <iprintf>
 800d798:	e034      	b.n	800d804 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	e00a      	b.n	800d7b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	891a      	ldrh	r2, [r3, #8]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	891b      	ldrh	r3, [r3, #8]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	60fb      	str	r3, [r7, #12]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1f0      	bne.n	800d7a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	891a      	ldrh	r2, [r3, #8]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	895b      	ldrh	r3, [r3, #10]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d006      	beq.n	800d7d8 <pbuf_cat+0x64>
 800d7ca:	4b10      	ldr	r3, [pc, #64]	@ (800d80c <pbuf_cat+0x98>)
 800d7cc:	f240 3262 	movw	r2, #866	@ 0x362
 800d7d0:	4911      	ldr	r1, [pc, #68]	@ (800d818 <pbuf_cat+0xa4>)
 800d7d2:	4810      	ldr	r0, [pc, #64]	@ (800d814 <pbuf_cat+0xa0>)
 800d7d4:	f009 fb1c 	bl	8016e10 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d006      	beq.n	800d7ee <pbuf_cat+0x7a>
 800d7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d80c <pbuf_cat+0x98>)
 800d7e2:	f240 3263 	movw	r2, #867	@ 0x363
 800d7e6:	490d      	ldr	r1, [pc, #52]	@ (800d81c <pbuf_cat+0xa8>)
 800d7e8:	480a      	ldr	r0, [pc, #40]	@ (800d814 <pbuf_cat+0xa0>)
 800d7ea:	f009 fb11 	bl	8016e10 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	891a      	ldrh	r2, [r3, #8]
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	891b      	ldrh	r3, [r3, #8]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	08018204 	.word	0x08018204
 800d810:	080183f8 	.word	0x080183f8
 800d814:	08018264 	.word	0x08018264
 800d818:	08018430 	.word	0x08018430
 800d81c:	08018460 	.word	0x08018460

0800d820 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff ffa1 	bl	800d774 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d832:	6838      	ldr	r0, [r7, #0]
 800d834:	f7ff ff7c 	bl	800d730 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d838:	bf00      	nop
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]
 800d84e:	2300      	movs	r3, #0
 800d850:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d008      	beq.n	800d86a <pbuf_copy+0x2a>
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d005      	beq.n	800d86a <pbuf_copy+0x2a>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	891a      	ldrh	r2, [r3, #8]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	891b      	ldrh	r3, [r3, #8]
 800d866:	429a      	cmp	r2, r3
 800d868:	d209      	bcs.n	800d87e <pbuf_copy+0x3e>
 800d86a:	4b57      	ldr	r3, [pc, #348]	@ (800d9c8 <pbuf_copy+0x188>)
 800d86c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d870:	4956      	ldr	r1, [pc, #344]	@ (800d9cc <pbuf_copy+0x18c>)
 800d872:	4857      	ldr	r0, [pc, #348]	@ (800d9d0 <pbuf_copy+0x190>)
 800d874:	f009 facc 	bl	8016e10 <iprintf>
 800d878:	f06f 030f 	mvn.w	r3, #15
 800d87c:	e09f      	b.n	800d9be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	895b      	ldrh	r3, [r3, #10]
 800d882:	461a      	mov	r2, r3
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	1ad2      	subs	r2, r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	895b      	ldrh	r3, [r3, #10]
 800d88c:	4619      	mov	r1, r3
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	1acb      	subs	r3, r1, r3
 800d892:	429a      	cmp	r2, r3
 800d894:	d306      	bcc.n	800d8a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	895b      	ldrh	r3, [r3, #10]
 800d89a:	461a      	mov	r2, r3
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	60fb      	str	r3, [r7, #12]
 800d8a2:	e005      	b.n	800d8b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	895b      	ldrh	r3, [r3, #10]
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	18d0      	adds	r0, r2, r3
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	4413      	add	r3, r2
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	f009 fb7f 	bl	8016fc6 <memcpy>
    offset_to += len;
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d8d0:	693a      	ldr	r2, [r7, #16]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	895b      	ldrh	r3, [r3, #10]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d906      	bls.n	800d8f2 <pbuf_copy+0xb2>
 800d8e4:	4b38      	ldr	r3, [pc, #224]	@ (800d9c8 <pbuf_copy+0x188>)
 800d8e6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d8ea:	493a      	ldr	r1, [pc, #232]	@ (800d9d4 <pbuf_copy+0x194>)
 800d8ec:	4838      	ldr	r0, [pc, #224]	@ (800d9d0 <pbuf_copy+0x190>)
 800d8ee:	f009 fa8f 	bl	8016e10 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	895b      	ldrh	r3, [r3, #10]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d906      	bls.n	800d90c <pbuf_copy+0xcc>
 800d8fe:	4b32      	ldr	r3, [pc, #200]	@ (800d9c8 <pbuf_copy+0x188>)
 800d900:	f240 32da 	movw	r2, #986	@ 0x3da
 800d904:	4934      	ldr	r1, [pc, #208]	@ (800d9d8 <pbuf_copy+0x198>)
 800d906:	4832      	ldr	r0, [pc, #200]	@ (800d9d0 <pbuf_copy+0x190>)
 800d908:	f009 fa82 	bl	8016e10 <iprintf>
    if (offset_from >= p_from->len) {
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	895b      	ldrh	r3, [r3, #10]
 800d910:	461a      	mov	r2, r3
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	4293      	cmp	r3, r2
 800d916:	d304      	bcc.n	800d922 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d918:	2300      	movs	r3, #0
 800d91a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	895b      	ldrh	r3, [r3, #10]
 800d926:	461a      	mov	r2, r3
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d114      	bne.n	800d958 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10c      	bne.n	800d958 <pbuf_copy+0x118>
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d009      	beq.n	800d958 <pbuf_copy+0x118>
 800d944:	4b20      	ldr	r3, [pc, #128]	@ (800d9c8 <pbuf_copy+0x188>)
 800d946:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d94a:	4924      	ldr	r1, [pc, #144]	@ (800d9dc <pbuf_copy+0x19c>)
 800d94c:	4820      	ldr	r0, [pc, #128]	@ (800d9d0 <pbuf_copy+0x190>)
 800d94e:	f009 fa5f 	bl	8016e10 <iprintf>
 800d952:	f06f 030f 	mvn.w	r3, #15
 800d956:	e032      	b.n	800d9be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d013      	beq.n	800d986 <pbuf_copy+0x146>
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	895a      	ldrh	r2, [r3, #10]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	891b      	ldrh	r3, [r3, #8]
 800d966:	429a      	cmp	r2, r3
 800d968:	d10d      	bne.n	800d986 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d009      	beq.n	800d986 <pbuf_copy+0x146>
 800d972:	4b15      	ldr	r3, [pc, #84]	@ (800d9c8 <pbuf_copy+0x188>)
 800d974:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d978:	4919      	ldr	r1, [pc, #100]	@ (800d9e0 <pbuf_copy+0x1a0>)
 800d97a:	4815      	ldr	r0, [pc, #84]	@ (800d9d0 <pbuf_copy+0x190>)
 800d97c:	f009 fa48 	bl	8016e10 <iprintf>
 800d980:	f06f 0305 	mvn.w	r3, #5
 800d984:	e01b      	b.n	800d9be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d013      	beq.n	800d9b4 <pbuf_copy+0x174>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	895a      	ldrh	r2, [r3, #10]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	891b      	ldrh	r3, [r3, #8]
 800d994:	429a      	cmp	r2, r3
 800d996:	d10d      	bne.n	800d9b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d009      	beq.n	800d9b4 <pbuf_copy+0x174>
 800d9a0:	4b09      	ldr	r3, [pc, #36]	@ (800d9c8 <pbuf_copy+0x188>)
 800d9a2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d9a6:	490e      	ldr	r1, [pc, #56]	@ (800d9e0 <pbuf_copy+0x1a0>)
 800d9a8:	4809      	ldr	r0, [pc, #36]	@ (800d9d0 <pbuf_copy+0x190>)
 800d9aa:	f009 fa31 	bl	8016e10 <iprintf>
 800d9ae:	f06f 0305 	mvn.w	r3, #5
 800d9b2:	e004      	b.n	800d9be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f47f af61 	bne.w	800d87e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3718      	adds	r7, #24
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	08018204 	.word	0x08018204
 800d9cc:	080184ac 	.word	0x080184ac
 800d9d0:	08018264 	.word	0x08018264
 800d9d4:	080184dc 	.word	0x080184dc
 800d9d8:	080184f4 	.word	0x080184f4
 800d9dc:	08018510 	.word	0x08018510
 800d9e0:	08018520 	.word	0x08018520

0800d9e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b088      	sub	sp, #32
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	80fb      	strh	r3, [r7, #6]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d108      	bne.n	800da1a <pbuf_copy_partial+0x36>
 800da08:	4b2b      	ldr	r3, [pc, #172]	@ (800dab8 <pbuf_copy_partial+0xd4>)
 800da0a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800da0e:	492b      	ldr	r1, [pc, #172]	@ (800dabc <pbuf_copy_partial+0xd8>)
 800da10:	482b      	ldr	r0, [pc, #172]	@ (800dac0 <pbuf_copy_partial+0xdc>)
 800da12:	f009 f9fd 	bl	8016e10 <iprintf>
 800da16:	2300      	movs	r3, #0
 800da18:	e04a      	b.n	800dab0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d108      	bne.n	800da32 <pbuf_copy_partial+0x4e>
 800da20:	4b25      	ldr	r3, [pc, #148]	@ (800dab8 <pbuf_copy_partial+0xd4>)
 800da22:	f240 420b 	movw	r2, #1035	@ 0x40b
 800da26:	4927      	ldr	r1, [pc, #156]	@ (800dac4 <pbuf_copy_partial+0xe0>)
 800da28:	4825      	ldr	r0, [pc, #148]	@ (800dac0 <pbuf_copy_partial+0xdc>)
 800da2a:	f009 f9f1 	bl	8016e10 <iprintf>
 800da2e:	2300      	movs	r3, #0
 800da30:	e03e      	b.n	800dab0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	61fb      	str	r3, [r7, #28]
 800da36:	e034      	b.n	800daa2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800da38:	88bb      	ldrh	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00a      	beq.n	800da54 <pbuf_copy_partial+0x70>
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	895b      	ldrh	r3, [r3, #10]
 800da42:	88ba      	ldrh	r2, [r7, #4]
 800da44:	429a      	cmp	r2, r3
 800da46:	d305      	bcc.n	800da54 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	895b      	ldrh	r3, [r3, #10]
 800da4c:	88ba      	ldrh	r2, [r7, #4]
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	80bb      	strh	r3, [r7, #4]
 800da52:	e023      	b.n	800da9c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	895a      	ldrh	r2, [r3, #10]
 800da58:	88bb      	ldrh	r3, [r7, #4]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800da5e:	8b3a      	ldrh	r2, [r7, #24]
 800da60:	88fb      	ldrh	r3, [r7, #6]
 800da62:	429a      	cmp	r2, r3
 800da64:	d901      	bls.n	800da6a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800da66:	88fb      	ldrh	r3, [r7, #6]
 800da68:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800da6a:	8b7b      	ldrh	r3, [r7, #26]
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	18d0      	adds	r0, r2, r3
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	685a      	ldr	r2, [r3, #4]
 800da74:	88bb      	ldrh	r3, [r7, #4]
 800da76:	4413      	add	r3, r2
 800da78:	8b3a      	ldrh	r2, [r7, #24]
 800da7a:	4619      	mov	r1, r3
 800da7c:	f009 faa3 	bl	8016fc6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800da80:	8afa      	ldrh	r2, [r7, #22]
 800da82:	8b3b      	ldrh	r3, [r7, #24]
 800da84:	4413      	add	r3, r2
 800da86:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800da88:	8b7a      	ldrh	r2, [r7, #26]
 800da8a:	8b3b      	ldrh	r3, [r7, #24]
 800da8c:	4413      	add	r3, r2
 800da8e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800da90:	88fa      	ldrh	r2, [r7, #6]
 800da92:	8b3b      	ldrh	r3, [r7, #24]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800da98:	2300      	movs	r3, #0
 800da9a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	61fb      	str	r3, [r7, #28]
 800daa2:	88fb      	ldrh	r3, [r7, #6]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d002      	beq.n	800daae <pbuf_copy_partial+0xca>
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1c4      	bne.n	800da38 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800daae:	8afb      	ldrh	r3, [r7, #22]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3720      	adds	r7, #32
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	08018204 	.word	0x08018204
 800dabc:	0801854c 	.word	0x0801854c
 800dac0:	08018264 	.word	0x08018264
 800dac4:	0801856c 	.word	0x0801856c

0800dac8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	4603      	mov	r3, r0
 800dad0:	603a      	str	r2, [r7, #0]
 800dad2:	71fb      	strb	r3, [r7, #7]
 800dad4:	460b      	mov	r3, r1
 800dad6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	8919      	ldrh	r1, [r3, #8]
 800dadc:	88ba      	ldrh	r2, [r7, #4]
 800dade:	79fb      	ldrb	r3, [r7, #7]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff faa1 	bl	800d028 <pbuf_alloc>
 800dae6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <pbuf_clone+0x2a>
    return NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	e011      	b.n	800db16 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f7ff fea3 	bl	800d840 <pbuf_copy>
 800dafa:	4603      	mov	r3, r0
 800dafc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dafe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d006      	beq.n	800db14 <pbuf_clone+0x4c>
 800db06:	4b06      	ldr	r3, [pc, #24]	@ (800db20 <pbuf_clone+0x58>)
 800db08:	f240 5224 	movw	r2, #1316	@ 0x524
 800db0c:	4905      	ldr	r1, [pc, #20]	@ (800db24 <pbuf_clone+0x5c>)
 800db0e:	4806      	ldr	r0, [pc, #24]	@ (800db28 <pbuf_clone+0x60>)
 800db10:	f009 f97e 	bl	8016e10 <iprintf>
  return q;
 800db14:	68fb      	ldr	r3, [r7, #12]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	08018204 	.word	0x08018204
 800db24:	08018678 	.word	0x08018678
 800db28:	08018264 	.word	0x08018264

0800db2c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800db30:	f009 f86e 	bl	8016c10 <rand>
 800db34:	4603      	mov	r3, r0
 800db36:	b29b      	uxth	r3, r3
 800db38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800db42:	b29a      	uxth	r2, r3
 800db44:	4b01      	ldr	r3, [pc, #4]	@ (800db4c <tcp_init+0x20>)
 800db46:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800db48:	bf00      	nop
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	20000020 	.word	0x20000020

0800db50 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7d1b      	ldrb	r3, [r3, #20]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d105      	bne.n	800db6c <tcp_free+0x1c>
 800db60:	4b06      	ldr	r3, [pc, #24]	@ (800db7c <tcp_free+0x2c>)
 800db62:	22d4      	movs	r2, #212	@ 0xd4
 800db64:	4906      	ldr	r1, [pc, #24]	@ (800db80 <tcp_free+0x30>)
 800db66:	4807      	ldr	r0, [pc, #28]	@ (800db84 <tcp_free+0x34>)
 800db68:	f009 f952 	bl	8016e10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	2001      	movs	r0, #1
 800db70:	f7fe fec8 	bl	800c904 <memp_free>
}
 800db74:	bf00      	nop
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	08018704 	.word	0x08018704
 800db80:	08018734 	.word	0x08018734
 800db84:	08018748 	.word	0x08018748

0800db88 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	7d1b      	ldrb	r3, [r3, #20]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d105      	bne.n	800dba4 <tcp_free_listen+0x1c>
 800db98:	4b06      	ldr	r3, [pc, #24]	@ (800dbb4 <tcp_free_listen+0x2c>)
 800db9a:	22df      	movs	r2, #223	@ 0xdf
 800db9c:	4906      	ldr	r1, [pc, #24]	@ (800dbb8 <tcp_free_listen+0x30>)
 800db9e:	4807      	ldr	r0, [pc, #28]	@ (800dbbc <tcp_free_listen+0x34>)
 800dba0:	f009 f936 	bl	8016e10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dba4:	6879      	ldr	r1, [r7, #4]
 800dba6:	2002      	movs	r0, #2
 800dba8:	f7fe feac 	bl	800c904 <memp_free>
}
 800dbac:	bf00      	nop
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	08018704 	.word	0x08018704
 800dbb8:	08018770 	.word	0x08018770
 800dbbc:	08018748 	.word	0x08018748

0800dbc0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dbc4:	f000 fea4 	bl	800e910 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dbc8:	4b07      	ldr	r3, [pc, #28]	@ (800dbe8 <tcp_tmr+0x28>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	4b05      	ldr	r3, [pc, #20]	@ (800dbe8 <tcp_tmr+0x28>)
 800dbd2:	701a      	strb	r2, [r3, #0]
 800dbd4:	4b04      	ldr	r3, [pc, #16]	@ (800dbe8 <tcp_tmr+0x28>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	f003 0301 	and.w	r3, r3, #1
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dbe0:	f000 fb54 	bl	800e28c <tcp_slowtmr>
  }
}
 800dbe4:	bf00      	nop
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20008831 	.word	0x20008831

0800dbec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d105      	bne.n	800dc08 <tcp_remove_listener+0x1c>
 800dbfc:	4b0d      	ldr	r3, [pc, #52]	@ (800dc34 <tcp_remove_listener+0x48>)
 800dbfe:	22ff      	movs	r2, #255	@ 0xff
 800dc00:	490d      	ldr	r1, [pc, #52]	@ (800dc38 <tcp_remove_listener+0x4c>)
 800dc02:	480e      	ldr	r0, [pc, #56]	@ (800dc3c <tcp_remove_listener+0x50>)
 800dc04:	f009 f904 	bl	8016e10 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60fb      	str	r3, [r7, #12]
 800dc0c:	e00a      	b.n	800dc24 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d102      	bne.n	800dc1e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	60fb      	str	r3, [r7, #12]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1f1      	bne.n	800dc0e <tcp_remove_listener+0x22>
    }
  }
}
 800dc2a:	bf00      	nop
 800dc2c:	bf00      	nop
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	08018704 	.word	0x08018704
 800dc38:	0801878c 	.word	0x0801878c
 800dc3c:	08018748 	.word	0x08018748

0800dc40 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d106      	bne.n	800dc5c <tcp_listen_closed+0x1c>
 800dc4e:	4b14      	ldr	r3, [pc, #80]	@ (800dca0 <tcp_listen_closed+0x60>)
 800dc50:	f240 1211 	movw	r2, #273	@ 0x111
 800dc54:	4913      	ldr	r1, [pc, #76]	@ (800dca4 <tcp_listen_closed+0x64>)
 800dc56:	4814      	ldr	r0, [pc, #80]	@ (800dca8 <tcp_listen_closed+0x68>)
 800dc58:	f009 f8da 	bl	8016e10 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	7d1b      	ldrb	r3, [r3, #20]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d006      	beq.n	800dc72 <tcp_listen_closed+0x32>
 800dc64:	4b0e      	ldr	r3, [pc, #56]	@ (800dca0 <tcp_listen_closed+0x60>)
 800dc66:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800dc6a:	4910      	ldr	r1, [pc, #64]	@ (800dcac <tcp_listen_closed+0x6c>)
 800dc6c:	480e      	ldr	r0, [pc, #56]	@ (800dca8 <tcp_listen_closed+0x68>)
 800dc6e:	f009 f8cf 	bl	8016e10 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc72:	2301      	movs	r3, #1
 800dc74:	60fb      	str	r3, [r7, #12]
 800dc76:	e00b      	b.n	800dc90 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dc78:	4a0d      	ldr	r2, [pc, #52]	@ (800dcb0 <tcp_listen_closed+0x70>)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6879      	ldr	r1, [r7, #4]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7ff ffb1 	bl	800dbec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	60fb      	str	r3, [r7, #12]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b03      	cmp	r3, #3
 800dc94:	d9f0      	bls.n	800dc78 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dc96:	bf00      	nop
 800dc98:	bf00      	nop
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	08018704 	.word	0x08018704
 800dca4:	080187b4 	.word	0x080187b4
 800dca8:	08018748 	.word	0x08018748
 800dcac:	080187c0 	.word	0x080187c0
 800dcb0:	0801a6ec 	.word	0x0801a6ec

0800dcb4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dcb4:	b5b0      	push	{r4, r5, r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af04      	add	r7, sp, #16
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d106      	bne.n	800dcd4 <tcp_close_shutdown+0x20>
 800dcc6:	4b63      	ldr	r3, [pc, #396]	@ (800de54 <tcp_close_shutdown+0x1a0>)
 800dcc8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800dccc:	4962      	ldr	r1, [pc, #392]	@ (800de58 <tcp_close_shutdown+0x1a4>)
 800dcce:	4863      	ldr	r0, [pc, #396]	@ (800de5c <tcp_close_shutdown+0x1a8>)
 800dcd0:	f009 f89e 	bl	8016e10 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dcd4:	78fb      	ldrb	r3, [r7, #3]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d066      	beq.n	800dda8 <tcp_close_shutdown+0xf4>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	7d1b      	ldrb	r3, [r3, #20]
 800dcde:	2b04      	cmp	r3, #4
 800dce0:	d003      	beq.n	800dcea <tcp_close_shutdown+0x36>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	7d1b      	ldrb	r3, [r3, #20]
 800dce6:	2b07      	cmp	r3, #7
 800dce8:	d15e      	bne.n	800dda8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d104      	bne.n	800dcfc <tcp_close_shutdown+0x48>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcf6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dcfa:	d055      	beq.n	800dda8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	8b5b      	ldrh	r3, [r3, #26]
 800dd00:	f003 0310 	and.w	r3, r3, #16
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d106      	bne.n	800dd16 <tcp_close_shutdown+0x62>
 800dd08:	4b52      	ldr	r3, [pc, #328]	@ (800de54 <tcp_close_shutdown+0x1a0>)
 800dd0a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800dd0e:	4954      	ldr	r1, [pc, #336]	@ (800de60 <tcp_close_shutdown+0x1ac>)
 800dd10:	4852      	ldr	r0, [pc, #328]	@ (800de5c <tcp_close_shutdown+0x1a8>)
 800dd12:	f009 f87d 	bl	8016e10 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800dd1e:	687d      	ldr	r5, [r7, #4]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	3304      	adds	r3, #4
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	8ad2      	ldrh	r2, [r2, #22]
 800dd28:	6879      	ldr	r1, [r7, #4]
 800dd2a:	8b09      	ldrh	r1, [r1, #24]
 800dd2c:	9102      	str	r1, [sp, #8]
 800dd2e:	9201      	str	r2, [sp, #4]
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	462b      	mov	r3, r5
 800dd34:	4622      	mov	r2, r4
 800dd36:	4601      	mov	r1, r0
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f004 fe8d 	bl	8012a58 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f001 f8c8 	bl	800eed4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dd44:	4b47      	ldr	r3, [pc, #284]	@ (800de64 <tcp_close_shutdown+0x1b0>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d105      	bne.n	800dd5a <tcp_close_shutdown+0xa6>
 800dd4e:	4b45      	ldr	r3, [pc, #276]	@ (800de64 <tcp_close_shutdown+0x1b0>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	4a43      	ldr	r2, [pc, #268]	@ (800de64 <tcp_close_shutdown+0x1b0>)
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	e013      	b.n	800dd82 <tcp_close_shutdown+0xce>
 800dd5a:	4b42      	ldr	r3, [pc, #264]	@ (800de64 <tcp_close_shutdown+0x1b0>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	e00c      	b.n	800dd7c <tcp_close_shutdown+0xc8>
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d104      	bne.n	800dd76 <tcp_close_shutdown+0xc2>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	68da      	ldr	r2, [r3, #12]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	60da      	str	r2, [r3, #12]
 800dd74:	e005      	b.n	800dd82 <tcp_close_shutdown+0xce>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1ef      	bne.n	800dd62 <tcp_close_shutdown+0xae>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	60da      	str	r2, [r3, #12]
 800dd88:	4b37      	ldr	r3, [pc, #220]	@ (800de68 <tcp_close_shutdown+0x1b4>)
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dd8e:	4b37      	ldr	r3, [pc, #220]	@ (800de6c <tcp_close_shutdown+0x1b8>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d102      	bne.n	800dd9e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dd98:	f003 fd5c 	bl	8011854 <tcp_trigger_input_pcb_close>
 800dd9c:	e002      	b.n	800dda4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7ff fed6 	bl	800db50 <tcp_free>
      }
      return ERR_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	e050      	b.n	800de4a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	7d1b      	ldrb	r3, [r3, #20]
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d03b      	beq.n	800de28 <tcp_close_shutdown+0x174>
 800ddb0:	2b02      	cmp	r3, #2
 800ddb2:	dc44      	bgt.n	800de3e <tcp_close_shutdown+0x18a>
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <tcp_close_shutdown+0x10a>
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d02a      	beq.n	800de12 <tcp_close_shutdown+0x15e>
 800ddbc:	e03f      	b.n	800de3e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	8adb      	ldrh	r3, [r3, #22]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d021      	beq.n	800de0a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ddc6:	4b2a      	ldr	r3, [pc, #168]	@ (800de70 <tcp_close_shutdown+0x1bc>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d105      	bne.n	800dddc <tcp_close_shutdown+0x128>
 800ddd0:	4b27      	ldr	r3, [pc, #156]	@ (800de70 <tcp_close_shutdown+0x1bc>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	4a26      	ldr	r2, [pc, #152]	@ (800de70 <tcp_close_shutdown+0x1bc>)
 800ddd8:	6013      	str	r3, [r2, #0]
 800ddda:	e013      	b.n	800de04 <tcp_close_shutdown+0x150>
 800dddc:	4b24      	ldr	r3, [pc, #144]	@ (800de70 <tcp_close_shutdown+0x1bc>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	60bb      	str	r3, [r7, #8]
 800dde2:	e00c      	b.n	800ddfe <tcp_close_shutdown+0x14a>
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d104      	bne.n	800ddf8 <tcp_close_shutdown+0x144>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	68da      	ldr	r2, [r3, #12]
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	60da      	str	r2, [r3, #12]
 800ddf6:	e005      	b.n	800de04 <tcp_close_shutdown+0x150>
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	60bb      	str	r3, [r7, #8]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1ef      	bne.n	800dde4 <tcp_close_shutdown+0x130>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2200      	movs	r2, #0
 800de08:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7ff fea0 	bl	800db50 <tcp_free>
      break;
 800de10:	e01a      	b.n	800de48 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7ff ff14 	bl	800dc40 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800de18:	6879      	ldr	r1, [r7, #4]
 800de1a:	4816      	ldr	r0, [pc, #88]	@ (800de74 <tcp_close_shutdown+0x1c0>)
 800de1c:	f001 f8aa 	bl	800ef74 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7ff feb1 	bl	800db88 <tcp_free_listen>
      break;
 800de26:	e00f      	b.n	800de48 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800de28:	6879      	ldr	r1, [r7, #4]
 800de2a:	480e      	ldr	r0, [pc, #56]	@ (800de64 <tcp_close_shutdown+0x1b0>)
 800de2c:	f001 f8a2 	bl	800ef74 <tcp_pcb_remove>
 800de30:	4b0d      	ldr	r3, [pc, #52]	@ (800de68 <tcp_close_shutdown+0x1b4>)
 800de32:	2201      	movs	r2, #1
 800de34:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7ff fe8a 	bl	800db50 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800de3c:	e004      	b.n	800de48 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f81a 	bl	800de78 <tcp_close_shutdown_fin>
 800de44:	4603      	mov	r3, r0
 800de46:	e000      	b.n	800de4a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bdb0      	pop	{r4, r5, r7, pc}
 800de52:	bf00      	nop
 800de54:	08018704 	.word	0x08018704
 800de58:	080187d8 	.word	0x080187d8
 800de5c:	08018748 	.word	0x08018748
 800de60:	080187f8 	.word	0x080187f8
 800de64:	20008828 	.word	0x20008828
 800de68:	20008830 	.word	0x20008830
 800de6c:	20008868 	.word	0x20008868
 800de70:	20008820 	.word	0x20008820
 800de74:	20008824 	.word	0x20008824

0800de78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <tcp_close_shutdown_fin+0x1c>
 800de86:	4b2e      	ldr	r3, [pc, #184]	@ (800df40 <tcp_close_shutdown_fin+0xc8>)
 800de88:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800de8c:	492d      	ldr	r1, [pc, #180]	@ (800df44 <tcp_close_shutdown_fin+0xcc>)
 800de8e:	482e      	ldr	r0, [pc, #184]	@ (800df48 <tcp_close_shutdown_fin+0xd0>)
 800de90:	f008 ffbe 	bl	8016e10 <iprintf>

  switch (pcb->state) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	7d1b      	ldrb	r3, [r3, #20]
 800de98:	2b07      	cmp	r3, #7
 800de9a:	d020      	beq.n	800dede <tcp_close_shutdown_fin+0x66>
 800de9c:	2b07      	cmp	r3, #7
 800de9e:	dc2b      	bgt.n	800def8 <tcp_close_shutdown_fin+0x80>
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d002      	beq.n	800deaa <tcp_close_shutdown_fin+0x32>
 800dea4:	2b04      	cmp	r3, #4
 800dea6:	d00d      	beq.n	800dec4 <tcp_close_shutdown_fin+0x4c>
 800dea8:	e026      	b.n	800def8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f003 fee2 	bl	8011c74 <tcp_send_fin>
 800deb0:	4603      	mov	r3, r0
 800deb2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800deb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d11f      	bne.n	800defc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2205      	movs	r2, #5
 800dec0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dec2:	e01b      	b.n	800defc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f003 fed5 	bl	8011c74 <tcp_send_fin>
 800deca:	4603      	mov	r3, r0
 800decc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d114      	bne.n	800df00 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2205      	movs	r2, #5
 800deda:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dedc:	e010      	b.n	800df00 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f003 fec8 	bl	8011c74 <tcp_send_fin>
 800dee4:	4603      	mov	r3, r0
 800dee6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d109      	bne.n	800df04 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2209      	movs	r2, #9
 800def4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800def6:	e005      	b.n	800df04 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	e01c      	b.n	800df36 <tcp_close_shutdown_fin+0xbe>
      break;
 800defc:	bf00      	nop
 800defe:	e002      	b.n	800df06 <tcp_close_shutdown_fin+0x8e>
      break;
 800df00:	bf00      	nop
 800df02:	e000      	b.n	800df06 <tcp_close_shutdown_fin+0x8e>
      break;
 800df04:	bf00      	nop
  }

  if (err == ERR_OK) {
 800df06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d103      	bne.n	800df16 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f003 ffee 	bl	8011ef0 <tcp_output>
 800df14:	e00d      	b.n	800df32 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800df16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df1e:	d108      	bne.n	800df32 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	8b5b      	ldrh	r3, [r3, #26]
 800df24:	f043 0308 	orr.w	r3, r3, #8
 800df28:	b29a      	uxth	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800df2e:	2300      	movs	r3, #0
 800df30:	e001      	b.n	800df36 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800df32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	08018704 	.word	0x08018704
 800df44:	080187b4 	.word	0x080187b4
 800df48:	08018748 	.word	0x08018748

0800df4c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d109      	bne.n	800df6e <tcp_close+0x22>
 800df5a:	4b0f      	ldr	r3, [pc, #60]	@ (800df98 <tcp_close+0x4c>)
 800df5c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800df60:	490e      	ldr	r1, [pc, #56]	@ (800df9c <tcp_close+0x50>)
 800df62:	480f      	ldr	r0, [pc, #60]	@ (800dfa0 <tcp_close+0x54>)
 800df64:	f008 ff54 	bl	8016e10 <iprintf>
 800df68:	f06f 030f 	mvn.w	r3, #15
 800df6c:	e00f      	b.n	800df8e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	7d1b      	ldrb	r3, [r3, #20]
 800df72:	2b01      	cmp	r3, #1
 800df74:	d006      	beq.n	800df84 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	8b5b      	ldrh	r3, [r3, #26]
 800df7a:	f043 0310 	orr.w	r3, r3, #16
 800df7e:	b29a      	uxth	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800df84:	2101      	movs	r1, #1
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7ff fe94 	bl	800dcb4 <tcp_close_shutdown>
 800df8c:	4603      	mov	r3, r0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	08018704 	.word	0x08018704
 800df9c:	08018814 	.word	0x08018814
 800dfa0:	08018748 	.word	0x08018748

0800dfa4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b08e      	sub	sp, #56	@ 0x38
 800dfa8:	af04      	add	r7, sp, #16
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d107      	bne.n	800dfc4 <tcp_abandon+0x20>
 800dfb4:	4b52      	ldr	r3, [pc, #328]	@ (800e100 <tcp_abandon+0x15c>)
 800dfb6:	f240 223d 	movw	r2, #573	@ 0x23d
 800dfba:	4952      	ldr	r1, [pc, #328]	@ (800e104 <tcp_abandon+0x160>)
 800dfbc:	4852      	ldr	r0, [pc, #328]	@ (800e108 <tcp_abandon+0x164>)
 800dfbe:	f008 ff27 	bl	8016e10 <iprintf>
 800dfc2:	e099      	b.n	800e0f8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	7d1b      	ldrb	r3, [r3, #20]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d106      	bne.n	800dfda <tcp_abandon+0x36>
 800dfcc:	4b4c      	ldr	r3, [pc, #304]	@ (800e100 <tcp_abandon+0x15c>)
 800dfce:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800dfd2:	494e      	ldr	r1, [pc, #312]	@ (800e10c <tcp_abandon+0x168>)
 800dfd4:	484c      	ldr	r0, [pc, #304]	@ (800e108 <tcp_abandon+0x164>)
 800dfd6:	f008 ff1b 	bl	8016e10 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	7d1b      	ldrb	r3, [r3, #20]
 800dfde:	2b0a      	cmp	r3, #10
 800dfe0:	d107      	bne.n	800dff2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dfe2:	6879      	ldr	r1, [r7, #4]
 800dfe4:	484a      	ldr	r0, [pc, #296]	@ (800e110 <tcp_abandon+0x16c>)
 800dfe6:	f000 ffc5 	bl	800ef74 <tcp_pcb_remove>
    tcp_free(pcb);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff fdb0 	bl	800db50 <tcp_free>
 800dff0:	e082      	b.n	800e0f8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dffe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e004:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e00c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	7d1b      	ldrb	r3, [r3, #20]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d126      	bne.n	800e06a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	8adb      	ldrh	r3, [r3, #22]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d02e      	beq.n	800e082 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e024:	4b3b      	ldr	r3, [pc, #236]	@ (800e114 <tcp_abandon+0x170>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d105      	bne.n	800e03a <tcp_abandon+0x96>
 800e02e:	4b39      	ldr	r3, [pc, #228]	@ (800e114 <tcp_abandon+0x170>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	4a37      	ldr	r2, [pc, #220]	@ (800e114 <tcp_abandon+0x170>)
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	e013      	b.n	800e062 <tcp_abandon+0xbe>
 800e03a:	4b36      	ldr	r3, [pc, #216]	@ (800e114 <tcp_abandon+0x170>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	61fb      	str	r3, [r7, #28]
 800e040:	e00c      	b.n	800e05c <tcp_abandon+0xb8>
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d104      	bne.n	800e056 <tcp_abandon+0xb2>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68da      	ldr	r2, [r3, #12]
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	60da      	str	r2, [r3, #12]
 800e054:	e005      	b.n	800e062 <tcp_abandon+0xbe>
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	61fb      	str	r3, [r7, #28]
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1ef      	bne.n	800e042 <tcp_abandon+0x9e>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	60da      	str	r2, [r3, #12]
 800e068:	e00b      	b.n	800e082 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	8adb      	ldrh	r3, [r3, #22]
 800e072:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e074:	6879      	ldr	r1, [r7, #4]
 800e076:	4828      	ldr	r0, [pc, #160]	@ (800e118 <tcp_abandon+0x174>)
 800e078:	f000 ff7c 	bl	800ef74 <tcp_pcb_remove>
 800e07c:	4b27      	ldr	r3, [pc, #156]	@ (800e11c <tcp_abandon+0x178>)
 800e07e:	2201      	movs	r2, #1
 800e080:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e086:	2b00      	cmp	r3, #0
 800e088:	d004      	beq.n	800e094 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e08e:	4618      	mov	r0, r3
 800e090:	f000 fd1e 	bl	800ead0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d004      	beq.n	800e0a6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f000 fd15 	bl	800ead0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d004      	beq.n	800e0b8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f000 fd0c 	bl	800ead0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00e      	beq.n	800e0dc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e0be:	6879      	ldr	r1, [r7, #4]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	8b12      	ldrh	r2, [r2, #24]
 800e0c8:	9202      	str	r2, [sp, #8]
 800e0ca:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e0cc:	9201      	str	r2, [sp, #4]
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	69b9      	ldr	r1, [r7, #24]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f004 fcbe 	bl	8012a58 <tcp_rst>
    }
    last_state = pcb->state;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	7d1b      	ldrb	r3, [r3, #20]
 800e0e0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f7ff fd34 	bl	800db50 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d004      	beq.n	800e0f8 <tcp_abandon+0x154>
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	f06f 010c 	mvn.w	r1, #12
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	4798      	blx	r3
  }
}
 800e0f8:	3728      	adds	r7, #40	@ 0x28
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	08018704 	.word	0x08018704
 800e104:	08018848 	.word	0x08018848
 800e108:	08018748 	.word	0x08018748
 800e10c:	08018864 	.word	0x08018864
 800e110:	2000882c 	.word	0x2000882c
 800e114:	20008820 	.word	0x20008820
 800e118:	20008828 	.word	0x20008828
 800e11c:	20008830 	.word	0x20008830

0800e120 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e128:	2101      	movs	r1, #1
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f7ff ff3a 	bl	800dfa4 <tcp_abandon>
}
 800e130:	bf00      	nop
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d106      	bne.n	800e154 <tcp_update_rcv_ann_wnd+0x1c>
 800e146:	4b25      	ldr	r3, [pc, #148]	@ (800e1dc <tcp_update_rcv_ann_wnd+0xa4>)
 800e148:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e14c:	4924      	ldr	r1, [pc, #144]	@ (800e1e0 <tcp_update_rcv_ann_wnd+0xa8>)
 800e14e:	4825      	ldr	r0, [pc, #148]	@ (800e1e4 <tcp_update_rcv_ann_wnd+0xac>)
 800e150:	f008 fe5e 	bl	8016e10 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e15c:	4413      	add	r3, r2
 800e15e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e168:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e16c:	bf28      	it	cs
 800e16e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e172:	b292      	uxth	r2, r2
 800e174:	4413      	add	r3, r2
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	db08      	blt.n	800e190 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	e020      	b.n	800e1d2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	dd03      	ble.n	800e1a6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e1a4:	e014      	b.n	800e1d0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1b8:	d306      	bcc.n	800e1c8 <tcp_update_rcv_ann_wnd+0x90>
 800e1ba:	4b08      	ldr	r3, [pc, #32]	@ (800e1dc <tcp_update_rcv_ann_wnd+0xa4>)
 800e1bc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e1c0:	4909      	ldr	r1, [pc, #36]	@ (800e1e8 <tcp_update_rcv_ann_wnd+0xb0>)
 800e1c2:	4808      	ldr	r0, [pc, #32]	@ (800e1e4 <tcp_update_rcv_ann_wnd+0xac>)
 800e1c4:	f008 fe24 	bl	8016e10 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e1d0:	2300      	movs	r3, #0
  }
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	08018704 	.word	0x08018704
 800e1e0:	08018960 	.word	0x08018960
 800e1e4:	08018748 	.word	0x08018748
 800e1e8:	08018984 	.word	0x08018984

0800e1ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d107      	bne.n	800e20e <tcp_recved+0x22>
 800e1fe:	4b1f      	ldr	r3, [pc, #124]	@ (800e27c <tcp_recved+0x90>)
 800e200:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e204:	491e      	ldr	r1, [pc, #120]	@ (800e280 <tcp_recved+0x94>)
 800e206:	481f      	ldr	r0, [pc, #124]	@ (800e284 <tcp_recved+0x98>)
 800e208:	f008 fe02 	bl	8016e10 <iprintf>
 800e20c:	e032      	b.n	800e274 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	7d1b      	ldrb	r3, [r3, #20]
 800e212:	2b01      	cmp	r3, #1
 800e214:	d106      	bne.n	800e224 <tcp_recved+0x38>
 800e216:	4b19      	ldr	r3, [pc, #100]	@ (800e27c <tcp_recved+0x90>)
 800e218:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e21c:	491a      	ldr	r1, [pc, #104]	@ (800e288 <tcp_recved+0x9c>)
 800e21e:	4819      	ldr	r0, [pc, #100]	@ (800e284 <tcp_recved+0x98>)
 800e220:	f008 fdf6 	bl	8016e10 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e228:	887b      	ldrh	r3, [r7, #2]
 800e22a:	4413      	add	r3, r2
 800e22c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e22e:	89fb      	ldrh	r3, [r7, #14]
 800e230:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e234:	d804      	bhi.n	800e240 <tcp_recved+0x54>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e23a:	89fa      	ldrh	r2, [r7, #14]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d204      	bcs.n	800e24a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e246:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e248:	e002      	b.n	800e250 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	89fa      	ldrh	r2, [r7, #14]
 800e24e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f7ff ff71 	bl	800e138 <tcp_update_rcv_ann_wnd>
 800e256:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e25e:	d309      	bcc.n	800e274 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	8b5b      	ldrh	r3, [r3, #26]
 800e264:	f043 0302 	orr.w	r3, r3, #2
 800e268:	b29a      	uxth	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f003 fe3e 	bl	8011ef0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	08018704 	.word	0x08018704
 800e280:	080189a0 	.word	0x080189a0
 800e284:	08018748 	.word	0x08018748
 800e288:	080189b8 	.word	0x080189b8

0800e28c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e28c:	b5b0      	push	{r4, r5, r7, lr}
 800e28e:	b090      	sub	sp, #64	@ 0x40
 800e290:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e298:	4b95      	ldr	r3, [pc, #596]	@ (800e4f0 <tcp_slowtmr+0x264>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	3301      	adds	r3, #1
 800e29e:	4a94      	ldr	r2, [pc, #592]	@ (800e4f0 <tcp_slowtmr+0x264>)
 800e2a0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e2a2:	4b94      	ldr	r3, [pc, #592]	@ (800e4f4 <tcp_slowtmr+0x268>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	4b92      	ldr	r3, [pc, #584]	@ (800e4f4 <tcp_slowtmr+0x268>)
 800e2ac:	701a      	strb	r2, [r3, #0]
 800e2ae:	e000      	b.n	800e2b2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e2b0:	bf00      	nop
  prev = NULL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e2b6:	4b90      	ldr	r3, [pc, #576]	@ (800e4f8 <tcp_slowtmr+0x26c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e2bc:	e29d      	b.n	800e7fa <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c0:	7d1b      	ldrb	r3, [r3, #20]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d106      	bne.n	800e2d4 <tcp_slowtmr+0x48>
 800e2c6:	4b8d      	ldr	r3, [pc, #564]	@ (800e4fc <tcp_slowtmr+0x270>)
 800e2c8:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e2cc:	498c      	ldr	r1, [pc, #560]	@ (800e500 <tcp_slowtmr+0x274>)
 800e2ce:	488d      	ldr	r0, [pc, #564]	@ (800e504 <tcp_slowtmr+0x278>)
 800e2d0:	f008 fd9e 	bl	8016e10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d6:	7d1b      	ldrb	r3, [r3, #20]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d106      	bne.n	800e2ea <tcp_slowtmr+0x5e>
 800e2dc:	4b87      	ldr	r3, [pc, #540]	@ (800e4fc <tcp_slowtmr+0x270>)
 800e2de:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e2e2:	4989      	ldr	r1, [pc, #548]	@ (800e508 <tcp_slowtmr+0x27c>)
 800e2e4:	4887      	ldr	r0, [pc, #540]	@ (800e504 <tcp_slowtmr+0x278>)
 800e2e6:	f008 fd93 	bl	8016e10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ec:	7d1b      	ldrb	r3, [r3, #20]
 800e2ee:	2b0a      	cmp	r3, #10
 800e2f0:	d106      	bne.n	800e300 <tcp_slowtmr+0x74>
 800e2f2:	4b82      	ldr	r3, [pc, #520]	@ (800e4fc <tcp_slowtmr+0x270>)
 800e2f4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e2f8:	4984      	ldr	r1, [pc, #528]	@ (800e50c <tcp_slowtmr+0x280>)
 800e2fa:	4882      	ldr	r0, [pc, #520]	@ (800e504 <tcp_slowtmr+0x278>)
 800e2fc:	f008 fd88 	bl	8016e10 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e302:	7f9a      	ldrb	r2, [r3, #30]
 800e304:	4b7b      	ldr	r3, [pc, #492]	@ (800e4f4 <tcp_slowtmr+0x268>)
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d105      	bne.n	800e318 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e316:	e270      	b.n	800e7fa <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800e318:	4b76      	ldr	r3, [pc, #472]	@ (800e4f4 <tcp_slowtmr+0x268>)
 800e31a:	781a      	ldrb	r2, [r3, #0]
 800e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e320:	2300      	movs	r3, #0
 800e322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e326:	2300      	movs	r3, #0
 800e328:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32e:	7d1b      	ldrb	r3, [r3, #20]
 800e330:	2b02      	cmp	r3, #2
 800e332:	d10a      	bne.n	800e34a <tcp_slowtmr+0xbe>
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e33a:	2b05      	cmp	r3, #5
 800e33c:	d905      	bls.n	800e34a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e33e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e342:	3301      	adds	r3, #1
 800e344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e348:	e11e      	b.n	800e588 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e350:	2b0b      	cmp	r3, #11
 800e352:	d905      	bls.n	800e360 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e358:	3301      	adds	r3, #1
 800e35a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e35e:	e113      	b.n	800e588 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e362:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e366:	2b00      	cmp	r3, #0
 800e368:	d075      	beq.n	800e456 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e36c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d006      	beq.n	800e380 <tcp_slowtmr+0xf4>
 800e372:	4b62      	ldr	r3, [pc, #392]	@ (800e4fc <tcp_slowtmr+0x270>)
 800e374:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e378:	4965      	ldr	r1, [pc, #404]	@ (800e510 <tcp_slowtmr+0x284>)
 800e37a:	4862      	ldr	r0, [pc, #392]	@ (800e504 <tcp_slowtmr+0x278>)
 800e37c:	f008 fd48 	bl	8016e10 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e384:	2b00      	cmp	r3, #0
 800e386:	d106      	bne.n	800e396 <tcp_slowtmr+0x10a>
 800e388:	4b5c      	ldr	r3, [pc, #368]	@ (800e4fc <tcp_slowtmr+0x270>)
 800e38a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e38e:	4961      	ldr	r1, [pc, #388]	@ (800e514 <tcp_slowtmr+0x288>)
 800e390:	485c      	ldr	r0, [pc, #368]	@ (800e504 <tcp_slowtmr+0x278>)
 800e392:	f008 fd3d 	bl	8016e10 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e398:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e39c:	2b0b      	cmp	r3, #11
 800e39e:	d905      	bls.n	800e3ac <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e3aa:	e0ed      	b.n	800e588 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	4a58      	ldr	r2, [pc, #352]	@ (800e518 <tcp_slowtmr+0x28c>)
 800e3b6:	5cd3      	ldrb	r3, [r2, r3]
 800e3b8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e3c0:	7c7a      	ldrb	r2, [r7, #17]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d907      	bls.n	800e3d6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e3dc:	7c7a      	ldrb	r2, [r7, #17]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	f200 80d2 	bhi.w	800e588 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d108      	bne.n	800e404 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e3f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3f4:	f004 fc24 	bl	8012c40 <tcp_zero_window_probe>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d014      	beq.n	800e428 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e3fe:	2300      	movs	r3, #0
 800e400:	623b      	str	r3, [r7, #32]
 800e402:	e011      	b.n	800e428 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e40a:	4619      	mov	r1, r3
 800e40c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e40e:	f003 fae9 	bl	80119e4 <tcp_split_unsent_seg>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d107      	bne.n	800e428 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e418:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e41a:	f003 fd69 	bl	8011ef0 <tcp_output>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	d101      	bne.n	800e428 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e424:	2300      	movs	r3, #0
 800e426:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e428:	6a3b      	ldr	r3, [r7, #32]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 80ac 	beq.w	800e588 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e432:	2200      	movs	r2, #0
 800e434:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e43e:	2b06      	cmp	r3, #6
 800e440:	f200 80a2 	bhi.w	800e588 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e446:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e44a:	3301      	adds	r3, #1
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e450:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e454:	e098      	b.n	800e588 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e458:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	db0f      	blt.n	800e480 <tcp_slowtmr+0x1f4>
 800e460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e462:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e466:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d008      	beq.n	800e480 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e470:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e474:	b29b      	uxth	r3, r3
 800e476:	3301      	adds	r3, #1
 800e478:	b29b      	uxth	r3, r3
 800e47a:	b21a      	sxth	r2, r3
 800e47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e482:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e488:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e48c:	429a      	cmp	r2, r3
 800e48e:	db7b      	blt.n	800e588 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e490:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e492:	f004 f821 	bl	80124d8 <tcp_rexmit_rto_prepare>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d007      	beq.n	800e4ac <tcp_slowtmr+0x220>
 800e49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d171      	bne.n	800e588 <tcp_slowtmr+0x2fc>
 800e4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d06d      	beq.n	800e588 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ae:	7d1b      	ldrb	r3, [r3, #20]
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d03a      	beq.n	800e52a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e4ba:	2b0c      	cmp	r3, #12
 800e4bc:	bf28      	it	cs
 800e4be:	230c      	movcs	r3, #12
 800e4c0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e4c8:	10db      	asrs	r3, r3, #3
 800e4ca:	b21b      	sxth	r3, r3
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e4d4:	4413      	add	r3, r2
 800e4d6:	7efa      	ldrb	r2, [r7, #27]
 800e4d8:	4910      	ldr	r1, [pc, #64]	@ (800e51c <tcp_slowtmr+0x290>)
 800e4da:	5c8a      	ldrb	r2, [r1, r2]
 800e4dc:	4093      	lsls	r3, r2
 800e4de:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	dc1a      	bgt.n	800e520 <tcp_slowtmr+0x294>
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	b21a      	sxth	r2, r3
 800e4ee:	e019      	b.n	800e524 <tcp_slowtmr+0x298>
 800e4f0:	2000881c 	.word	0x2000881c
 800e4f4:	20008832 	.word	0x20008832
 800e4f8:	20008828 	.word	0x20008828
 800e4fc:	08018704 	.word	0x08018704
 800e500:	08018a48 	.word	0x08018a48
 800e504:	08018748 	.word	0x08018748
 800e508:	08018a74 	.word	0x08018a74
 800e50c:	08018aa0 	.word	0x08018aa0
 800e510:	08018ad0 	.word	0x08018ad0
 800e514:	08018b04 	.word	0x08018b04
 800e518:	0801a6e4 	.word	0x0801a6e4
 800e51c:	0801a6d4 	.word	0x0801a6d4
 800e520:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e526:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52c:	2200      	movs	r2, #0
 800e52e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e532:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e538:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e53c:	4293      	cmp	r3, r2
 800e53e:	bf28      	it	cs
 800e540:	4613      	movcs	r3, r2
 800e542:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e544:	8a7b      	ldrh	r3, [r7, #18]
 800e546:	085b      	lsrs	r3, r3, #1
 800e548:	b29a      	uxth	r2, r3
 800e54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e552:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e558:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e55a:	005b      	lsls	r3, r3, #1
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	429a      	cmp	r2, r3
 800e560:	d206      	bcs.n	800e570 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e564:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e566:	005b      	lsls	r3, r3, #1
 800e568:	b29a      	uxth	r2, r3
 800e56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e56c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e572:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e576:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e57c:	2200      	movs	r2, #0
 800e57e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e582:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e584:	f004 f818 	bl	80125b8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58a:	7d1b      	ldrb	r3, [r3, #20]
 800e58c:	2b06      	cmp	r3, #6
 800e58e:	d111      	bne.n	800e5b4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e592:	8b5b      	ldrh	r3, [r3, #26]
 800e594:	f003 0310 	and.w	r3, r3, #16
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00b      	beq.n	800e5b4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e59c:	4b9c      	ldr	r3, [pc, #624]	@ (800e810 <tcp_slowtmr+0x584>)
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a2:	6a1b      	ldr	r3, [r3, #32]
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	2b28      	cmp	r3, #40	@ 0x28
 800e5a8:	d904      	bls.n	800e5b4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b6:	7a5b      	ldrb	r3, [r3, #9]
 800e5b8:	f003 0308 	and.w	r3, r3, #8
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d04a      	beq.n	800e656 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e5c4:	2b04      	cmp	r3, #4
 800e5c6:	d003      	beq.n	800e5d0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ca:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e5cc:	2b07      	cmp	r3, #7
 800e5ce:	d142      	bne.n	800e656 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5d0:	4b8f      	ldr	r3, [pc, #572]	@ (800e810 <tcp_slowtmr+0x584>)
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d6:	6a1b      	ldr	r3, [r3, #32]
 800e5d8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5dc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e5e0:	4b8c      	ldr	r3, [pc, #560]	@ (800e814 <tcp_slowtmr+0x588>)
 800e5e2:	440b      	add	r3, r1
 800e5e4:	498c      	ldr	r1, [pc, #560]	@ (800e818 <tcp_slowtmr+0x58c>)
 800e5e6:	fba1 1303 	umull	r1, r3, r1, r3
 800e5ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d90a      	bls.n	800e606 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e5fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e5fe:	3301      	adds	r3, #1
 800e600:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e604:	e027      	b.n	800e656 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e606:	4b82      	ldr	r3, [pc, #520]	@ (800e810 <tcp_slowtmr+0x584>)
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60c:	6a1b      	ldr	r3, [r3, #32]
 800e60e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e612:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e618:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e61c:	4618      	mov	r0, r3
 800e61e:	4b7f      	ldr	r3, [pc, #508]	@ (800e81c <tcp_slowtmr+0x590>)
 800e620:	fb00 f303 	mul.w	r3, r0, r3
 800e624:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e626:	497c      	ldr	r1, [pc, #496]	@ (800e818 <tcp_slowtmr+0x58c>)
 800e628:	fba1 1303 	umull	r1, r3, r1, r3
 800e62c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e62e:	429a      	cmp	r2, r3
 800e630:	d911      	bls.n	800e656 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e632:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e634:	f004 fac4 	bl	8012bc0 <tcp_keepalive>
 800e638:	4603      	mov	r3, r0
 800e63a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e63e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e642:	2b00      	cmp	r3, #0
 800e644:	d107      	bne.n	800e656 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e648:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e64c:	3301      	adds	r3, #1
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e652:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d011      	beq.n	800e682 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e65e:	4b6c      	ldr	r3, [pc, #432]	@ (800e810 <tcp_slowtmr+0x584>)
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	1ad2      	subs	r2, r2, r3
 800e668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e66a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e66e:	4619      	mov	r1, r3
 800e670:	460b      	mov	r3, r1
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	440b      	add	r3, r1
 800e676:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e678:	429a      	cmp	r2, r3
 800e67a:	d302      	bcc.n	800e682 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e67c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e67e:	f000 fddd 	bl	800f23c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e684:	7d1b      	ldrb	r3, [r3, #20]
 800e686:	2b03      	cmp	r3, #3
 800e688:	d10b      	bne.n	800e6a2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e68a:	4b61      	ldr	r3, [pc, #388]	@ (800e810 <tcp_slowtmr+0x584>)
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e690:	6a1b      	ldr	r3, [r3, #32]
 800e692:	1ad3      	subs	r3, r2, r3
 800e694:	2b28      	cmp	r3, #40	@ 0x28
 800e696:	d904      	bls.n	800e6a2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e69c:	3301      	adds	r3, #1
 800e69e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a4:	7d1b      	ldrb	r3, [r3, #20]
 800e6a6:	2b09      	cmp	r3, #9
 800e6a8:	d10b      	bne.n	800e6c2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e6aa:	4b59      	ldr	r3, [pc, #356]	@ (800e810 <tcp_slowtmr+0x584>)
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b0:	6a1b      	ldr	r3, [r3, #32]
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	2bf0      	cmp	r3, #240	@ 0xf0
 800e6b6:	d904      	bls.n	800e6c2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6bc:	3301      	adds	r3, #1
 800e6be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d060      	beq.n	800e78c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6d0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e6d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6d4:	f000 fbfe 	bl	800eed4 <tcp_pcb_purge>
      if (prev != NULL) {
 800e6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d010      	beq.n	800e700 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e6de:	4b50      	ldr	r3, [pc, #320]	@ (800e820 <tcp_slowtmr+0x594>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d106      	bne.n	800e6f6 <tcp_slowtmr+0x46a>
 800e6e8:	4b4e      	ldr	r3, [pc, #312]	@ (800e824 <tcp_slowtmr+0x598>)
 800e6ea:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e6ee:	494e      	ldr	r1, [pc, #312]	@ (800e828 <tcp_slowtmr+0x59c>)
 800e6f0:	484e      	ldr	r0, [pc, #312]	@ (800e82c <tcp_slowtmr+0x5a0>)
 800e6f2:	f008 fb8d 	bl	8016e10 <iprintf>
        prev->next = pcb->next;
 800e6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6f8:	68da      	ldr	r2, [r3, #12]
 800e6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fc:	60da      	str	r2, [r3, #12]
 800e6fe:	e00f      	b.n	800e720 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e700:	4b47      	ldr	r3, [pc, #284]	@ (800e820 <tcp_slowtmr+0x594>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e706:	429a      	cmp	r2, r3
 800e708:	d006      	beq.n	800e718 <tcp_slowtmr+0x48c>
 800e70a:	4b46      	ldr	r3, [pc, #280]	@ (800e824 <tcp_slowtmr+0x598>)
 800e70c:	f240 5271 	movw	r2, #1393	@ 0x571
 800e710:	4947      	ldr	r1, [pc, #284]	@ (800e830 <tcp_slowtmr+0x5a4>)
 800e712:	4846      	ldr	r0, [pc, #280]	@ (800e82c <tcp_slowtmr+0x5a0>)
 800e714:	f008 fb7c 	bl	8016e10 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	4a40      	ldr	r2, [pc, #256]	@ (800e820 <tcp_slowtmr+0x594>)
 800e71e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e720:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e724:	2b00      	cmp	r3, #0
 800e726:	d013      	beq.n	800e750 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e730:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e734:	3304      	adds	r3, #4
 800e736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e738:	8ad2      	ldrh	r2, [r2, #22]
 800e73a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e73c:	8b09      	ldrh	r1, [r1, #24]
 800e73e:	9102      	str	r1, [sp, #8]
 800e740:	9201      	str	r2, [sp, #4]
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	462b      	mov	r3, r5
 800e746:	4622      	mov	r2, r4
 800e748:	4601      	mov	r1, r0
 800e74a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e74c:	f004 f984 	bl	8012a58 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e758:	7d1b      	ldrb	r3, [r3, #20]
 800e75a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e75e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e766:	6838      	ldr	r0, [r7, #0]
 800e768:	f7ff f9f2 	bl	800db50 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e76c:	4b31      	ldr	r3, [pc, #196]	@ (800e834 <tcp_slowtmr+0x5a8>)
 800e76e:	2200      	movs	r2, #0
 800e770:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d004      	beq.n	800e782 <tcp_slowtmr+0x4f6>
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f06f 010c 	mvn.w	r1, #12
 800e77e:	68b8      	ldr	r0, [r7, #8]
 800e780:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e782:	4b2c      	ldr	r3, [pc, #176]	@ (800e834 <tcp_slowtmr+0x5a8>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d037      	beq.n	800e7fa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e78a:	e592      	b.n	800e2b2 <tcp_slowtmr+0x26>
      prev = pcb;
 800e78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e78e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e798:	7f1b      	ldrb	r3, [r3, #28]
 800e79a:	3301      	adds	r3, #1
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a4:	7f1a      	ldrb	r2, [r3, #28]
 800e7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a8:	7f5b      	ldrb	r3, [r3, #29]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d325      	bcc.n	800e7fa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e7b4:	4b1f      	ldr	r3, [pc, #124]	@ (800e834 <tcp_slowtmr+0x5a8>)
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00b      	beq.n	800e7dc <tcp_slowtmr+0x550>
 800e7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7cc:	6912      	ldr	r2, [r2, #16]
 800e7ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	4798      	blx	r3
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e7da:	e002      	b.n	800e7e2 <tcp_slowtmr+0x556>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e7e2:	4b14      	ldr	r3, [pc, #80]	@ (800e834 <tcp_slowtmr+0x5a8>)
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f47f ad62 	bne.w	800e2b0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e7ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d102      	bne.n	800e7fa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e7f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7f6:	f003 fb7b 	bl	8011ef0 <tcp_output>
  while (pcb != NULL) {
 800e7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f47f ad5e 	bne.w	800e2be <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e802:	2300      	movs	r3, #0
 800e804:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e806:	4b0c      	ldr	r3, [pc, #48]	@ (800e838 <tcp_slowtmr+0x5ac>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e80c:	e069      	b.n	800e8e2 <tcp_slowtmr+0x656>
 800e80e:	bf00      	nop
 800e810:	2000881c 	.word	0x2000881c
 800e814:	000a4cb8 	.word	0x000a4cb8
 800e818:	10624dd3 	.word	0x10624dd3
 800e81c:	000124f8 	.word	0x000124f8
 800e820:	20008828 	.word	0x20008828
 800e824:	08018704 	.word	0x08018704
 800e828:	08018b3c 	.word	0x08018b3c
 800e82c:	08018748 	.word	0x08018748
 800e830:	08018b68 	.word	0x08018b68
 800e834:	20008830 	.word	0x20008830
 800e838:	2000882c 	.word	0x2000882c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83e:	7d1b      	ldrb	r3, [r3, #20]
 800e840:	2b0a      	cmp	r3, #10
 800e842:	d006      	beq.n	800e852 <tcp_slowtmr+0x5c6>
 800e844:	4b2b      	ldr	r3, [pc, #172]	@ (800e8f4 <tcp_slowtmr+0x668>)
 800e846:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e84a:	492b      	ldr	r1, [pc, #172]	@ (800e8f8 <tcp_slowtmr+0x66c>)
 800e84c:	482b      	ldr	r0, [pc, #172]	@ (800e8fc <tcp_slowtmr+0x670>)
 800e84e:	f008 fadf 	bl	8016e10 <iprintf>
    pcb_remove = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e858:	4b29      	ldr	r3, [pc, #164]	@ (800e900 <tcp_slowtmr+0x674>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e85e:	6a1b      	ldr	r3, [r3, #32]
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	2bf0      	cmp	r3, #240	@ 0xf0
 800e864:	d904      	bls.n	800e870 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e86a:	3301      	adds	r3, #1
 800e86c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e874:	2b00      	cmp	r3, #0
 800e876:	d02f      	beq.n	800e8d8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e878:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e87a:	f000 fb2b 	bl	800eed4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e880:	2b00      	cmp	r3, #0
 800e882:	d010      	beq.n	800e8a6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e884:	4b1f      	ldr	r3, [pc, #124]	@ (800e904 <tcp_slowtmr+0x678>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d106      	bne.n	800e89c <tcp_slowtmr+0x610>
 800e88e:	4b19      	ldr	r3, [pc, #100]	@ (800e8f4 <tcp_slowtmr+0x668>)
 800e890:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e894:	491c      	ldr	r1, [pc, #112]	@ (800e908 <tcp_slowtmr+0x67c>)
 800e896:	4819      	ldr	r0, [pc, #100]	@ (800e8fc <tcp_slowtmr+0x670>)
 800e898:	f008 faba 	bl	8016e10 <iprintf>
        prev->next = pcb->next;
 800e89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89e:	68da      	ldr	r2, [r3, #12]
 800e8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a2:	60da      	str	r2, [r3, #12]
 800e8a4:	e00f      	b.n	800e8c6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e8a6:	4b17      	ldr	r3, [pc, #92]	@ (800e904 <tcp_slowtmr+0x678>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d006      	beq.n	800e8be <tcp_slowtmr+0x632>
 800e8b0:	4b10      	ldr	r3, [pc, #64]	@ (800e8f4 <tcp_slowtmr+0x668>)
 800e8b2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e8b6:	4915      	ldr	r1, [pc, #84]	@ (800e90c <tcp_slowtmr+0x680>)
 800e8b8:	4810      	ldr	r0, [pc, #64]	@ (800e8fc <tcp_slowtmr+0x670>)
 800e8ba:	f008 faa9 	bl	8016e10 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	4a10      	ldr	r2, [pc, #64]	@ (800e904 <tcp_slowtmr+0x678>)
 800e8c4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e8d0:	69f8      	ldr	r0, [r7, #28]
 800e8d2:	f7ff f93d 	bl	800db50 <tcp_free>
 800e8d6:	e004      	b.n	800e8e2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8da:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1a9      	bne.n	800e83c <tcp_slowtmr+0x5b0>
    }
  }
}
 800e8e8:	bf00      	nop
 800e8ea:	bf00      	nop
 800e8ec:	3730      	adds	r7, #48	@ 0x30
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	08018704 	.word	0x08018704
 800e8f8:	08018b94 	.word	0x08018b94
 800e8fc:	08018748 	.word	0x08018748
 800e900:	2000881c 	.word	0x2000881c
 800e904:	2000882c 	.word	0x2000882c
 800e908:	08018bc4 	.word	0x08018bc4
 800e90c:	08018bec 	.word	0x08018bec

0800e910 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e916:	4b2d      	ldr	r3, [pc, #180]	@ (800e9cc <tcp_fasttmr+0xbc>)
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	3301      	adds	r3, #1
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	4b2b      	ldr	r3, [pc, #172]	@ (800e9cc <tcp_fasttmr+0xbc>)
 800e920:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e922:	4b2b      	ldr	r3, [pc, #172]	@ (800e9d0 <tcp_fasttmr+0xc0>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e928:	e048      	b.n	800e9bc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	7f9a      	ldrb	r2, [r3, #30]
 800e92e:	4b27      	ldr	r3, [pc, #156]	@ (800e9cc <tcp_fasttmr+0xbc>)
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	429a      	cmp	r2, r3
 800e934:	d03f      	beq.n	800e9b6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e936:	4b25      	ldr	r3, [pc, #148]	@ (800e9cc <tcp_fasttmr+0xbc>)
 800e938:	781a      	ldrb	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	8b5b      	ldrh	r3, [r3, #26]
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	2b00      	cmp	r3, #0
 800e948:	d010      	beq.n	800e96c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	8b5b      	ldrh	r3, [r3, #26]
 800e94e:	f043 0302 	orr.w	r3, r3, #2
 800e952:	b29a      	uxth	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f003 fac9 	bl	8011ef0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	8b5b      	ldrh	r3, [r3, #26]
 800e962:	f023 0303 	bic.w	r3, r3, #3
 800e966:	b29a      	uxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	8b5b      	ldrh	r3, [r3, #26]
 800e970:	f003 0308 	and.w	r3, r3, #8
 800e974:	2b00      	cmp	r3, #0
 800e976:	d009      	beq.n	800e98c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	8b5b      	ldrh	r3, [r3, #26]
 800e97c:	f023 0308 	bic.w	r3, r3, #8
 800e980:	b29a      	uxth	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff fa76 	bl	800de78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e996:	2b00      	cmp	r3, #0
 800e998:	d00a      	beq.n	800e9b0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e99a:	4b0e      	ldr	r3, [pc, #56]	@ (800e9d4 <tcp_fasttmr+0xc4>)
 800e99c:	2200      	movs	r2, #0
 800e99e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 f819 	bl	800e9d8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e9a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e9d4 <tcp_fasttmr+0xc4>)
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d000      	beq.n	800e9b0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e9ae:	e7b8      	b.n	800e922 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	607b      	str	r3, [r7, #4]
 800e9b4:	e002      	b.n	800e9bc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1b3      	bne.n	800e92a <tcp_fasttmr+0x1a>
    }
  }
}
 800e9c2:	bf00      	nop
 800e9c4:	bf00      	nop
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	20008832 	.word	0x20008832
 800e9d0:	20008828 	.word	0x20008828
 800e9d4:	20008830 	.word	0x20008830

0800e9d8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e9d8:	b590      	push	{r4, r7, lr}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d109      	bne.n	800e9fa <tcp_process_refused_data+0x22>
 800e9e6:	4b37      	ldr	r3, [pc, #220]	@ (800eac4 <tcp_process_refused_data+0xec>)
 800e9e8:	f240 6209 	movw	r2, #1545	@ 0x609
 800e9ec:	4936      	ldr	r1, [pc, #216]	@ (800eac8 <tcp_process_refused_data+0xf0>)
 800e9ee:	4837      	ldr	r0, [pc, #220]	@ (800eacc <tcp_process_refused_data+0xf4>)
 800e9f0:	f008 fa0e 	bl	8016e10 <iprintf>
 800e9f4:	f06f 030f 	mvn.w	r3, #15
 800e9f8:	e060      	b.n	800eabc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9fe:	7b5b      	ldrb	r3, [r3, #13]
 800ea00:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea06:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00b      	beq.n	800ea30 <tcp_process_refused_data+0x58>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6918      	ldr	r0, [r3, #16]
 800ea22:	2300      	movs	r3, #0
 800ea24:	68ba      	ldr	r2, [r7, #8]
 800ea26:	6879      	ldr	r1, [r7, #4]
 800ea28:	47a0      	blx	r4
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	73fb      	strb	r3, [r7, #15]
 800ea2e:	e007      	b.n	800ea40 <tcp_process_refused_data+0x68>
 800ea30:	2300      	movs	r3, #0
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	6879      	ldr	r1, [r7, #4]
 800ea36:	2000      	movs	r0, #0
 800ea38:	f000 f8a4 	bl	800eb84 <tcp_recv_null>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ea40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d12a      	bne.n	800ea9e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
 800ea4a:	f003 0320 	and.w	r3, r3, #32
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d033      	beq.n	800eaba <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea56:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ea5a:	d005      	beq.n	800ea68 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea60:	3301      	adds	r3, #1
 800ea62:	b29a      	uxth	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00b      	beq.n	800ea8a <tcp_process_refused_data+0xb2>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6918      	ldr	r0, [r3, #16]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	2200      	movs	r2, #0
 800ea80:	6879      	ldr	r1, [r7, #4]
 800ea82:	47a0      	blx	r4
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]
 800ea88:	e001      	b.n	800ea8e <tcp_process_refused_data+0xb6>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea92:	f113 0f0d 	cmn.w	r3, #13
 800ea96:	d110      	bne.n	800eaba <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea98:	f06f 030c 	mvn.w	r3, #12
 800ea9c:	e00e      	b.n	800eabc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ea9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaa2:	f113 0f0d 	cmn.w	r3, #13
 800eaa6:	d102      	bne.n	800eaae <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eaa8:	f06f 030c 	mvn.w	r3, #12
 800eaac:	e006      	b.n	800eabc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	68ba      	ldr	r2, [r7, #8]
 800eab2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800eab4:	f06f 0304 	mvn.w	r3, #4
 800eab8:	e000      	b.n	800eabc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd90      	pop	{r4, r7, pc}
 800eac4:	08018704 	.word	0x08018704
 800eac8:	08018c14 	.word	0x08018c14
 800eacc:	08018748 	.word	0x08018748

0800ead0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ead8:	e007      	b.n	800eaea <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 f80a 	bl	800eafa <tcp_seg_free>
    seg = next;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d1f4      	bne.n	800eada <tcp_segs_free+0xa>
  }
}
 800eaf0:	bf00      	nop
 800eaf2:	bf00      	nop
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b082      	sub	sp, #8
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00c      	beq.n	800eb22 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d004      	beq.n	800eb1a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe fd6b 	bl	800d5f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eb1a:	6879      	ldr	r1, [r7, #4]
 800eb1c:	2003      	movs	r0, #3
 800eb1e:	f7fd fef1 	bl	800c904 <memp_free>
  }
}
 800eb22:	bf00      	nop
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
	...

0800eb2c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d106      	bne.n	800eb48 <tcp_seg_copy+0x1c>
 800eb3a:	4b0f      	ldr	r3, [pc, #60]	@ (800eb78 <tcp_seg_copy+0x4c>)
 800eb3c:	f240 6282 	movw	r2, #1666	@ 0x682
 800eb40:	490e      	ldr	r1, [pc, #56]	@ (800eb7c <tcp_seg_copy+0x50>)
 800eb42:	480f      	ldr	r0, [pc, #60]	@ (800eb80 <tcp_seg_copy+0x54>)
 800eb44:	f008 f964 	bl	8016e10 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eb48:	2003      	movs	r0, #3
 800eb4a:	f7fd fe6b 	bl	800c824 <memp_malloc>
 800eb4e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d101      	bne.n	800eb5a <tcp_seg_copy+0x2e>
    return NULL;
 800eb56:	2300      	movs	r3, #0
 800eb58:	e00a      	b.n	800eb70 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb5a:	2210      	movs	r2, #16
 800eb5c:	6879      	ldr	r1, [r7, #4]
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f008 fa31 	bl	8016fc6 <memcpy>
  pbuf_ref(cseg->p);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fe fde1 	bl	800d730 <pbuf_ref>
  return cseg;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	08018704 	.word	0x08018704
 800eb7c:	08018c58 	.word	0x08018c58
 800eb80:	08018748 	.word	0x08018748

0800eb84 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	607a      	str	r2, [r7, #4]
 800eb90:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d109      	bne.n	800ebac <tcp_recv_null+0x28>
 800eb98:	4b12      	ldr	r3, [pc, #72]	@ (800ebe4 <tcp_recv_null+0x60>)
 800eb9a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800eb9e:	4912      	ldr	r1, [pc, #72]	@ (800ebe8 <tcp_recv_null+0x64>)
 800eba0:	4812      	ldr	r0, [pc, #72]	@ (800ebec <tcp_recv_null+0x68>)
 800eba2:	f008 f935 	bl	8016e10 <iprintf>
 800eba6:	f06f 030f 	mvn.w	r3, #15
 800ebaa:	e016      	b.n	800ebda <tcp_recv_null+0x56>

  if (p != NULL) {
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d009      	beq.n	800ebc6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	891b      	ldrh	r3, [r3, #8]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	68b8      	ldr	r0, [r7, #8]
 800ebba:	f7ff fb17 	bl	800e1ec <tcp_recved>
    pbuf_free(p);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7fe fd16 	bl	800d5f0 <pbuf_free>
 800ebc4:	e008      	b.n	800ebd8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ebc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d104      	bne.n	800ebd8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ebce:	68b8      	ldr	r0, [r7, #8]
 800ebd0:	f7ff f9bc 	bl	800df4c <tcp_close>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	e000      	b.n	800ebda <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	08018704 	.word	0x08018704
 800ebe8:	08018c74 	.word	0x08018c74
 800ebec:	08018748 	.word	0x08018748

0800ebf0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ebfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	db01      	blt.n	800ec06 <tcp_kill_prio+0x16>
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	e000      	b.n	800ec08 <tcp_kill_prio+0x18>
 800ec06:	237f      	movs	r3, #127	@ 0x7f
 800ec08:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ec0a:	7afb      	ldrb	r3, [r7, #11]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d034      	beq.n	800ec7a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ec10:	7afb      	ldrb	r3, [r7, #11]
 800ec12:	3b01      	subs	r3, #1
 800ec14:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec1e:	4b19      	ldr	r3, [pc, #100]	@ (800ec84 <tcp_kill_prio+0x94>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	617b      	str	r3, [r7, #20]
 800ec24:	e01f      	b.n	800ec66 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	7d5b      	ldrb	r3, [r3, #21]
 800ec2a:	7afa      	ldrb	r2, [r7, #11]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d80c      	bhi.n	800ec4a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ec34:	7afa      	ldrb	r2, [r7, #11]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d112      	bne.n	800ec60 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec3a:	4b13      	ldr	r3, [pc, #76]	@ (800ec88 <tcp_kill_prio+0x98>)
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d80a      	bhi.n	800ec60 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ec4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ec88 <tcp_kill_prio+0x98>)
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	6a1b      	ldr	r3, [r3, #32]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	7d5b      	ldrb	r3, [r3, #21]
 800ec5e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	617b      	str	r3, [r7, #20]
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1dc      	bne.n	800ec26 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d004      	beq.n	800ec7c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec72:	6938      	ldr	r0, [r7, #16]
 800ec74:	f7ff fa54 	bl	800e120 <tcp_abort>
 800ec78:	e000      	b.n	800ec7c <tcp_kill_prio+0x8c>
    return;
 800ec7a:	bf00      	nop
  }
}
 800ec7c:	3718      	adds	r7, #24
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	20008828 	.word	0x20008828
 800ec88:	2000881c 	.word	0x2000881c

0800ec8c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b086      	sub	sp, #24
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec96:	79fb      	ldrb	r3, [r7, #7]
 800ec98:	2b08      	cmp	r3, #8
 800ec9a:	d009      	beq.n	800ecb0 <tcp_kill_state+0x24>
 800ec9c:	79fb      	ldrb	r3, [r7, #7]
 800ec9e:	2b09      	cmp	r3, #9
 800eca0:	d006      	beq.n	800ecb0 <tcp_kill_state+0x24>
 800eca2:	4b1a      	ldr	r3, [pc, #104]	@ (800ed0c <tcp_kill_state+0x80>)
 800eca4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800eca8:	4919      	ldr	r1, [pc, #100]	@ (800ed10 <tcp_kill_state+0x84>)
 800ecaa:	481a      	ldr	r0, [pc, #104]	@ (800ed14 <tcp_kill_state+0x88>)
 800ecac:	f008 f8b0 	bl	8016e10 <iprintf>

  inactivity = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecb8:	4b17      	ldr	r3, [pc, #92]	@ (800ed18 <tcp_kill_state+0x8c>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	617b      	str	r3, [r7, #20]
 800ecbe:	e017      	b.n	800ecf0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	7d1b      	ldrb	r3, [r3, #20]
 800ecc4:	79fa      	ldrb	r2, [r7, #7]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d10f      	bne.n	800ecea <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecca:	4b14      	ldr	r3, [pc, #80]	@ (800ed1c <tcp_kill_state+0x90>)
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	6a1b      	ldr	r3, [r3, #32]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d807      	bhi.n	800ecea <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ecda:	4b10      	ldr	r3, [pc, #64]	@ (800ed1c <tcp_kill_state+0x90>)
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	6a1b      	ldr	r3, [r3, #32]
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	617b      	str	r3, [r7, #20]
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1e4      	bne.n	800ecc0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d003      	beq.n	800ed04 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	6938      	ldr	r0, [r7, #16]
 800ed00:	f7ff f950 	bl	800dfa4 <tcp_abandon>
  }
}
 800ed04:	bf00      	nop
 800ed06:	3718      	adds	r7, #24
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	08018704 	.word	0x08018704
 800ed10:	08018c90 	.word	0x08018c90
 800ed14:	08018748 	.word	0x08018748
 800ed18:	20008828 	.word	0x20008828
 800ed1c:	2000881c 	.word	0x2000881c

0800ed20 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ed26:	2300      	movs	r3, #0
 800ed28:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed2e:	4b12      	ldr	r3, [pc, #72]	@ (800ed78 <tcp_kill_timewait+0x58>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	e012      	b.n	800ed5c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed36:	4b11      	ldr	r3, [pc, #68]	@ (800ed7c <tcp_kill_timewait+0x5c>)
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6a1b      	ldr	r3, [r3, #32]
 800ed3e:	1ad3      	subs	r3, r2, r3
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d807      	bhi.n	800ed56 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ed46:	4b0d      	ldr	r3, [pc, #52]	@ (800ed7c <tcp_kill_timewait+0x5c>)
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6a1b      	ldr	r3, [r3, #32]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	60fb      	str	r3, [r7, #12]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1e9      	bne.n	800ed36 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d002      	beq.n	800ed6e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed68:	68b8      	ldr	r0, [r7, #8]
 800ed6a:	f7ff f9d9 	bl	800e120 <tcp_abort>
  }
}
 800ed6e:	bf00      	nop
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	2000882c 	.word	0x2000882c
 800ed7c:	2000881c 	.word	0x2000881c

0800ed80 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed86:	4b10      	ldr	r3, [pc, #64]	@ (800edc8 <tcp_handle_closepend+0x48>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed8c:	e014      	b.n	800edb8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	8b5b      	ldrh	r3, [r3, #26]
 800ed98:	f003 0308 	and.w	r3, r3, #8
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d009      	beq.n	800edb4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	8b5b      	ldrh	r3, [r3, #26]
 800eda4:	f023 0308 	bic.w	r3, r3, #8
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7ff f862 	bl	800de78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d1e7      	bne.n	800ed8e <tcp_handle_closepend+0xe>
  }
}
 800edbe:	bf00      	nop
 800edc0:	bf00      	nop
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	20008828 	.word	0x20008828

0800edcc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	4603      	mov	r3, r0
 800edd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edd6:	2001      	movs	r0, #1
 800edd8:	f7fd fd24 	bl	800c824 <memp_malloc>
 800eddc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d126      	bne.n	800ee32 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ede4:	f7ff ffcc 	bl	800ed80 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ede8:	f7ff ff9a 	bl	800ed20 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edec:	2001      	movs	r0, #1
 800edee:	f7fd fd19 	bl	800c824 <memp_malloc>
 800edf2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d11b      	bne.n	800ee32 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800edfa:	2009      	movs	r0, #9
 800edfc:	f7ff ff46 	bl	800ec8c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee00:	2001      	movs	r0, #1
 800ee02:	f7fd fd0f 	bl	800c824 <memp_malloc>
 800ee06:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d111      	bne.n	800ee32 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ee0e:	2008      	movs	r0, #8
 800ee10:	f7ff ff3c 	bl	800ec8c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee14:	2001      	movs	r0, #1
 800ee16:	f7fd fd05 	bl	800c824 <memp_malloc>
 800ee1a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d107      	bne.n	800ee32 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ee22:	79fb      	ldrb	r3, [r7, #7]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7ff fee3 	bl	800ebf0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee2a:	2001      	movs	r0, #1
 800ee2c:	f7fd fcfa 	bl	800c824 <memp_malloc>
 800ee30:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d03f      	beq.n	800eeb8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ee38:	229c      	movs	r2, #156	@ 0x9c
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f008 f84c 	bl	8016eda <memset>
    pcb->prio = prio;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	79fa      	ldrb	r2, [r7, #7]
 800ee46:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ee4e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ee58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	22ff      	movs	r2, #255	@ 0xff
 800ee66:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ee6e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2206      	movs	r2, #6
 800ee74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2206      	movs	r2, #6
 800ee7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee84:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ee8e:	4b0d      	ldr	r3, [pc, #52]	@ (800eec4 <tcp_alloc+0xf8>)
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee96:	4b0c      	ldr	r3, [pc, #48]	@ (800eec8 <tcp_alloc+0xfc>)
 800ee98:	781a      	ldrb	r2, [r3, #0]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800eea4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	4a08      	ldr	r2, [pc, #32]	@ (800eecc <tcp_alloc+0x100>)
 800eeac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	4a07      	ldr	r2, [pc, #28]	@ (800eed0 <tcp_alloc+0x104>)
 800eeb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	2000881c 	.word	0x2000881c
 800eec8:	20008832 	.word	0x20008832
 800eecc:	0800eb85 	.word	0x0800eb85
 800eed0:	006ddd00 	.word	0x006ddd00

0800eed4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d107      	bne.n	800eef2 <tcp_pcb_purge+0x1e>
 800eee2:	4b21      	ldr	r3, [pc, #132]	@ (800ef68 <tcp_pcb_purge+0x94>)
 800eee4:	f640 0251 	movw	r2, #2129	@ 0x851
 800eee8:	4920      	ldr	r1, [pc, #128]	@ (800ef6c <tcp_pcb_purge+0x98>)
 800eeea:	4821      	ldr	r0, [pc, #132]	@ (800ef70 <tcp_pcb_purge+0x9c>)
 800eeec:	f007 ff90 	bl	8016e10 <iprintf>
 800eef0:	e037      	b.n	800ef62 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7d1b      	ldrb	r3, [r3, #20]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d033      	beq.n	800ef62 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eefe:	2b0a      	cmp	r3, #10
 800ef00:	d02f      	beq.n	800ef62 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d02b      	beq.n	800ef62 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d007      	beq.n	800ef22 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fe fb6a 	bl	800d5f0 <pbuf_free>
      pcb->refused_data = NULL;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d002      	beq.n	800ef30 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 f986 	bl	800f23c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef36:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fdc7 	bl	800ead0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7ff fdc2 	bl	800ead0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	08018704 	.word	0x08018704
 800ef6c:	08018d50 	.word	0x08018d50
 800ef70:	08018748 	.word	0x08018748

0800ef74 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d106      	bne.n	800ef92 <tcp_pcb_remove+0x1e>
 800ef84:	4b3e      	ldr	r3, [pc, #248]	@ (800f080 <tcp_pcb_remove+0x10c>)
 800ef86:	f640 0283 	movw	r2, #2179	@ 0x883
 800ef8a:	493e      	ldr	r1, [pc, #248]	@ (800f084 <tcp_pcb_remove+0x110>)
 800ef8c:	483e      	ldr	r0, [pc, #248]	@ (800f088 <tcp_pcb_remove+0x114>)
 800ef8e:	f007 ff3f 	bl	8016e10 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d106      	bne.n	800efa6 <tcp_pcb_remove+0x32>
 800ef98:	4b39      	ldr	r3, [pc, #228]	@ (800f080 <tcp_pcb_remove+0x10c>)
 800ef9a:	f640 0284 	movw	r2, #2180	@ 0x884
 800ef9e:	493b      	ldr	r1, [pc, #236]	@ (800f08c <tcp_pcb_remove+0x118>)
 800efa0:	4839      	ldr	r0, [pc, #228]	@ (800f088 <tcp_pcb_remove+0x114>)
 800efa2:	f007 ff35 	bl	8016e10 <iprintf>

  TCP_RMV(pcblist, pcb);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	683a      	ldr	r2, [r7, #0]
 800efac:	429a      	cmp	r2, r3
 800efae:	d105      	bne.n	800efbc <tcp_pcb_remove+0x48>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68da      	ldr	r2, [r3, #12]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	601a      	str	r2, [r3, #0]
 800efba:	e013      	b.n	800efe4 <tcp_pcb_remove+0x70>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	60fb      	str	r3, [r7, #12]
 800efc2:	e00c      	b.n	800efde <tcp_pcb_remove+0x6a>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d104      	bne.n	800efd8 <tcp_pcb_remove+0x64>
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	68da      	ldr	r2, [r3, #12]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	60da      	str	r2, [r3, #12]
 800efd6:	e005      	b.n	800efe4 <tcp_pcb_remove+0x70>
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1ef      	bne.n	800efc4 <tcp_pcb_remove+0x50>
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	2200      	movs	r2, #0
 800efe8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800efea:	6838      	ldr	r0, [r7, #0]
 800efec:	f7ff ff72 	bl	800eed4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	7d1b      	ldrb	r3, [r3, #20]
 800eff4:	2b0a      	cmp	r3, #10
 800eff6:	d013      	beq.n	800f020 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800effc:	2b01      	cmp	r3, #1
 800effe:	d00f      	beq.n	800f020 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	8b5b      	ldrh	r3, [r3, #26]
 800f004:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d009      	beq.n	800f020 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	8b5b      	ldrh	r3, [r3, #26]
 800f010:	f043 0302 	orr.w	r3, r3, #2
 800f014:	b29a      	uxth	r2, r3
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f01a:	6838      	ldr	r0, [r7, #0]
 800f01c:	f002 ff68 	bl	8011ef0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	7d1b      	ldrb	r3, [r3, #20]
 800f024:	2b01      	cmp	r3, #1
 800f026:	d020      	beq.n	800f06a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d006      	beq.n	800f03e <tcp_pcb_remove+0xca>
 800f030:	4b13      	ldr	r3, [pc, #76]	@ (800f080 <tcp_pcb_remove+0x10c>)
 800f032:	f640 0293 	movw	r2, #2195	@ 0x893
 800f036:	4916      	ldr	r1, [pc, #88]	@ (800f090 <tcp_pcb_remove+0x11c>)
 800f038:	4813      	ldr	r0, [pc, #76]	@ (800f088 <tcp_pcb_remove+0x114>)
 800f03a:	f007 fee9 	bl	8016e10 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f042:	2b00      	cmp	r3, #0
 800f044:	d006      	beq.n	800f054 <tcp_pcb_remove+0xe0>
 800f046:	4b0e      	ldr	r3, [pc, #56]	@ (800f080 <tcp_pcb_remove+0x10c>)
 800f048:	f640 0294 	movw	r2, #2196	@ 0x894
 800f04c:	4911      	ldr	r1, [pc, #68]	@ (800f094 <tcp_pcb_remove+0x120>)
 800f04e:	480e      	ldr	r0, [pc, #56]	@ (800f088 <tcp_pcb_remove+0x114>)
 800f050:	f007 fede 	bl	8016e10 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d006      	beq.n	800f06a <tcp_pcb_remove+0xf6>
 800f05c:	4b08      	ldr	r3, [pc, #32]	@ (800f080 <tcp_pcb_remove+0x10c>)
 800f05e:	f640 0296 	movw	r2, #2198	@ 0x896
 800f062:	490d      	ldr	r1, [pc, #52]	@ (800f098 <tcp_pcb_remove+0x124>)
 800f064:	4808      	ldr	r0, [pc, #32]	@ (800f088 <tcp_pcb_remove+0x114>)
 800f066:	f007 fed3 	bl	8016e10 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	2200      	movs	r2, #0
 800f06e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	2200      	movs	r2, #0
 800f074:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f076:	bf00      	nop
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	08018704 	.word	0x08018704
 800f084:	08018d6c 	.word	0x08018d6c
 800f088:	08018748 	.word	0x08018748
 800f08c:	08018d88 	.word	0x08018d88
 800f090:	08018da8 	.word	0x08018da8
 800f094:	08018dc0 	.word	0x08018dc0
 800f098:	08018ddc 	.word	0x08018ddc

0800f09c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d106      	bne.n	800f0b8 <tcp_next_iss+0x1c>
 800f0aa:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d4 <tcp_next_iss+0x38>)
 800f0ac:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f0b0:	4909      	ldr	r1, [pc, #36]	@ (800f0d8 <tcp_next_iss+0x3c>)
 800f0b2:	480a      	ldr	r0, [pc, #40]	@ (800f0dc <tcp_next_iss+0x40>)
 800f0b4:	f007 feac 	bl	8016e10 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f0b8:	4b09      	ldr	r3, [pc, #36]	@ (800f0e0 <tcp_next_iss+0x44>)
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	4b09      	ldr	r3, [pc, #36]	@ (800f0e4 <tcp_next_iss+0x48>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	4a07      	ldr	r2, [pc, #28]	@ (800f0e0 <tcp_next_iss+0x44>)
 800f0c4:	6013      	str	r3, [r2, #0]
  return iss;
 800f0c6:	4b06      	ldr	r3, [pc, #24]	@ (800f0e0 <tcp_next_iss+0x44>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	08018704 	.word	0x08018704
 800f0d8:	08018df4 	.word	0x08018df4
 800f0dc:	08018748 	.word	0x08018748
 800f0e0:	20000024 	.word	0x20000024
 800f0e4:	2000881c 	.word	0x2000881c

0800f0e8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b086      	sub	sp, #24
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d106      	bne.n	800f10a <tcp_eff_send_mss_netif+0x22>
 800f0fc:	4b14      	ldr	r3, [pc, #80]	@ (800f150 <tcp_eff_send_mss_netif+0x68>)
 800f0fe:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f102:	4914      	ldr	r1, [pc, #80]	@ (800f154 <tcp_eff_send_mss_netif+0x6c>)
 800f104:	4814      	ldr	r0, [pc, #80]	@ (800f158 <tcp_eff_send_mss_netif+0x70>)
 800f106:	f007 fe83 	bl	8016e10 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d101      	bne.n	800f114 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f110:	89fb      	ldrh	r3, [r7, #14]
 800f112:	e019      	b.n	800f148 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f118:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f11a:	8afb      	ldrh	r3, [r7, #22]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d012      	beq.n	800f146 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f120:	2328      	movs	r3, #40	@ 0x28
 800f122:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f124:	8afa      	ldrh	r2, [r7, #22]
 800f126:	8abb      	ldrh	r3, [r7, #20]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d904      	bls.n	800f136 <tcp_eff_send_mss_netif+0x4e>
 800f12c:	8afa      	ldrh	r2, [r7, #22]
 800f12e:	8abb      	ldrh	r3, [r7, #20]
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	b29b      	uxth	r3, r3
 800f134:	e000      	b.n	800f138 <tcp_eff_send_mss_netif+0x50>
 800f136:	2300      	movs	r3, #0
 800f138:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f13a:	8a7a      	ldrh	r2, [r7, #18]
 800f13c:	89fb      	ldrh	r3, [r7, #14]
 800f13e:	4293      	cmp	r3, r2
 800f140:	bf28      	it	cs
 800f142:	4613      	movcs	r3, r2
 800f144:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f146:	89fb      	ldrh	r3, [r7, #14]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3718      	adds	r7, #24
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	08018704 	.word	0x08018704
 800f154:	08018e10 	.word	0x08018e10
 800f158:	08018748 	.word	0x08018748

0800f15c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d119      	bne.n	800f1a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f170:	4b10      	ldr	r3, [pc, #64]	@ (800f1b4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f172:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f176:	4910      	ldr	r1, [pc, #64]	@ (800f1b8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f178:	4810      	ldr	r0, [pc, #64]	@ (800f1bc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f17a:	f007 fe49 	bl	8016e10 <iprintf>

  while (pcb != NULL) {
 800f17e:	e011      	b.n	800f1a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d108      	bne.n	800f19e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f192:	68f8      	ldr	r0, [r7, #12]
 800f194:	f7fe ffc4 	bl	800e120 <tcp_abort>
      pcb = next;
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	e002      	b.n	800f1a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1ea      	bne.n	800f180 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f1aa:	bf00      	nop
 800f1ac:	bf00      	nop
 800f1ae:	3710      	adds	r7, #16
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	08018704 	.word	0x08018704
 800f1b8:	08018e38 	.word	0x08018e38
 800f1bc:	08018748 	.word	0x08018748

0800f1c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d02a      	beq.n	800f226 <tcp_netif_ip_addr_changed+0x66>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d026      	beq.n	800f226 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f1d8:	4b15      	ldr	r3, [pc, #84]	@ (800f230 <tcp_netif_ip_addr_changed+0x70>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4619      	mov	r1, r3
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f7ff ffbc 	bl	800f15c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f1e4:	4b13      	ldr	r3, [pc, #76]	@ (800f234 <tcp_netif_ip_addr_changed+0x74>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7ff ffb6 	bl	800f15c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d017      	beq.n	800f226 <tcp_netif_ip_addr_changed+0x66>
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d013      	beq.n	800f226 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f238 <tcp_netif_ip_addr_changed+0x78>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	60fb      	str	r3, [r7, #12]
 800f204:	e00c      	b.n	800f220 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d103      	bne.n	800f21a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	60fb      	str	r3, [r7, #12]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1ef      	bne.n	800f206 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f226:	bf00      	nop
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	20008828 	.word	0x20008828
 800f234:	20008820 	.word	0x20008820
 800f238:	20008824 	.word	0x20008824

0800f23c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d007      	beq.n	800f25c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f250:	4618      	mov	r0, r3
 800f252:	f7ff fc3d 	bl	800ead0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f25c:	bf00      	nop
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f264:	b590      	push	{r4, r7, lr}
 800f266:	b08d      	sub	sp, #52	@ 0x34
 800f268:	af04      	add	r7, sp, #16
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d105      	bne.n	800f280 <tcp_input+0x1c>
 800f274:	4b9b      	ldr	r3, [pc, #620]	@ (800f4e4 <tcp_input+0x280>)
 800f276:	2283      	movs	r2, #131	@ 0x83
 800f278:	499b      	ldr	r1, [pc, #620]	@ (800f4e8 <tcp_input+0x284>)
 800f27a:	489c      	ldr	r0, [pc, #624]	@ (800f4ec <tcp_input+0x288>)
 800f27c:	f007 fdc8 	bl	8016e10 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	4a9a      	ldr	r2, [pc, #616]	@ (800f4f0 <tcp_input+0x28c>)
 800f286:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	895b      	ldrh	r3, [r3, #10]
 800f28c:	2b13      	cmp	r3, #19
 800f28e:	f240 83d1 	bls.w	800fa34 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f292:	4b98      	ldr	r3, [pc, #608]	@ (800f4f4 <tcp_input+0x290>)
 800f294:	695b      	ldr	r3, [r3, #20]
 800f296:	4a97      	ldr	r2, [pc, #604]	@ (800f4f4 <tcp_input+0x290>)
 800f298:	6812      	ldr	r2, [r2, #0]
 800f29a:	4611      	mov	r1, r2
 800f29c:	4618      	mov	r0, r3
 800f29e:	f005 ff01 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f040 83c7 	bne.w	800fa38 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2aa:	4b92      	ldr	r3, [pc, #584]	@ (800f4f4 <tcp_input+0x290>)
 800f2ac:	695b      	ldr	r3, [r3, #20]
 800f2ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2b2:	2be0      	cmp	r3, #224	@ 0xe0
 800f2b4:	f000 83c0 	beq.w	800fa38 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f2b8:	4b8d      	ldr	r3, [pc, #564]	@ (800f4f0 <tcp_input+0x28c>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	899b      	ldrh	r3, [r3, #12]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fc fe3b 	bl	800bf3c <lwip_htons>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	0b1b      	lsrs	r3, r3, #12
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f2d2:	7cbb      	ldrb	r3, [r7, #18]
 800f2d4:	2b13      	cmp	r3, #19
 800f2d6:	f240 83b1 	bls.w	800fa3c <tcp_input+0x7d8>
 800f2da:	7cbb      	ldrb	r3, [r7, #18]
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	891b      	ldrh	r3, [r3, #8]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	f200 83aa 	bhi.w	800fa3c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f2e8:	7cbb      	ldrb	r3, [r7, #18]
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	3b14      	subs	r3, #20
 800f2ee:	b29a      	uxth	r2, r3
 800f2f0:	4b81      	ldr	r3, [pc, #516]	@ (800f4f8 <tcp_input+0x294>)
 800f2f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f2f4:	4b81      	ldr	r3, [pc, #516]	@ (800f4fc <tcp_input+0x298>)
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	895a      	ldrh	r2, [r3, #10]
 800f2fe:	7cbb      	ldrb	r3, [r7, #18]
 800f300:	b29b      	uxth	r3, r3
 800f302:	429a      	cmp	r2, r3
 800f304:	d309      	bcc.n	800f31a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f306:	4b7c      	ldr	r3, [pc, #496]	@ (800f4f8 <tcp_input+0x294>)
 800f308:	881a      	ldrh	r2, [r3, #0]
 800f30a:	4b7d      	ldr	r3, [pc, #500]	@ (800f500 <tcp_input+0x29c>)
 800f30c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f30e:	7cbb      	ldrb	r3, [r7, #18]
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7fe f8e6 	bl	800d4e4 <pbuf_remove_header>
 800f318:	e04e      	b.n	800f3b8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d105      	bne.n	800f32e <tcp_input+0xca>
 800f322:	4b70      	ldr	r3, [pc, #448]	@ (800f4e4 <tcp_input+0x280>)
 800f324:	22c2      	movs	r2, #194	@ 0xc2
 800f326:	4977      	ldr	r1, [pc, #476]	@ (800f504 <tcp_input+0x2a0>)
 800f328:	4870      	ldr	r0, [pc, #448]	@ (800f4ec <tcp_input+0x288>)
 800f32a:	f007 fd71 	bl	8016e10 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f32e:	2114      	movs	r1, #20
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7fe f8d7 	bl	800d4e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	895a      	ldrh	r2, [r3, #10]
 800f33a:	4b71      	ldr	r3, [pc, #452]	@ (800f500 <tcp_input+0x29c>)
 800f33c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f33e:	4b6e      	ldr	r3, [pc, #440]	@ (800f4f8 <tcp_input+0x294>)
 800f340:	881a      	ldrh	r2, [r3, #0]
 800f342:	4b6f      	ldr	r3, [pc, #444]	@ (800f500 <tcp_input+0x29c>)
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f34a:	4b6d      	ldr	r3, [pc, #436]	@ (800f500 <tcp_input+0x29c>)
 800f34c:	881b      	ldrh	r3, [r3, #0]
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7fe f8c7 	bl	800d4e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	895b      	ldrh	r3, [r3, #10]
 800f35c:	8a3a      	ldrh	r2, [r7, #16]
 800f35e:	429a      	cmp	r2, r3
 800f360:	f200 836e 	bhi.w	800fa40 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	4a64      	ldr	r2, [pc, #400]	@ (800f4fc <tcp_input+0x298>)
 800f36c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	8a3a      	ldrh	r2, [r7, #16]
 800f374:	4611      	mov	r1, r2
 800f376:	4618      	mov	r0, r3
 800f378:	f7fe f8b4 	bl	800d4e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	891a      	ldrh	r2, [r3, #8]
 800f380:	8a3b      	ldrh	r3, [r7, #16]
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	b29a      	uxth	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	895b      	ldrh	r3, [r3, #10]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d005      	beq.n	800f39e <tcp_input+0x13a>
 800f392:	4b54      	ldr	r3, [pc, #336]	@ (800f4e4 <tcp_input+0x280>)
 800f394:	22df      	movs	r2, #223	@ 0xdf
 800f396:	495c      	ldr	r1, [pc, #368]	@ (800f508 <tcp_input+0x2a4>)
 800f398:	4854      	ldr	r0, [pc, #336]	@ (800f4ec <tcp_input+0x288>)
 800f39a:	f007 fd39 	bl	8016e10 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	891a      	ldrh	r2, [r3, #8]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	891b      	ldrh	r3, [r3, #8]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d005      	beq.n	800f3b8 <tcp_input+0x154>
 800f3ac:	4b4d      	ldr	r3, [pc, #308]	@ (800f4e4 <tcp_input+0x280>)
 800f3ae:	22e0      	movs	r2, #224	@ 0xe0
 800f3b0:	4956      	ldr	r1, [pc, #344]	@ (800f50c <tcp_input+0x2a8>)
 800f3b2:	484e      	ldr	r0, [pc, #312]	@ (800f4ec <tcp_input+0x288>)
 800f3b4:	f007 fd2c 	bl	8016e10 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f3b8:	4b4d      	ldr	r3, [pc, #308]	@ (800f4f0 <tcp_input+0x28c>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	881b      	ldrh	r3, [r3, #0]
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4a4b      	ldr	r2, [pc, #300]	@ (800f4f0 <tcp_input+0x28c>)
 800f3c2:	6814      	ldr	r4, [r2, #0]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fc fdb9 	bl	800bf3c <lwip_htons>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f3ce:	4b48      	ldr	r3, [pc, #288]	@ (800f4f0 <tcp_input+0x28c>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	885b      	ldrh	r3, [r3, #2]
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	4a46      	ldr	r2, [pc, #280]	@ (800f4f0 <tcp_input+0x28c>)
 800f3d8:	6814      	ldr	r4, [r2, #0]
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fc fdae 	bl	800bf3c <lwip_htons>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f3e4:	4b42      	ldr	r3, [pc, #264]	@ (800f4f0 <tcp_input+0x28c>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	4a41      	ldr	r2, [pc, #260]	@ (800f4f0 <tcp_input+0x28c>)
 800f3ec:	6814      	ldr	r4, [r2, #0]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fc fdba 	bl	800bf68 <lwip_htonl>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	6063      	str	r3, [r4, #4]
 800f3f8:	6863      	ldr	r3, [r4, #4]
 800f3fa:	4a45      	ldr	r2, [pc, #276]	@ (800f510 <tcp_input+0x2ac>)
 800f3fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f3fe:	4b3c      	ldr	r3, [pc, #240]	@ (800f4f0 <tcp_input+0x28c>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	4a3a      	ldr	r2, [pc, #232]	@ (800f4f0 <tcp_input+0x28c>)
 800f406:	6814      	ldr	r4, [r2, #0]
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fc fdad 	bl	800bf68 <lwip_htonl>
 800f40e:	4603      	mov	r3, r0
 800f410:	60a3      	str	r3, [r4, #8]
 800f412:	68a3      	ldr	r3, [r4, #8]
 800f414:	4a3f      	ldr	r2, [pc, #252]	@ (800f514 <tcp_input+0x2b0>)
 800f416:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f418:	4b35      	ldr	r3, [pc, #212]	@ (800f4f0 <tcp_input+0x28c>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	89db      	ldrh	r3, [r3, #14]
 800f41e:	b29b      	uxth	r3, r3
 800f420:	4a33      	ldr	r2, [pc, #204]	@ (800f4f0 <tcp_input+0x28c>)
 800f422:	6814      	ldr	r4, [r2, #0]
 800f424:	4618      	mov	r0, r3
 800f426:	f7fc fd89 	bl	800bf3c <lwip_htons>
 800f42a:	4603      	mov	r3, r0
 800f42c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f42e:	4b30      	ldr	r3, [pc, #192]	@ (800f4f0 <tcp_input+0x28c>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	899b      	ldrh	r3, [r3, #12]
 800f434:	b29b      	uxth	r3, r3
 800f436:	4618      	mov	r0, r3
 800f438:	f7fc fd80 	bl	800bf3c <lwip_htons>
 800f43c:	4603      	mov	r3, r0
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f444:	b2da      	uxtb	r2, r3
 800f446:	4b34      	ldr	r3, [pc, #208]	@ (800f518 <tcp_input+0x2b4>)
 800f448:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	891a      	ldrh	r2, [r3, #8]
 800f44e:	4b33      	ldr	r3, [pc, #204]	@ (800f51c <tcp_input+0x2b8>)
 800f450:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f452:	4b31      	ldr	r3, [pc, #196]	@ (800f518 <tcp_input+0x2b4>)
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	f003 0303 	and.w	r3, r3, #3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00c      	beq.n	800f478 <tcp_input+0x214>
    tcplen++;
 800f45e:	4b2f      	ldr	r3, [pc, #188]	@ (800f51c <tcp_input+0x2b8>)
 800f460:	881b      	ldrh	r3, [r3, #0]
 800f462:	3301      	adds	r3, #1
 800f464:	b29a      	uxth	r2, r3
 800f466:	4b2d      	ldr	r3, [pc, #180]	@ (800f51c <tcp_input+0x2b8>)
 800f468:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	891a      	ldrh	r2, [r3, #8]
 800f46e:	4b2b      	ldr	r3, [pc, #172]	@ (800f51c <tcp_input+0x2b8>)
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	429a      	cmp	r2, r3
 800f474:	f200 82e6 	bhi.w	800fa44 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f478:	2300      	movs	r3, #0
 800f47a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f47c:	4b28      	ldr	r3, [pc, #160]	@ (800f520 <tcp_input+0x2bc>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	61fb      	str	r3, [r7, #28]
 800f482:	e09d      	b.n	800f5c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	7d1b      	ldrb	r3, [r3, #20]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d105      	bne.n	800f498 <tcp_input+0x234>
 800f48c:	4b15      	ldr	r3, [pc, #84]	@ (800f4e4 <tcp_input+0x280>)
 800f48e:	22fb      	movs	r2, #251	@ 0xfb
 800f490:	4924      	ldr	r1, [pc, #144]	@ (800f524 <tcp_input+0x2c0>)
 800f492:	4816      	ldr	r0, [pc, #88]	@ (800f4ec <tcp_input+0x288>)
 800f494:	f007 fcbc 	bl	8016e10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	7d1b      	ldrb	r3, [r3, #20]
 800f49c:	2b0a      	cmp	r3, #10
 800f49e:	d105      	bne.n	800f4ac <tcp_input+0x248>
 800f4a0:	4b10      	ldr	r3, [pc, #64]	@ (800f4e4 <tcp_input+0x280>)
 800f4a2:	22fc      	movs	r2, #252	@ 0xfc
 800f4a4:	4920      	ldr	r1, [pc, #128]	@ (800f528 <tcp_input+0x2c4>)
 800f4a6:	4811      	ldr	r0, [pc, #68]	@ (800f4ec <tcp_input+0x288>)
 800f4a8:	f007 fcb2 	bl	8016e10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	7d1b      	ldrb	r3, [r3, #20]
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d105      	bne.n	800f4c0 <tcp_input+0x25c>
 800f4b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f4e4 <tcp_input+0x280>)
 800f4b6:	22fd      	movs	r2, #253	@ 0xfd
 800f4b8:	491c      	ldr	r1, [pc, #112]	@ (800f52c <tcp_input+0x2c8>)
 800f4ba:	480c      	ldr	r0, [pc, #48]	@ (800f4ec <tcp_input+0x288>)
 800f4bc:	f007 fca8 	bl	8016e10 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	7a1b      	ldrb	r3, [r3, #8]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d033      	beq.n	800f530 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	7a1a      	ldrb	r2, [r3, #8]
 800f4cc:	4b09      	ldr	r3, [pc, #36]	@ (800f4f4 <tcp_input+0x290>)
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d029      	beq.n	800f530 <tcp_input+0x2cc>
      prev = pcb;
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	61bb      	str	r3, [r7, #24]
      continue;
 800f4e0:	e06b      	b.n	800f5ba <tcp_input+0x356>
 800f4e2:	bf00      	nop
 800f4e4:	08018e6c 	.word	0x08018e6c
 800f4e8:	08018ea0 	.word	0x08018ea0
 800f4ec:	08018eb8 	.word	0x08018eb8
 800f4f0:	20008844 	.word	0x20008844
 800f4f4:	20005900 	.word	0x20005900
 800f4f8:	20008848 	.word	0x20008848
 800f4fc:	2000884c 	.word	0x2000884c
 800f500:	2000884a 	.word	0x2000884a
 800f504:	08018ee0 	.word	0x08018ee0
 800f508:	08018ef0 	.word	0x08018ef0
 800f50c:	08018efc 	.word	0x08018efc
 800f510:	20008854 	.word	0x20008854
 800f514:	20008858 	.word	0x20008858
 800f518:	20008860 	.word	0x20008860
 800f51c:	2000885e 	.word	0x2000885e
 800f520:	20008828 	.word	0x20008828
 800f524:	08018f1c 	.word	0x08018f1c
 800f528:	08018f44 	.word	0x08018f44
 800f52c:	08018f70 	.word	0x08018f70
    }

    if (pcb->remote_port == tcphdr->src &&
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	8b1a      	ldrh	r2, [r3, #24]
 800f534:	4b72      	ldr	r3, [pc, #456]	@ (800f700 <tcp_input+0x49c>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	881b      	ldrh	r3, [r3, #0]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d13a      	bne.n	800f5b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	8ada      	ldrh	r2, [r3, #22]
 800f544:	4b6e      	ldr	r3, [pc, #440]	@ (800f700 <tcp_input+0x49c>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	885b      	ldrh	r3, [r3, #2]
 800f54a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d132      	bne.n	800f5b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f550:	69fb      	ldr	r3, [r7, #28]
 800f552:	685a      	ldr	r2, [r3, #4]
 800f554:	4b6b      	ldr	r3, [pc, #428]	@ (800f704 <tcp_input+0x4a0>)
 800f556:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f558:	429a      	cmp	r2, r3
 800f55a:	d12c      	bne.n	800f5b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	4b68      	ldr	r3, [pc, #416]	@ (800f704 <tcp_input+0x4a0>)
 800f562:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f564:	429a      	cmp	r2, r3
 800f566:	d126      	bne.n	800f5b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	69fa      	ldr	r2, [r7, #28]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d106      	bne.n	800f580 <tcp_input+0x31c>
 800f572:	4b65      	ldr	r3, [pc, #404]	@ (800f708 <tcp_input+0x4a4>)
 800f574:	f240 120d 	movw	r2, #269	@ 0x10d
 800f578:	4964      	ldr	r1, [pc, #400]	@ (800f70c <tcp_input+0x4a8>)
 800f57a:	4865      	ldr	r0, [pc, #404]	@ (800f710 <tcp_input+0x4ac>)
 800f57c:	f007 fc48 	bl	8016e10 <iprintf>
      if (prev != NULL) {
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00a      	beq.n	800f59c <tcp_input+0x338>
        prev->next = pcb->next;
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	68da      	ldr	r2, [r3, #12]
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f58e:	4b61      	ldr	r3, [pc, #388]	@ (800f714 <tcp_input+0x4b0>)
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f596:	4a5f      	ldr	r2, [pc, #380]	@ (800f714 <tcp_input+0x4b0>)
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	69fa      	ldr	r2, [r7, #28]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d111      	bne.n	800f5ca <tcp_input+0x366>
 800f5a6:	4b58      	ldr	r3, [pc, #352]	@ (800f708 <tcp_input+0x4a4>)
 800f5a8:	f240 1215 	movw	r2, #277	@ 0x115
 800f5ac:	495a      	ldr	r1, [pc, #360]	@ (800f718 <tcp_input+0x4b4>)
 800f5ae:	4858      	ldr	r0, [pc, #352]	@ (800f710 <tcp_input+0x4ac>)
 800f5b0:	f007 fc2e 	bl	8016e10 <iprintf>
      break;
 800f5b4:	e009      	b.n	800f5ca <tcp_input+0x366>
    }
    prev = pcb;
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	61fb      	str	r3, [r7, #28]
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f47f af5e 	bne.w	800f484 <tcp_input+0x220>
 800f5c8:	e000      	b.n	800f5cc <tcp_input+0x368>
      break;
 800f5ca:	bf00      	nop
  }

  if (pcb == NULL) {
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f040 80aa 	bne.w	800f728 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5d4:	4b51      	ldr	r3, [pc, #324]	@ (800f71c <tcp_input+0x4b8>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	61fb      	str	r3, [r7, #28]
 800f5da:	e03f      	b.n	800f65c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f5dc:	69fb      	ldr	r3, [r7, #28]
 800f5de:	7d1b      	ldrb	r3, [r3, #20]
 800f5e0:	2b0a      	cmp	r3, #10
 800f5e2:	d006      	beq.n	800f5f2 <tcp_input+0x38e>
 800f5e4:	4b48      	ldr	r3, [pc, #288]	@ (800f708 <tcp_input+0x4a4>)
 800f5e6:	f240 121f 	movw	r2, #287	@ 0x11f
 800f5ea:	494d      	ldr	r1, [pc, #308]	@ (800f720 <tcp_input+0x4bc>)
 800f5ec:	4848      	ldr	r0, [pc, #288]	@ (800f710 <tcp_input+0x4ac>)
 800f5ee:	f007 fc0f 	bl	8016e10 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	7a1b      	ldrb	r3, [r3, #8]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d009      	beq.n	800f60e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	7a1a      	ldrb	r2, [r3, #8]
 800f5fe:	4b41      	ldr	r3, [pc, #260]	@ (800f704 <tcp_input+0x4a0>)
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f606:	3301      	adds	r3, #1
 800f608:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d122      	bne.n	800f654 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	8b1a      	ldrh	r2, [r3, #24]
 800f612:	4b3b      	ldr	r3, [pc, #236]	@ (800f700 <tcp_input+0x49c>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	b29b      	uxth	r3, r3
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d11b      	bne.n	800f656 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	8ada      	ldrh	r2, [r3, #22]
 800f622:	4b37      	ldr	r3, [pc, #220]	@ (800f700 <tcp_input+0x49c>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	885b      	ldrh	r3, [r3, #2]
 800f628:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d113      	bne.n	800f656 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	685a      	ldr	r2, [r3, #4]
 800f632:	4b34      	ldr	r3, [pc, #208]	@ (800f704 <tcp_input+0x4a0>)
 800f634:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f636:	429a      	cmp	r2, r3
 800f638:	d10d      	bne.n	800f656 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	4b31      	ldr	r3, [pc, #196]	@ (800f704 <tcp_input+0x4a0>)
 800f640:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f642:	429a      	cmp	r2, r3
 800f644:	d107      	bne.n	800f656 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f646:	69f8      	ldr	r0, [r7, #28]
 800f648:	f000 fb56 	bl	800fcf8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7fd ffcf 	bl	800d5f0 <pbuf_free>
        return;
 800f652:	e1fd      	b.n	800fa50 <tcp_input+0x7ec>
        continue;
 800f654:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	61fb      	str	r3, [r7, #28]
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1bc      	bne.n	800f5dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f662:	2300      	movs	r3, #0
 800f664:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f666:	4b2f      	ldr	r3, [pc, #188]	@ (800f724 <tcp_input+0x4c0>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	617b      	str	r3, [r7, #20]
 800f66c:	e02a      	b.n	800f6c4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	7a1b      	ldrb	r3, [r3, #8]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00c      	beq.n	800f690 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	7a1a      	ldrb	r2, [r3, #8]
 800f67a:	4b22      	ldr	r3, [pc, #136]	@ (800f704 <tcp_input+0x4a0>)
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f682:	3301      	adds	r3, #1
 800f684:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f686:	429a      	cmp	r2, r3
 800f688:	d002      	beq.n	800f690 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	61bb      	str	r3, [r7, #24]
        continue;
 800f68e:	e016      	b.n	800f6be <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	8ada      	ldrh	r2, [r3, #22]
 800f694:	4b1a      	ldr	r3, [pc, #104]	@ (800f700 <tcp_input+0x49c>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	885b      	ldrh	r3, [r3, #2]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d10c      	bne.n	800f6ba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	4b17      	ldr	r3, [pc, #92]	@ (800f704 <tcp_input+0x4a0>)
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d00f      	beq.n	800f6cc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00d      	beq.n	800f6ce <tcp_input+0x46a>
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d009      	beq.n	800f6ce <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	617b      	str	r3, [r7, #20]
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1d1      	bne.n	800f66e <tcp_input+0x40a>
 800f6ca:	e000      	b.n	800f6ce <tcp_input+0x46a>
            break;
 800f6cc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d029      	beq.n	800f728 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00a      	beq.n	800f6f0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	68da      	ldr	r2, [r3, #12]
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f6e2:	4b10      	ldr	r3, [pc, #64]	@ (800f724 <tcp_input+0x4c0>)
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f6ea:	4a0e      	ldr	r2, [pc, #56]	@ (800f724 <tcp_input+0x4c0>)
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f6f0:	6978      	ldr	r0, [r7, #20]
 800f6f2:	f000 fa03 	bl	800fafc <tcp_listen_input>
      }
      pbuf_free(p);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7fd ff7a 	bl	800d5f0 <pbuf_free>
      return;
 800f6fc:	e1a8      	b.n	800fa50 <tcp_input+0x7ec>
 800f6fe:	bf00      	nop
 800f700:	20008844 	.word	0x20008844
 800f704:	20005900 	.word	0x20005900
 800f708:	08018e6c 	.word	0x08018e6c
 800f70c:	08018f98 	.word	0x08018f98
 800f710:	08018eb8 	.word	0x08018eb8
 800f714:	20008828 	.word	0x20008828
 800f718:	08018fc4 	.word	0x08018fc4
 800f71c:	2000882c 	.word	0x2000882c
 800f720:	08018ff0 	.word	0x08018ff0
 800f724:	20008824 	.word	0x20008824
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f000 8158 	beq.w	800f9e0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f730:	4b95      	ldr	r3, [pc, #596]	@ (800f988 <tcp_input+0x724>)
 800f732:	2200      	movs	r2, #0
 800f734:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	891a      	ldrh	r2, [r3, #8]
 800f73a:	4b93      	ldr	r3, [pc, #588]	@ (800f988 <tcp_input+0x724>)
 800f73c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f73e:	4a92      	ldr	r2, [pc, #584]	@ (800f988 <tcp_input+0x724>)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f744:	4b91      	ldr	r3, [pc, #580]	@ (800f98c <tcp_input+0x728>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a8f      	ldr	r2, [pc, #572]	@ (800f988 <tcp_input+0x724>)
 800f74a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f74c:	4b90      	ldr	r3, [pc, #576]	@ (800f990 <tcp_input+0x72c>)
 800f74e:	2200      	movs	r2, #0
 800f750:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f752:	4b90      	ldr	r3, [pc, #576]	@ (800f994 <tcp_input+0x730>)
 800f754:	2200      	movs	r2, #0
 800f756:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f758:	4b8f      	ldr	r3, [pc, #572]	@ (800f998 <tcp_input+0x734>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f75e:	4b8f      	ldr	r3, [pc, #572]	@ (800f99c <tcp_input+0x738>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	f003 0308 	and.w	r3, r3, #8
 800f766:	2b00      	cmp	r3, #0
 800f768:	d006      	beq.n	800f778 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	7b5b      	ldrb	r3, [r3, #13]
 800f76e:	f043 0301 	orr.w	r3, r3, #1
 800f772:	b2da      	uxtb	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d017      	beq.n	800f7b0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f780:	69f8      	ldr	r0, [r7, #28]
 800f782:	f7ff f929 	bl	800e9d8 <tcp_process_refused_data>
 800f786:	4603      	mov	r3, r0
 800f788:	f113 0f0d 	cmn.w	r3, #13
 800f78c:	d007      	beq.n	800f79e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00c      	beq.n	800f7b0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f796:	4b82      	ldr	r3, [pc, #520]	@ (800f9a0 <tcp_input+0x73c>)
 800f798:	881b      	ldrh	r3, [r3, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d008      	beq.n	800f7b0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	f040 80e3 	bne.w	800f96e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f7a8:	69f8      	ldr	r0, [r7, #28]
 800f7aa:	f003 f9a7 	bl	8012afc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f7ae:	e0de      	b.n	800f96e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f7b0:	4a7c      	ldr	r2, [pc, #496]	@ (800f9a4 <tcp_input+0x740>)
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f7b6:	69f8      	ldr	r0, [r7, #28]
 800f7b8:	f000 fb18 	bl	800fdec <tcp_process>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f7c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7c4:	f113 0f0d 	cmn.w	r3, #13
 800f7c8:	f000 80d3 	beq.w	800f972 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f7cc:	4b71      	ldr	r3, [pc, #452]	@ (800f994 <tcp_input+0x730>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	f003 0308 	and.w	r3, r3, #8
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d015      	beq.n	800f804 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d008      	beq.n	800f7f4 <tcp_input+0x590>
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7e8:	69fa      	ldr	r2, [r7, #28]
 800f7ea:	6912      	ldr	r2, [r2, #16]
 800f7ec:	f06f 010d 	mvn.w	r1, #13
 800f7f0:	4610      	mov	r0, r2
 800f7f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f7f4:	69f9      	ldr	r1, [r7, #28]
 800f7f6:	486c      	ldr	r0, [pc, #432]	@ (800f9a8 <tcp_input+0x744>)
 800f7f8:	f7ff fbbc 	bl	800ef74 <tcp_pcb_remove>
        tcp_free(pcb);
 800f7fc:	69f8      	ldr	r0, [r7, #28]
 800f7fe:	f7fe f9a7 	bl	800db50 <tcp_free>
 800f802:	e0da      	b.n	800f9ba <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f804:	2300      	movs	r3, #0
 800f806:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f808:	4b63      	ldr	r3, [pc, #396]	@ (800f998 <tcp_input+0x734>)
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d01d      	beq.n	800f84c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f810:	4b61      	ldr	r3, [pc, #388]	@ (800f998 <tcp_input+0x734>)
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00a      	beq.n	800f836 <tcp_input+0x5d2>
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f826:	69fa      	ldr	r2, [r7, #28]
 800f828:	6910      	ldr	r0, [r2, #16]
 800f82a:	89fa      	ldrh	r2, [r7, #14]
 800f82c:	69f9      	ldr	r1, [r7, #28]
 800f82e:	4798      	blx	r3
 800f830:	4603      	mov	r3, r0
 800f832:	74fb      	strb	r3, [r7, #19]
 800f834:	e001      	b.n	800f83a <tcp_input+0x5d6>
 800f836:	2300      	movs	r3, #0
 800f838:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f83a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f83e:	f113 0f0d 	cmn.w	r3, #13
 800f842:	f000 8098 	beq.w	800f976 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f846:	4b54      	ldr	r3, [pc, #336]	@ (800f998 <tcp_input+0x734>)
 800f848:	2200      	movs	r2, #0
 800f84a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f84c:	69f8      	ldr	r0, [r7, #28]
 800f84e:	f000 f915 	bl	800fa7c <tcp_input_delayed_close>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	f040 8090 	bne.w	800f97a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f85a:	4b4d      	ldr	r3, [pc, #308]	@ (800f990 <tcp_input+0x72c>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d041      	beq.n	800f8e6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f866:	2b00      	cmp	r3, #0
 800f868:	d006      	beq.n	800f878 <tcp_input+0x614>
 800f86a:	4b50      	ldr	r3, [pc, #320]	@ (800f9ac <tcp_input+0x748>)
 800f86c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f870:	494f      	ldr	r1, [pc, #316]	@ (800f9b0 <tcp_input+0x74c>)
 800f872:	4850      	ldr	r0, [pc, #320]	@ (800f9b4 <tcp_input+0x750>)
 800f874:	f007 facc 	bl	8016e10 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	8b5b      	ldrh	r3, [r3, #26]
 800f87c:	f003 0310 	and.w	r3, r3, #16
 800f880:	2b00      	cmp	r3, #0
 800f882:	d008      	beq.n	800f896 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f884:	4b42      	ldr	r3, [pc, #264]	@ (800f990 <tcp_input+0x72c>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fd feb1 	bl	800d5f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f88e:	69f8      	ldr	r0, [r7, #28]
 800f890:	f7fe fc46 	bl	800e120 <tcp_abort>
            goto aborted;
 800f894:	e091      	b.n	800f9ba <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00c      	beq.n	800f8ba <tcp_input+0x656>
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	6918      	ldr	r0, [r3, #16]
 800f8aa:	4b39      	ldr	r3, [pc, #228]	@ (800f990 <tcp_input+0x72c>)
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	69f9      	ldr	r1, [r7, #28]
 800f8b2:	47a0      	blx	r4
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	74fb      	strb	r3, [r7, #19]
 800f8b8:	e008      	b.n	800f8cc <tcp_input+0x668>
 800f8ba:	4b35      	ldr	r3, [pc, #212]	@ (800f990 <tcp_input+0x72c>)
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	2300      	movs	r3, #0
 800f8c0:	69f9      	ldr	r1, [r7, #28]
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	f7ff f95e 	bl	800eb84 <tcp_recv_null>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f8cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8d0:	f113 0f0d 	cmn.w	r3, #13
 800f8d4:	d053      	beq.n	800f97e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f8d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f8de:	4b2c      	ldr	r3, [pc, #176]	@ (800f990 <tcp_input+0x72c>)
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f8e6:	4b2b      	ldr	r3, [pc, #172]	@ (800f994 <tcp_input+0x730>)
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	f003 0320 	and.w	r3, r3, #32
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d030      	beq.n	800f954 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d009      	beq.n	800f90e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8fe:	7b5a      	ldrb	r2, [r3, #13]
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f904:	f042 0220 	orr.w	r2, r2, #32
 800f908:	b2d2      	uxtb	r2, r2
 800f90a:	735a      	strb	r2, [r3, #13]
 800f90c:	e022      	b.n	800f954 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f912:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f916:	d005      	beq.n	800f924 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f91c:	3301      	adds	r3, #1
 800f91e:	b29a      	uxth	r2, r3
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00b      	beq.n	800f946 <tcp_input+0x6e2>
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	6918      	ldr	r0, [r3, #16]
 800f938:	2300      	movs	r3, #0
 800f93a:	2200      	movs	r2, #0
 800f93c:	69f9      	ldr	r1, [r7, #28]
 800f93e:	47a0      	blx	r4
 800f940:	4603      	mov	r3, r0
 800f942:	74fb      	strb	r3, [r7, #19]
 800f944:	e001      	b.n	800f94a <tcp_input+0x6e6>
 800f946:	2300      	movs	r3, #0
 800f948:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f94a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f94e:	f113 0f0d 	cmn.w	r3, #13
 800f952:	d016      	beq.n	800f982 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f954:	4b13      	ldr	r3, [pc, #76]	@ (800f9a4 <tcp_input+0x740>)
 800f956:	2200      	movs	r2, #0
 800f958:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f95a:	69f8      	ldr	r0, [r7, #28]
 800f95c:	f000 f88e 	bl	800fa7c <tcp_input_delayed_close>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d128      	bne.n	800f9b8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f966:	69f8      	ldr	r0, [r7, #28]
 800f968:	f002 fac2 	bl	8011ef0 <tcp_output>
 800f96c:	e025      	b.n	800f9ba <tcp_input+0x756>
        goto aborted;
 800f96e:	bf00      	nop
 800f970:	e023      	b.n	800f9ba <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f972:	bf00      	nop
 800f974:	e021      	b.n	800f9ba <tcp_input+0x756>
              goto aborted;
 800f976:	bf00      	nop
 800f978:	e01f      	b.n	800f9ba <tcp_input+0x756>
          goto aborted;
 800f97a:	bf00      	nop
 800f97c:	e01d      	b.n	800f9ba <tcp_input+0x756>
            goto aborted;
 800f97e:	bf00      	nop
 800f980:	e01b      	b.n	800f9ba <tcp_input+0x756>
              goto aborted;
 800f982:	bf00      	nop
 800f984:	e019      	b.n	800f9ba <tcp_input+0x756>
 800f986:	bf00      	nop
 800f988:	20008834 	.word	0x20008834
 800f98c:	20008844 	.word	0x20008844
 800f990:	20008864 	.word	0x20008864
 800f994:	20008861 	.word	0x20008861
 800f998:	2000885c 	.word	0x2000885c
 800f99c:	20008860 	.word	0x20008860
 800f9a0:	2000885e 	.word	0x2000885e
 800f9a4:	20008868 	.word	0x20008868
 800f9a8:	20008828 	.word	0x20008828
 800f9ac:	08018e6c 	.word	0x08018e6c
 800f9b0:	08019020 	.word	0x08019020
 800f9b4:	08018eb8 	.word	0x08018eb8
          goto aborted;
 800f9b8:	bf00      	nop
    tcp_input_pcb = NULL;
 800f9ba:	4b27      	ldr	r3, [pc, #156]	@ (800fa58 <tcp_input+0x7f4>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f9c0:	4b26      	ldr	r3, [pc, #152]	@ (800fa5c <tcp_input+0x7f8>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f9c6:	4b26      	ldr	r3, [pc, #152]	@ (800fa60 <tcp_input+0x7fc>)
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d03f      	beq.n	800fa4e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f9ce:	4b24      	ldr	r3, [pc, #144]	@ (800fa60 <tcp_input+0x7fc>)
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fd fe0c 	bl	800d5f0 <pbuf_free>
      inseg.p = NULL;
 800f9d8:	4b21      	ldr	r3, [pc, #132]	@ (800fa60 <tcp_input+0x7fc>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f9de:	e036      	b.n	800fa4e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f9e0:	4b20      	ldr	r3, [pc, #128]	@ (800fa64 <tcp_input+0x800>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	899b      	ldrh	r3, [r3, #12]
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7fc faa7 	bl	800bf3c <lwip_htons>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	f003 0304 	and.w	r3, r3, #4
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d118      	bne.n	800fa2c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9fa:	4b1b      	ldr	r3, [pc, #108]	@ (800fa68 <tcp_input+0x804>)
 800f9fc:	6819      	ldr	r1, [r3, #0]
 800f9fe:	4b1b      	ldr	r3, [pc, #108]	@ (800fa6c <tcp_input+0x808>)
 800fa00:	881b      	ldrh	r3, [r3, #0]
 800fa02:	461a      	mov	r2, r3
 800fa04:	4b1a      	ldr	r3, [pc, #104]	@ (800fa70 <tcp_input+0x80c>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa0a:	4b16      	ldr	r3, [pc, #88]	@ (800fa64 <tcp_input+0x800>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa0e:	885b      	ldrh	r3, [r3, #2]
 800fa10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa12:	4a14      	ldr	r2, [pc, #80]	@ (800fa64 <tcp_input+0x800>)
 800fa14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa16:	8812      	ldrh	r2, [r2, #0]
 800fa18:	b292      	uxth	r2, r2
 800fa1a:	9202      	str	r2, [sp, #8]
 800fa1c:	9301      	str	r3, [sp, #4]
 800fa1e:	4b15      	ldr	r3, [pc, #84]	@ (800fa74 <tcp_input+0x810>)
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	4b15      	ldr	r3, [pc, #84]	@ (800fa78 <tcp_input+0x814>)
 800fa24:	4602      	mov	r2, r0
 800fa26:	2000      	movs	r0, #0
 800fa28:	f003 f816 	bl	8012a58 <tcp_rst>
    pbuf_free(p);
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7fd fddf 	bl	800d5f0 <pbuf_free>
  return;
 800fa32:	e00c      	b.n	800fa4e <tcp_input+0x7ea>
    goto dropped;
 800fa34:	bf00      	nop
 800fa36:	e006      	b.n	800fa46 <tcp_input+0x7e2>
    goto dropped;
 800fa38:	bf00      	nop
 800fa3a:	e004      	b.n	800fa46 <tcp_input+0x7e2>
    goto dropped;
 800fa3c:	bf00      	nop
 800fa3e:	e002      	b.n	800fa46 <tcp_input+0x7e2>
      goto dropped;
 800fa40:	bf00      	nop
 800fa42:	e000      	b.n	800fa46 <tcp_input+0x7e2>
      goto dropped;
 800fa44:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f7fd fdd2 	bl	800d5f0 <pbuf_free>
 800fa4c:	e000      	b.n	800fa50 <tcp_input+0x7ec>
  return;
 800fa4e:	bf00      	nop
}
 800fa50:	3724      	adds	r7, #36	@ 0x24
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd90      	pop	{r4, r7, pc}
 800fa56:	bf00      	nop
 800fa58:	20008868 	.word	0x20008868
 800fa5c:	20008864 	.word	0x20008864
 800fa60:	20008834 	.word	0x20008834
 800fa64:	20008844 	.word	0x20008844
 800fa68:	20008858 	.word	0x20008858
 800fa6c:	2000885e 	.word	0x2000885e
 800fa70:	20008854 	.word	0x20008854
 800fa74:	20005910 	.word	0x20005910
 800fa78:	20005914 	.word	0x20005914

0800fa7c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d106      	bne.n	800fa98 <tcp_input_delayed_close+0x1c>
 800fa8a:	4b17      	ldr	r3, [pc, #92]	@ (800fae8 <tcp_input_delayed_close+0x6c>)
 800fa8c:	f240 225a 	movw	r2, #602	@ 0x25a
 800fa90:	4916      	ldr	r1, [pc, #88]	@ (800faec <tcp_input_delayed_close+0x70>)
 800fa92:	4817      	ldr	r0, [pc, #92]	@ (800faf0 <tcp_input_delayed_close+0x74>)
 800fa94:	f007 f9bc 	bl	8016e10 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fa98:	4b16      	ldr	r3, [pc, #88]	@ (800faf4 <tcp_input_delayed_close+0x78>)
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	f003 0310 	and.w	r3, r3, #16
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d01c      	beq.n	800fade <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	8b5b      	ldrh	r3, [r3, #26]
 800faa8:	f003 0310 	and.w	r3, r3, #16
 800faac:	2b00      	cmp	r3, #0
 800faae:	d10d      	bne.n	800facc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d008      	beq.n	800facc <tcp_input_delayed_close+0x50>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	6912      	ldr	r2, [r2, #16]
 800fac4:	f06f 010e 	mvn.w	r1, #14
 800fac8:	4610      	mov	r0, r2
 800faca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800facc:	6879      	ldr	r1, [r7, #4]
 800face:	480a      	ldr	r0, [pc, #40]	@ (800faf8 <tcp_input_delayed_close+0x7c>)
 800fad0:	f7ff fa50 	bl	800ef74 <tcp_pcb_remove>
    tcp_free(pcb);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7fe f83b 	bl	800db50 <tcp_free>
    return 1;
 800fada:	2301      	movs	r3, #1
 800fadc:	e000      	b.n	800fae0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	08018e6c 	.word	0x08018e6c
 800faec:	0801903c 	.word	0x0801903c
 800faf0:	08018eb8 	.word	0x08018eb8
 800faf4:	20008861 	.word	0x20008861
 800faf8:	20008828 	.word	0x20008828

0800fafc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fafc:	b590      	push	{r4, r7, lr}
 800fafe:	b08b      	sub	sp, #44	@ 0x2c
 800fb00:	af04      	add	r7, sp, #16
 800fb02:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fb04:	4b6f      	ldr	r3, [pc, #444]	@ (800fcc4 <tcp_listen_input+0x1c8>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	f003 0304 	and.w	r3, r3, #4
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f040 80d2 	bne.w	800fcb6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d106      	bne.n	800fb26 <tcp_listen_input+0x2a>
 800fb18:	4b6b      	ldr	r3, [pc, #428]	@ (800fcc8 <tcp_listen_input+0x1cc>)
 800fb1a:	f240 2281 	movw	r2, #641	@ 0x281
 800fb1e:	496b      	ldr	r1, [pc, #428]	@ (800fccc <tcp_listen_input+0x1d0>)
 800fb20:	486b      	ldr	r0, [pc, #428]	@ (800fcd0 <tcp_listen_input+0x1d4>)
 800fb22:	f007 f975 	bl	8016e10 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fb26:	4b67      	ldr	r3, [pc, #412]	@ (800fcc4 <tcp_listen_input+0x1c8>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	f003 0310 	and.w	r3, r3, #16
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d019      	beq.n	800fb66 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb32:	4b68      	ldr	r3, [pc, #416]	@ (800fcd4 <tcp_listen_input+0x1d8>)
 800fb34:	6819      	ldr	r1, [r3, #0]
 800fb36:	4b68      	ldr	r3, [pc, #416]	@ (800fcd8 <tcp_listen_input+0x1dc>)
 800fb38:	881b      	ldrh	r3, [r3, #0]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	4b67      	ldr	r3, [pc, #412]	@ (800fcdc <tcp_listen_input+0x1e0>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb42:	4b67      	ldr	r3, [pc, #412]	@ (800fce0 <tcp_listen_input+0x1e4>)
 800fb44:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb46:	885b      	ldrh	r3, [r3, #2]
 800fb48:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb4a:	4a65      	ldr	r2, [pc, #404]	@ (800fce0 <tcp_listen_input+0x1e4>)
 800fb4c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb4e:	8812      	ldrh	r2, [r2, #0]
 800fb50:	b292      	uxth	r2, r2
 800fb52:	9202      	str	r2, [sp, #8]
 800fb54:	9301      	str	r3, [sp, #4]
 800fb56:	4b63      	ldr	r3, [pc, #396]	@ (800fce4 <tcp_listen_input+0x1e8>)
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	4b63      	ldr	r3, [pc, #396]	@ (800fce8 <tcp_listen_input+0x1ec>)
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f002 ff7a 	bl	8012a58 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fb64:	e0a9      	b.n	800fcba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fb66:	4b57      	ldr	r3, [pc, #348]	@ (800fcc4 <tcp_listen_input+0x1c8>)
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	f003 0302 	and.w	r3, r3, #2
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f000 80a3 	beq.w	800fcba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	7d5b      	ldrb	r3, [r3, #21]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff f927 	bl	800edcc <tcp_alloc>
 800fb7e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d111      	bne.n	800fbaa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	699b      	ldr	r3, [r3, #24]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00a      	beq.n	800fba4 <tcp_listen_input+0xa8>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	699b      	ldr	r3, [r3, #24]
 800fb92:	687a      	ldr	r2, [r7, #4]
 800fb94:	6910      	ldr	r0, [r2, #16]
 800fb96:	f04f 32ff 	mov.w	r2, #4294967295
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	4798      	blx	r3
 800fb9e:	4603      	mov	r3, r0
 800fba0:	73bb      	strb	r3, [r7, #14]
      return;
 800fba2:	e08b      	b.n	800fcbc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fba4:	23f0      	movs	r3, #240	@ 0xf0
 800fba6:	73bb      	strb	r3, [r7, #14]
      return;
 800fba8:	e088      	b.n	800fcbc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fbaa:	4b50      	ldr	r3, [pc, #320]	@ (800fcec <tcp_listen_input+0x1f0>)
 800fbac:	695a      	ldr	r2, [r3, #20]
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fbb2:	4b4e      	ldr	r3, [pc, #312]	@ (800fcec <tcp_listen_input+0x1f0>)
 800fbb4:	691a      	ldr	r2, [r3, #16]
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	8ada      	ldrh	r2, [r3, #22]
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fbc2:	4b47      	ldr	r3, [pc, #284]	@ (800fce0 <tcp_listen_input+0x1e4>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	881b      	ldrh	r3, [r3, #0]
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	2203      	movs	r2, #3
 800fbd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fbd4:	4b41      	ldr	r3, [pc, #260]	@ (800fcdc <tcp_listen_input+0x1e0>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	1c5a      	adds	r2, r3, #1
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fbe6:	6978      	ldr	r0, [r7, #20]
 800fbe8:	f7ff fa58 	bl	800f09c <tcp_next_iss>
 800fbec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	693a      	ldr	r2, [r7, #16]
 800fbf2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	693a      	ldr	r2, [r7, #16]
 800fbf8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	693a      	ldr	r2, [r7, #16]
 800fbfe:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	693a      	ldr	r2, [r7, #16]
 800fc04:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fc06:	4b35      	ldr	r3, [pc, #212]	@ (800fcdc <tcp_listen_input+0x1e0>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	1e5a      	subs	r2, r3, #1
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	691a      	ldr	r2, [r3, #16]
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	7a5b      	ldrb	r3, [r3, #9]
 800fc22:	f003 030c 	and.w	r3, r3, #12
 800fc26:	b2da      	uxtb	r2, r3
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	7a1a      	ldrb	r2, [r3, #8]
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fc34:	4b2e      	ldr	r3, [pc, #184]	@ (800fcf0 <tcp_listen_input+0x1f4>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	60da      	str	r2, [r3, #12]
 800fc3c:	4a2c      	ldr	r2, [pc, #176]	@ (800fcf0 <tcp_listen_input+0x1f4>)
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	f003 f8cb 	bl	8012ddc <tcp_timer_needed>
 800fc46:	4b2b      	ldr	r3, [pc, #172]	@ (800fcf4 <tcp_listen_input+0x1f8>)
 800fc48:	2201      	movs	r2, #1
 800fc4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fc4c:	6978      	ldr	r0, [r7, #20]
 800fc4e:	f001 fd8b 	bl	8011768 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fc52:	4b23      	ldr	r3, [pc, #140]	@ (800fce0 <tcp_listen_input+0x1e4>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	89db      	ldrh	r3, [r3, #14]
 800fc58:	b29a      	uxth	r2, r3
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	3304      	adds	r3, #4
 800fc74:	4618      	mov	r0, r3
 800fc76:	f004 ff7f 	bl	8014b78 <ip4_route>
 800fc7a:	4601      	mov	r1, r0
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	3304      	adds	r3, #4
 800fc80:	461a      	mov	r2, r3
 800fc82:	4620      	mov	r0, r4
 800fc84:	f7ff fa30 	bl	800f0e8 <tcp_eff_send_mss_netif>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fc90:	2112      	movs	r1, #18
 800fc92:	6978      	ldr	r0, [r7, #20]
 800fc94:	f002 f83e 	bl	8011d14 <tcp_enqueue_flags>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fc9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d004      	beq.n	800fcae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fca4:	2100      	movs	r1, #0
 800fca6:	6978      	ldr	r0, [r7, #20]
 800fca8:	f7fe f97c 	bl	800dfa4 <tcp_abandon>
      return;
 800fcac:	e006      	b.n	800fcbc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fcae:	6978      	ldr	r0, [r7, #20]
 800fcb0:	f002 f91e 	bl	8011ef0 <tcp_output>
  return;
 800fcb4:	e001      	b.n	800fcba <tcp_listen_input+0x1be>
    return;
 800fcb6:	bf00      	nop
 800fcb8:	e000      	b.n	800fcbc <tcp_listen_input+0x1c0>
  return;
 800fcba:	bf00      	nop
}
 800fcbc:	371c      	adds	r7, #28
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd90      	pop	{r4, r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20008860 	.word	0x20008860
 800fcc8:	08018e6c 	.word	0x08018e6c
 800fccc:	08019064 	.word	0x08019064
 800fcd0:	08018eb8 	.word	0x08018eb8
 800fcd4:	20008858 	.word	0x20008858
 800fcd8:	2000885e 	.word	0x2000885e
 800fcdc:	20008854 	.word	0x20008854
 800fce0:	20008844 	.word	0x20008844
 800fce4:	20005910 	.word	0x20005910
 800fce8:	20005914 	.word	0x20005914
 800fcec:	20005900 	.word	0x20005900
 800fcf0:	20008828 	.word	0x20008828
 800fcf4:	20008830 	.word	0x20008830

0800fcf8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af04      	add	r7, sp, #16
 800fcfe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fd00:	4b2f      	ldr	r3, [pc, #188]	@ (800fdc0 <tcp_timewait_input+0xc8>)
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	f003 0304 	and.w	r3, r3, #4
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d153      	bne.n	800fdb4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d106      	bne.n	800fd20 <tcp_timewait_input+0x28>
 800fd12:	4b2c      	ldr	r3, [pc, #176]	@ (800fdc4 <tcp_timewait_input+0xcc>)
 800fd14:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fd18:	492b      	ldr	r1, [pc, #172]	@ (800fdc8 <tcp_timewait_input+0xd0>)
 800fd1a:	482c      	ldr	r0, [pc, #176]	@ (800fdcc <tcp_timewait_input+0xd4>)
 800fd1c:	f007 f878 	bl	8016e10 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fd20:	4b27      	ldr	r3, [pc, #156]	@ (800fdc0 <tcp_timewait_input+0xc8>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	f003 0302 	and.w	r3, r3, #2
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d02a      	beq.n	800fd82 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fd2c:	4b28      	ldr	r3, [pc, #160]	@ (800fdd0 <tcp_timewait_input+0xd8>)
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd34:	1ad3      	subs	r3, r2, r3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	db2d      	blt.n	800fd96 <tcp_timewait_input+0x9e>
 800fd3a:	4b25      	ldr	r3, [pc, #148]	@ (800fdd0 <tcp_timewait_input+0xd8>)
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd42:	6879      	ldr	r1, [r7, #4]
 800fd44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fd46:	440b      	add	r3, r1
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	dc23      	bgt.n	800fd96 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd4e:	4b21      	ldr	r3, [pc, #132]	@ (800fdd4 <tcp_timewait_input+0xdc>)
 800fd50:	6819      	ldr	r1, [r3, #0]
 800fd52:	4b21      	ldr	r3, [pc, #132]	@ (800fdd8 <tcp_timewait_input+0xe0>)
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	461a      	mov	r2, r3
 800fd58:	4b1d      	ldr	r3, [pc, #116]	@ (800fdd0 <tcp_timewait_input+0xd8>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd5e:	4b1f      	ldr	r3, [pc, #124]	@ (800fddc <tcp_timewait_input+0xe4>)
 800fd60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd62:	885b      	ldrh	r3, [r3, #2]
 800fd64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd66:	4a1d      	ldr	r2, [pc, #116]	@ (800fddc <tcp_timewait_input+0xe4>)
 800fd68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd6a:	8812      	ldrh	r2, [r2, #0]
 800fd6c:	b292      	uxth	r2, r2
 800fd6e:	9202      	str	r2, [sp, #8]
 800fd70:	9301      	str	r3, [sp, #4]
 800fd72:	4b1b      	ldr	r3, [pc, #108]	@ (800fde0 <tcp_timewait_input+0xe8>)
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	4b1b      	ldr	r3, [pc, #108]	@ (800fde4 <tcp_timewait_input+0xec>)
 800fd78:	4602      	mov	r2, r0
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f002 fe6c 	bl	8012a58 <tcp_rst>
      return;
 800fd80:	e01b      	b.n	800fdba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fd82:	4b0f      	ldr	r3, [pc, #60]	@ (800fdc0 <tcp_timewait_input+0xc8>)
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	f003 0301 	and.w	r3, r3, #1
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fd8e:	4b16      	ldr	r3, [pc, #88]	@ (800fde8 <tcp_timewait_input+0xf0>)
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fd96:	4b10      	ldr	r3, [pc, #64]	@ (800fdd8 <tcp_timewait_input+0xe0>)
 800fd98:	881b      	ldrh	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00c      	beq.n	800fdb8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	8b5b      	ldrh	r3, [r3, #26]
 800fda2:	f043 0302 	orr.w	r3, r3, #2
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f002 f89f 	bl	8011ef0 <tcp_output>
  }
  return;
 800fdb2:	e001      	b.n	800fdb8 <tcp_timewait_input+0xc0>
    return;
 800fdb4:	bf00      	nop
 800fdb6:	e000      	b.n	800fdba <tcp_timewait_input+0xc2>
  return;
 800fdb8:	bf00      	nop
}
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	20008860 	.word	0x20008860
 800fdc4:	08018e6c 	.word	0x08018e6c
 800fdc8:	08019084 	.word	0x08019084
 800fdcc:	08018eb8 	.word	0x08018eb8
 800fdd0:	20008854 	.word	0x20008854
 800fdd4:	20008858 	.word	0x20008858
 800fdd8:	2000885e 	.word	0x2000885e
 800fddc:	20008844 	.word	0x20008844
 800fde0:	20005910 	.word	0x20005910
 800fde4:	20005914 	.word	0x20005914
 800fde8:	2000881c 	.word	0x2000881c

0800fdec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fdec:	b590      	push	{r4, r7, lr}
 800fdee:	b08d      	sub	sp, #52	@ 0x34
 800fdf0:	af04      	add	r7, sp, #16
 800fdf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d106      	bne.n	800fe10 <tcp_process+0x24>
 800fe02:	4b9d      	ldr	r3, [pc, #628]	@ (8010078 <tcp_process+0x28c>)
 800fe04:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800fe08:	499c      	ldr	r1, [pc, #624]	@ (801007c <tcp_process+0x290>)
 800fe0a:	489d      	ldr	r0, [pc, #628]	@ (8010080 <tcp_process+0x294>)
 800fe0c:	f007 f800 	bl	8016e10 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fe10:	4b9c      	ldr	r3, [pc, #624]	@ (8010084 <tcp_process+0x298>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	f003 0304 	and.w	r3, r3, #4
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d04e      	beq.n	800feba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	7d1b      	ldrb	r3, [r3, #20]
 800fe20:	2b02      	cmp	r3, #2
 800fe22:	d108      	bne.n	800fe36 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe28:	4b97      	ldr	r3, [pc, #604]	@ (8010088 <tcp_process+0x29c>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d123      	bne.n	800fe78 <tcp_process+0x8c>
        acceptable = 1;
 800fe30:	2301      	movs	r3, #1
 800fe32:	76fb      	strb	r3, [r7, #27]
 800fe34:	e020      	b.n	800fe78 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe3a:	4b94      	ldr	r3, [pc, #592]	@ (801008c <tcp_process+0x2a0>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d102      	bne.n	800fe48 <tcp_process+0x5c>
        acceptable = 1;
 800fe42:	2301      	movs	r3, #1
 800fe44:	76fb      	strb	r3, [r7, #27]
 800fe46:	e017      	b.n	800fe78 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe48:	4b90      	ldr	r3, [pc, #576]	@ (801008c <tcp_process+0x2a0>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe50:	1ad3      	subs	r3, r2, r3
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	db10      	blt.n	800fe78 <tcp_process+0x8c>
 800fe56:	4b8d      	ldr	r3, [pc, #564]	@ (801008c <tcp_process+0x2a0>)
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe5e:	6879      	ldr	r1, [r7, #4]
 800fe60:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fe62:	440b      	add	r3, r1
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	dc06      	bgt.n	800fe78 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	8b5b      	ldrh	r3, [r3, #26]
 800fe6e:	f043 0302 	orr.w	r3, r3, #2
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fe78:	7efb      	ldrb	r3, [r7, #27]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d01b      	beq.n	800feb6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	7d1b      	ldrb	r3, [r3, #20]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d106      	bne.n	800fe94 <tcp_process+0xa8>
 800fe86:	4b7c      	ldr	r3, [pc, #496]	@ (8010078 <tcp_process+0x28c>)
 800fe88:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fe8c:	4980      	ldr	r1, [pc, #512]	@ (8010090 <tcp_process+0x2a4>)
 800fe8e:	487c      	ldr	r0, [pc, #496]	@ (8010080 <tcp_process+0x294>)
 800fe90:	f006 ffbe 	bl	8016e10 <iprintf>
      recv_flags |= TF_RESET;
 800fe94:	4b7f      	ldr	r3, [pc, #508]	@ (8010094 <tcp_process+0x2a8>)
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	f043 0308 	orr.w	r3, r3, #8
 800fe9c:	b2da      	uxtb	r2, r3
 800fe9e:	4b7d      	ldr	r3, [pc, #500]	@ (8010094 <tcp_process+0x2a8>)
 800fea0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	8b5b      	ldrh	r3, [r3, #26]
 800fea6:	f023 0301 	bic.w	r3, r3, #1
 800feaa:	b29a      	uxth	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800feb0:	f06f 030d 	mvn.w	r3, #13
 800feb4:	e37a      	b.n	80105ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800feb6:	2300      	movs	r3, #0
 800feb8:	e378      	b.n	80105ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800feba:	4b72      	ldr	r3, [pc, #456]	@ (8010084 <tcp_process+0x298>)
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	f003 0302 	and.w	r3, r3, #2
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d010      	beq.n	800fee8 <tcp_process+0xfc>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	7d1b      	ldrb	r3, [r3, #20]
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d00c      	beq.n	800fee8 <tcp_process+0xfc>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	7d1b      	ldrb	r3, [r3, #20]
 800fed2:	2b03      	cmp	r3, #3
 800fed4:	d008      	beq.n	800fee8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	8b5b      	ldrh	r3, [r3, #26]
 800feda:	f043 0302 	orr.w	r3, r3, #2
 800fede:	b29a      	uxth	r2, r3
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	e361      	b.n	80105ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	8b5b      	ldrh	r3, [r3, #26]
 800feec:	f003 0310 	and.w	r3, r3, #16
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d103      	bne.n	800fefc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fef4:	4b68      	ldr	r3, [pc, #416]	@ (8010098 <tcp_process+0x2ac>)
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f001 fc2b 	bl	8011768 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	7d1b      	ldrb	r3, [r3, #20]
 800ff16:	3b02      	subs	r3, #2
 800ff18:	2b07      	cmp	r3, #7
 800ff1a:	f200 8337 	bhi.w	801058c <tcp_process+0x7a0>
 800ff1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ff24 <tcp_process+0x138>)
 800ff20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff24:	0800ff45 	.word	0x0800ff45
 800ff28:	08010175 	.word	0x08010175
 800ff2c:	080102ed 	.word	0x080102ed
 800ff30:	08010317 	.word	0x08010317
 800ff34:	0801043b 	.word	0x0801043b
 800ff38:	080102ed 	.word	0x080102ed
 800ff3c:	080104c7 	.word	0x080104c7
 800ff40:	08010557 	.word	0x08010557
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff44:	4b4f      	ldr	r3, [pc, #316]	@ (8010084 <tcp_process+0x298>)
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	f003 0310 	and.w	r3, r3, #16
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f000 80e4 	beq.w	801011a <tcp_process+0x32e>
 800ff52:	4b4c      	ldr	r3, [pc, #304]	@ (8010084 <tcp_process+0x298>)
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	f003 0302 	and.w	r3, r3, #2
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f000 80dd 	beq.w	801011a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff64:	1c5a      	adds	r2, r3, #1
 800ff66:	4b48      	ldr	r3, [pc, #288]	@ (8010088 <tcp_process+0x29c>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	f040 80d5 	bne.w	801011a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ff70:	4b46      	ldr	r3, [pc, #280]	@ (801008c <tcp_process+0x2a0>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	1c5a      	adds	r2, r3, #1
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ff82:	4b41      	ldr	r3, [pc, #260]	@ (8010088 <tcp_process+0x29c>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ff8a:	4b44      	ldr	r3, [pc, #272]	@ (801009c <tcp_process+0x2b0>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	89db      	ldrh	r3, [r3, #14]
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ffa4:	4b39      	ldr	r3, [pc, #228]	@ (801008c <tcp_process+0x2a0>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	1e5a      	subs	r2, r3, #1
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2204      	movs	r2, #4
 800ffb2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	3304      	adds	r3, #4
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f004 fddb 	bl	8014b78 <ip4_route>
 800ffc2:	4601      	mov	r1, r0
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	3304      	adds	r3, #4
 800ffc8:	461a      	mov	r2, r3
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f7ff f88c 	bl	800f0e8 <tcp_eff_send_mss_netif>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffdc:	009a      	lsls	r2, r3, #2
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ffe8:	428b      	cmp	r3, r1
 800ffea:	bf38      	it	cc
 800ffec:	460b      	movcc	r3, r1
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d204      	bcs.n	800fffc <tcp_process+0x210>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fff6:	009b      	lsls	r3, r3, #2
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	e00d      	b.n	8010018 <tcp_process+0x22c>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010000:	005b      	lsls	r3, r3, #1
 8010002:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010006:	4293      	cmp	r3, r2
 8010008:	d904      	bls.n	8010014 <tcp_process+0x228>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	b29b      	uxth	r3, r3
 8010012:	e001      	b.n	8010018 <tcp_process+0x22c>
 8010014:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010024:	2b00      	cmp	r3, #0
 8010026:	d106      	bne.n	8010036 <tcp_process+0x24a>
 8010028:	4b13      	ldr	r3, [pc, #76]	@ (8010078 <tcp_process+0x28c>)
 801002a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801002e:	491c      	ldr	r1, [pc, #112]	@ (80100a0 <tcp_process+0x2b4>)
 8010030:	4813      	ldr	r0, [pc, #76]	@ (8010080 <tcp_process+0x294>)
 8010032:	f006 feed 	bl	8016e10 <iprintf>
        --pcb->snd_queuelen;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801003c:	3b01      	subs	r3, #1
 801003e:	b29a      	uxth	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801004a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d12a      	bne.n	80100a8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010056:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d106      	bne.n	801006c <tcp_process+0x280>
 801005e:	4b06      	ldr	r3, [pc, #24]	@ (8010078 <tcp_process+0x28c>)
 8010060:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010064:	490f      	ldr	r1, [pc, #60]	@ (80100a4 <tcp_process+0x2b8>)
 8010066:	4806      	ldr	r0, [pc, #24]	@ (8010080 <tcp_process+0x294>)
 8010068:	f006 fed2 	bl	8016e10 <iprintf>
          pcb->unsent = rseg->next;
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010074:	e01c      	b.n	80100b0 <tcp_process+0x2c4>
 8010076:	bf00      	nop
 8010078:	08018e6c 	.word	0x08018e6c
 801007c:	080190a4 	.word	0x080190a4
 8010080:	08018eb8 	.word	0x08018eb8
 8010084:	20008860 	.word	0x20008860
 8010088:	20008858 	.word	0x20008858
 801008c:	20008854 	.word	0x20008854
 8010090:	080190c0 	.word	0x080190c0
 8010094:	20008861 	.word	0x20008861
 8010098:	2000881c 	.word	0x2000881c
 801009c:	20008844 	.word	0x20008844
 80100a0:	080190e0 	.word	0x080190e0
 80100a4:	080190f8 	.word	0x080190f8
        } else {
          pcb->unacked = rseg->next;
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80100b0:	69f8      	ldr	r0, [r7, #28]
 80100b2:	f7fe fd22 	bl	800eafa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d104      	bne.n	80100c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80100c4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80100c6:	e006      	b.n	80100d6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00a      	beq.n	80100f6 <tcp_process+0x30a>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	6910      	ldr	r0, [r2, #16]
 80100ea:	2200      	movs	r2, #0
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	4798      	blx	r3
 80100f0:	4603      	mov	r3, r0
 80100f2:	76bb      	strb	r3, [r7, #26]
 80100f4:	e001      	b.n	80100fa <tcp_process+0x30e>
 80100f6:	2300      	movs	r3, #0
 80100f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80100fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80100fe:	f113 0f0d 	cmn.w	r3, #13
 8010102:	d102      	bne.n	801010a <tcp_process+0x31e>
          return ERR_ABRT;
 8010104:	f06f 030c 	mvn.w	r3, #12
 8010108:	e250      	b.n	80105ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	8b5b      	ldrh	r3, [r3, #26]
 801010e:	f043 0302 	orr.w	r3, r3, #2
 8010112:	b29a      	uxth	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010118:	e23a      	b.n	8010590 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801011a:	4b98      	ldr	r3, [pc, #608]	@ (801037c <tcp_process+0x590>)
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	f003 0310 	and.w	r3, r3, #16
 8010122:	2b00      	cmp	r3, #0
 8010124:	f000 8234 	beq.w	8010590 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010128:	4b95      	ldr	r3, [pc, #596]	@ (8010380 <tcp_process+0x594>)
 801012a:	6819      	ldr	r1, [r3, #0]
 801012c:	4b95      	ldr	r3, [pc, #596]	@ (8010384 <tcp_process+0x598>)
 801012e:	881b      	ldrh	r3, [r3, #0]
 8010130:	461a      	mov	r2, r3
 8010132:	4b95      	ldr	r3, [pc, #596]	@ (8010388 <tcp_process+0x59c>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010138:	4b94      	ldr	r3, [pc, #592]	@ (801038c <tcp_process+0x5a0>)
 801013a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801013c:	885b      	ldrh	r3, [r3, #2]
 801013e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010140:	4a92      	ldr	r2, [pc, #584]	@ (801038c <tcp_process+0x5a0>)
 8010142:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010144:	8812      	ldrh	r2, [r2, #0]
 8010146:	b292      	uxth	r2, r2
 8010148:	9202      	str	r2, [sp, #8]
 801014a:	9301      	str	r3, [sp, #4]
 801014c:	4b90      	ldr	r3, [pc, #576]	@ (8010390 <tcp_process+0x5a4>)
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	4b90      	ldr	r3, [pc, #576]	@ (8010394 <tcp_process+0x5a8>)
 8010152:	4602      	mov	r2, r0
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f002 fc7f 	bl	8012a58 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010160:	2b05      	cmp	r3, #5
 8010162:	f200 8215 	bhi.w	8010590 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2200      	movs	r2, #0
 801016a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f002 fa4b 	bl	8012608 <tcp_rexmit_rto>
      break;
 8010172:	e20d      	b.n	8010590 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010174:	4b81      	ldr	r3, [pc, #516]	@ (801037c <tcp_process+0x590>)
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	f003 0310 	and.w	r3, r3, #16
 801017c:	2b00      	cmp	r3, #0
 801017e:	f000 80a1 	beq.w	80102c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010182:	4b7f      	ldr	r3, [pc, #508]	@ (8010380 <tcp_process+0x594>)
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801018a:	1ad3      	subs	r3, r2, r3
 801018c:	3b01      	subs	r3, #1
 801018e:	2b00      	cmp	r3, #0
 8010190:	db7e      	blt.n	8010290 <tcp_process+0x4a4>
 8010192:	4b7b      	ldr	r3, [pc, #492]	@ (8010380 <tcp_process+0x594>)
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801019a:	1ad3      	subs	r3, r2, r3
 801019c:	2b00      	cmp	r3, #0
 801019e:	dc77      	bgt.n	8010290 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2204      	movs	r2, #4
 80101a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d102      	bne.n	80101b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80101ae:	23fa      	movs	r3, #250	@ 0xfa
 80101b0:	76bb      	strb	r3, [r7, #26]
 80101b2:	e01d      	b.n	80101f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d106      	bne.n	80101cc <tcp_process+0x3e0>
 80101be:	4b76      	ldr	r3, [pc, #472]	@ (8010398 <tcp_process+0x5ac>)
 80101c0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80101c4:	4975      	ldr	r1, [pc, #468]	@ (801039c <tcp_process+0x5b0>)
 80101c6:	4876      	ldr	r0, [pc, #472]	@ (80103a0 <tcp_process+0x5b4>)
 80101c8:	f006 fe22 	bl	8016e10 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80101d0:	699b      	ldr	r3, [r3, #24]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00a      	beq.n	80101ec <tcp_process+0x400>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80101da:	699b      	ldr	r3, [r3, #24]
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	6910      	ldr	r0, [r2, #16]
 80101e0:	2200      	movs	r2, #0
 80101e2:	6879      	ldr	r1, [r7, #4]
 80101e4:	4798      	blx	r3
 80101e6:	4603      	mov	r3, r0
 80101e8:	76bb      	strb	r3, [r7, #26]
 80101ea:	e001      	b.n	80101f0 <tcp_process+0x404>
 80101ec:	23f0      	movs	r3, #240	@ 0xf0
 80101ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80101f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d00a      	beq.n	801020e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80101f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80101fc:	f113 0f0d 	cmn.w	r3, #13
 8010200:	d002      	beq.n	8010208 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7fd ff8c 	bl	800e120 <tcp_abort>
            }
            return ERR_ABRT;
 8010208:	f06f 030c 	mvn.w	r3, #12
 801020c:	e1ce      	b.n	80105ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 fae0 	bl	80107d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010214:	4b63      	ldr	r3, [pc, #396]	@ (80103a4 <tcp_process+0x5b8>)
 8010216:	881b      	ldrh	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d005      	beq.n	8010228 <tcp_process+0x43c>
            recv_acked--;
 801021c:	4b61      	ldr	r3, [pc, #388]	@ (80103a4 <tcp_process+0x5b8>)
 801021e:	881b      	ldrh	r3, [r3, #0]
 8010220:	3b01      	subs	r3, #1
 8010222:	b29a      	uxth	r2, r3
 8010224:	4b5f      	ldr	r3, [pc, #380]	@ (80103a4 <tcp_process+0x5b8>)
 8010226:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801022c:	009a      	lsls	r2, r3, #2
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010232:	005b      	lsls	r3, r3, #1
 8010234:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010238:	428b      	cmp	r3, r1
 801023a:	bf38      	it	cc
 801023c:	460b      	movcc	r3, r1
 801023e:	429a      	cmp	r2, r3
 8010240:	d204      	bcs.n	801024c <tcp_process+0x460>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	b29b      	uxth	r3, r3
 801024a:	e00d      	b.n	8010268 <tcp_process+0x47c>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010250:	005b      	lsls	r3, r3, #1
 8010252:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010256:	4293      	cmp	r3, r2
 8010258:	d904      	bls.n	8010264 <tcp_process+0x478>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801025e:	005b      	lsls	r3, r3, #1
 8010260:	b29b      	uxth	r3, r3
 8010262:	e001      	b.n	8010268 <tcp_process+0x47c>
 8010264:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801026e:	4b4e      	ldr	r3, [pc, #312]	@ (80103a8 <tcp_process+0x5bc>)
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	f003 0320 	and.w	r3, r3, #32
 8010276:	2b00      	cmp	r3, #0
 8010278:	d037      	beq.n	80102ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	8b5b      	ldrh	r3, [r3, #26]
 801027e:	f043 0302 	orr.w	r3, r3, #2
 8010282:	b29a      	uxth	r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2207      	movs	r2, #7
 801028c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801028e:	e02c      	b.n	80102ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010290:	4b3b      	ldr	r3, [pc, #236]	@ (8010380 <tcp_process+0x594>)
 8010292:	6819      	ldr	r1, [r3, #0]
 8010294:	4b3b      	ldr	r3, [pc, #236]	@ (8010384 <tcp_process+0x598>)
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	461a      	mov	r2, r3
 801029a:	4b3b      	ldr	r3, [pc, #236]	@ (8010388 <tcp_process+0x59c>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102a0:	4b3a      	ldr	r3, [pc, #232]	@ (801038c <tcp_process+0x5a0>)
 80102a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102a4:	885b      	ldrh	r3, [r3, #2]
 80102a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102a8:	4a38      	ldr	r2, [pc, #224]	@ (801038c <tcp_process+0x5a0>)
 80102aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ac:	8812      	ldrh	r2, [r2, #0]
 80102ae:	b292      	uxth	r2, r2
 80102b0:	9202      	str	r2, [sp, #8]
 80102b2:	9301      	str	r3, [sp, #4]
 80102b4:	4b36      	ldr	r3, [pc, #216]	@ (8010390 <tcp_process+0x5a4>)
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	4b36      	ldr	r3, [pc, #216]	@ (8010394 <tcp_process+0x5a8>)
 80102ba:	4602      	mov	r2, r0
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f002 fbcb 	bl	8012a58 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80102c2:	e167      	b.n	8010594 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80102c4:	4b2d      	ldr	r3, [pc, #180]	@ (801037c <tcp_process+0x590>)
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	f003 0302 	and.w	r3, r3, #2
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f000 8161 	beq.w	8010594 <tcp_process+0x7a8>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d6:	1e5a      	subs	r2, r3, #1
 80102d8:	4b2b      	ldr	r3, [pc, #172]	@ (8010388 <tcp_process+0x59c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	429a      	cmp	r2, r3
 80102de:	f040 8159 	bne.w	8010594 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f002 f9b2 	bl	801264c <tcp_rexmit>
      break;
 80102e8:	e154      	b.n	8010594 <tcp_process+0x7a8>
 80102ea:	e153      	b.n	8010594 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f000 fa71 	bl	80107d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80102f2:	4b2d      	ldr	r3, [pc, #180]	@ (80103a8 <tcp_process+0x5bc>)
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f003 0320 	and.w	r3, r3, #32
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f000 814c 	beq.w	8010598 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	8b5b      	ldrh	r3, [r3, #26]
 8010304:	f043 0302 	orr.w	r3, r3, #2
 8010308:	b29a      	uxth	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2207      	movs	r2, #7
 8010312:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010314:	e140      	b.n	8010598 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 fa5c 	bl	80107d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801031c:	4b22      	ldr	r3, [pc, #136]	@ (80103a8 <tcp_process+0x5bc>)
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	f003 0320 	and.w	r3, r3, #32
 8010324:	2b00      	cmp	r3, #0
 8010326:	d071      	beq.n	801040c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010328:	4b14      	ldr	r3, [pc, #80]	@ (801037c <tcp_process+0x590>)
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	f003 0310 	and.w	r3, r3, #16
 8010330:	2b00      	cmp	r3, #0
 8010332:	d060      	beq.n	80103f6 <tcp_process+0x60a>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010338:	4b11      	ldr	r3, [pc, #68]	@ (8010380 <tcp_process+0x594>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	429a      	cmp	r2, r3
 801033e:	d15a      	bne.n	80103f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010344:	2b00      	cmp	r3, #0
 8010346:	d156      	bne.n	80103f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8b5b      	ldrh	r3, [r3, #26]
 801034c:	f043 0302 	orr.w	r3, r3, #2
 8010350:	b29a      	uxth	r2, r3
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7fe fdbc 	bl	800eed4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801035c:	4b13      	ldr	r3, [pc, #76]	@ (80103ac <tcp_process+0x5c0>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	429a      	cmp	r2, r3
 8010364:	d105      	bne.n	8010372 <tcp_process+0x586>
 8010366:	4b11      	ldr	r3, [pc, #68]	@ (80103ac <tcp_process+0x5c0>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	4a0f      	ldr	r2, [pc, #60]	@ (80103ac <tcp_process+0x5c0>)
 801036e:	6013      	str	r3, [r2, #0]
 8010370:	e02e      	b.n	80103d0 <tcp_process+0x5e4>
 8010372:	4b0e      	ldr	r3, [pc, #56]	@ (80103ac <tcp_process+0x5c0>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	617b      	str	r3, [r7, #20]
 8010378:	e027      	b.n	80103ca <tcp_process+0x5de>
 801037a:	bf00      	nop
 801037c:	20008860 	.word	0x20008860
 8010380:	20008858 	.word	0x20008858
 8010384:	2000885e 	.word	0x2000885e
 8010388:	20008854 	.word	0x20008854
 801038c:	20008844 	.word	0x20008844
 8010390:	20005910 	.word	0x20005910
 8010394:	20005914 	.word	0x20005914
 8010398:	08018e6c 	.word	0x08018e6c
 801039c:	0801910c 	.word	0x0801910c
 80103a0:	08018eb8 	.word	0x08018eb8
 80103a4:	2000885c 	.word	0x2000885c
 80103a8:	20008861 	.word	0x20008861
 80103ac:	20008828 	.word	0x20008828
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d104      	bne.n	80103c4 <tcp_process+0x5d8>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	68da      	ldr	r2, [r3, #12]
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	60da      	str	r2, [r3, #12]
 80103c2:	e005      	b.n	80103d0 <tcp_process+0x5e4>
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	617b      	str	r3, [r7, #20]
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d1ef      	bne.n	80103b0 <tcp_process+0x5c4>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	60da      	str	r2, [r3, #12]
 80103d6:	4b77      	ldr	r3, [pc, #476]	@ (80105b4 <tcp_process+0x7c8>)
 80103d8:	2201      	movs	r2, #1
 80103da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	220a      	movs	r2, #10
 80103e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80103e2:	4b75      	ldr	r3, [pc, #468]	@ (80105b8 <tcp_process+0x7cc>)
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	60da      	str	r2, [r3, #12]
 80103ea:	4a73      	ldr	r2, [pc, #460]	@ (80105b8 <tcp_process+0x7cc>)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6013      	str	r3, [r2, #0]
 80103f0:	f002 fcf4 	bl	8012ddc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80103f4:	e0d2      	b.n	801059c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	8b5b      	ldrh	r3, [r3, #26]
 80103fa:	f043 0302 	orr.w	r3, r3, #2
 80103fe:	b29a      	uxth	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2208      	movs	r2, #8
 8010408:	751a      	strb	r2, [r3, #20]
      break;
 801040a:	e0c7      	b.n	801059c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801040c:	4b6b      	ldr	r3, [pc, #428]	@ (80105bc <tcp_process+0x7d0>)
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	f003 0310 	and.w	r3, r3, #16
 8010414:	2b00      	cmp	r3, #0
 8010416:	f000 80c1 	beq.w	801059c <tcp_process+0x7b0>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801041e:	4b68      	ldr	r3, [pc, #416]	@ (80105c0 <tcp_process+0x7d4>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	429a      	cmp	r2, r3
 8010424:	f040 80ba 	bne.w	801059c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801042c:	2b00      	cmp	r3, #0
 801042e:	f040 80b5 	bne.w	801059c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2206      	movs	r2, #6
 8010436:	751a      	strb	r2, [r3, #20]
      break;
 8010438:	e0b0      	b.n	801059c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 f9ca 	bl	80107d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010440:	4b60      	ldr	r3, [pc, #384]	@ (80105c4 <tcp_process+0x7d8>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	f003 0320 	and.w	r3, r3, #32
 8010448:	2b00      	cmp	r3, #0
 801044a:	f000 80a9 	beq.w	80105a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	8b5b      	ldrh	r3, [r3, #26]
 8010452:	f043 0302 	orr.w	r3, r3, #2
 8010456:	b29a      	uxth	r2, r3
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f7fe fd39 	bl	800eed4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010462:	4b59      	ldr	r3, [pc, #356]	@ (80105c8 <tcp_process+0x7dc>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	429a      	cmp	r2, r3
 801046a:	d105      	bne.n	8010478 <tcp_process+0x68c>
 801046c:	4b56      	ldr	r3, [pc, #344]	@ (80105c8 <tcp_process+0x7dc>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	68db      	ldr	r3, [r3, #12]
 8010472:	4a55      	ldr	r2, [pc, #340]	@ (80105c8 <tcp_process+0x7dc>)
 8010474:	6013      	str	r3, [r2, #0]
 8010476:	e013      	b.n	80104a0 <tcp_process+0x6b4>
 8010478:	4b53      	ldr	r3, [pc, #332]	@ (80105c8 <tcp_process+0x7dc>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	613b      	str	r3, [r7, #16]
 801047e:	e00c      	b.n	801049a <tcp_process+0x6ae>
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	68db      	ldr	r3, [r3, #12]
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	429a      	cmp	r2, r3
 8010488:	d104      	bne.n	8010494 <tcp_process+0x6a8>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	68da      	ldr	r2, [r3, #12]
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	60da      	str	r2, [r3, #12]
 8010492:	e005      	b.n	80104a0 <tcp_process+0x6b4>
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	613b      	str	r3, [r7, #16]
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d1ef      	bne.n	8010480 <tcp_process+0x694>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	60da      	str	r2, [r3, #12]
 80104a6:	4b43      	ldr	r3, [pc, #268]	@ (80105b4 <tcp_process+0x7c8>)
 80104a8:	2201      	movs	r2, #1
 80104aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	220a      	movs	r2, #10
 80104b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104b2:	4b41      	ldr	r3, [pc, #260]	@ (80105b8 <tcp_process+0x7cc>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	60da      	str	r2, [r3, #12]
 80104ba:	4a3f      	ldr	r2, [pc, #252]	@ (80105b8 <tcp_process+0x7cc>)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6013      	str	r3, [r2, #0]
 80104c0:	f002 fc8c 	bl	8012ddc <tcp_timer_needed>
      }
      break;
 80104c4:	e06c      	b.n	80105a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f984 	bl	80107d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80104cc:	4b3b      	ldr	r3, [pc, #236]	@ (80105bc <tcp_process+0x7d0>)
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	f003 0310 	and.w	r3, r3, #16
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d065      	beq.n	80105a4 <tcp_process+0x7b8>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104dc:	4b38      	ldr	r3, [pc, #224]	@ (80105c0 <tcp_process+0x7d4>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d15f      	bne.n	80105a4 <tcp_process+0x7b8>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d15b      	bne.n	80105a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7fe fcf1 	bl	800eed4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80104f2:	4b35      	ldr	r3, [pc, #212]	@ (80105c8 <tcp_process+0x7dc>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d105      	bne.n	8010508 <tcp_process+0x71c>
 80104fc:	4b32      	ldr	r3, [pc, #200]	@ (80105c8 <tcp_process+0x7dc>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	4a31      	ldr	r2, [pc, #196]	@ (80105c8 <tcp_process+0x7dc>)
 8010504:	6013      	str	r3, [r2, #0]
 8010506:	e013      	b.n	8010530 <tcp_process+0x744>
 8010508:	4b2f      	ldr	r3, [pc, #188]	@ (80105c8 <tcp_process+0x7dc>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	60fb      	str	r3, [r7, #12]
 801050e:	e00c      	b.n	801052a <tcp_process+0x73e>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	429a      	cmp	r2, r3
 8010518:	d104      	bne.n	8010524 <tcp_process+0x738>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68da      	ldr	r2, [r3, #12]
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	60da      	str	r2, [r3, #12]
 8010522:	e005      	b.n	8010530 <tcp_process+0x744>
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	60fb      	str	r3, [r7, #12]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d1ef      	bne.n	8010510 <tcp_process+0x724>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	60da      	str	r2, [r3, #12]
 8010536:	4b1f      	ldr	r3, [pc, #124]	@ (80105b4 <tcp_process+0x7c8>)
 8010538:	2201      	movs	r2, #1
 801053a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	220a      	movs	r2, #10
 8010540:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010542:	4b1d      	ldr	r3, [pc, #116]	@ (80105b8 <tcp_process+0x7cc>)
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	60da      	str	r2, [r3, #12]
 801054a:	4a1b      	ldr	r2, [pc, #108]	@ (80105b8 <tcp_process+0x7cc>)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6013      	str	r3, [r2, #0]
 8010550:	f002 fc44 	bl	8012ddc <tcp_timer_needed>
      }
      break;
 8010554:	e026      	b.n	80105a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 f93c 	bl	80107d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801055c:	4b17      	ldr	r3, [pc, #92]	@ (80105bc <tcp_process+0x7d0>)
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	f003 0310 	and.w	r3, r3, #16
 8010564:	2b00      	cmp	r3, #0
 8010566:	d01f      	beq.n	80105a8 <tcp_process+0x7bc>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801056c:	4b14      	ldr	r3, [pc, #80]	@ (80105c0 <tcp_process+0x7d4>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	429a      	cmp	r2, r3
 8010572:	d119      	bne.n	80105a8 <tcp_process+0x7bc>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010578:	2b00      	cmp	r3, #0
 801057a:	d115      	bne.n	80105a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801057c:	4b11      	ldr	r3, [pc, #68]	@ (80105c4 <tcp_process+0x7d8>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	f043 0310 	orr.w	r3, r3, #16
 8010584:	b2da      	uxtb	r2, r3
 8010586:	4b0f      	ldr	r3, [pc, #60]	@ (80105c4 <tcp_process+0x7d8>)
 8010588:	701a      	strb	r2, [r3, #0]
      }
      break;
 801058a:	e00d      	b.n	80105a8 <tcp_process+0x7bc>
    default:
      break;
 801058c:	bf00      	nop
 801058e:	e00c      	b.n	80105aa <tcp_process+0x7be>
      break;
 8010590:	bf00      	nop
 8010592:	e00a      	b.n	80105aa <tcp_process+0x7be>
      break;
 8010594:	bf00      	nop
 8010596:	e008      	b.n	80105aa <tcp_process+0x7be>
      break;
 8010598:	bf00      	nop
 801059a:	e006      	b.n	80105aa <tcp_process+0x7be>
      break;
 801059c:	bf00      	nop
 801059e:	e004      	b.n	80105aa <tcp_process+0x7be>
      break;
 80105a0:	bf00      	nop
 80105a2:	e002      	b.n	80105aa <tcp_process+0x7be>
      break;
 80105a4:	bf00      	nop
 80105a6:	e000      	b.n	80105aa <tcp_process+0x7be>
      break;
 80105a8:	bf00      	nop
  }
  return ERR_OK;
 80105aa:	2300      	movs	r3, #0
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3724      	adds	r7, #36	@ 0x24
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd90      	pop	{r4, r7, pc}
 80105b4:	20008830 	.word	0x20008830
 80105b8:	2000882c 	.word	0x2000882c
 80105bc:	20008860 	.word	0x20008860
 80105c0:	20008858 	.word	0x20008858
 80105c4:	20008861 	.word	0x20008861
 80105c8:	20008828 	.word	0x20008828

080105cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80105cc:	b590      	push	{r4, r7, lr}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d106      	bne.n	80105ea <tcp_oos_insert_segment+0x1e>
 80105dc:	4b3b      	ldr	r3, [pc, #236]	@ (80106cc <tcp_oos_insert_segment+0x100>)
 80105de:	f240 421f 	movw	r2, #1055	@ 0x41f
 80105e2:	493b      	ldr	r1, [pc, #236]	@ (80106d0 <tcp_oos_insert_segment+0x104>)
 80105e4:	483b      	ldr	r0, [pc, #236]	@ (80106d4 <tcp_oos_insert_segment+0x108>)
 80105e6:	f006 fc13 	bl	8016e10 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	899b      	ldrh	r3, [r3, #12]
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fb fca2 	bl	800bf3c <lwip_htons>
 80105f8:	4603      	mov	r3, r0
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	f003 0301 	and.w	r3, r3, #1
 8010600:	2b00      	cmp	r3, #0
 8010602:	d028      	beq.n	8010656 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010604:	6838      	ldr	r0, [r7, #0]
 8010606:	f7fe fa63 	bl	800ead0 <tcp_segs_free>
    next = NULL;
 801060a:	2300      	movs	r3, #0
 801060c:	603b      	str	r3, [r7, #0]
 801060e:	e056      	b.n	80106be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	899b      	ldrh	r3, [r3, #12]
 8010616:	b29b      	uxth	r3, r3
 8010618:	4618      	mov	r0, r3
 801061a:	f7fb fc8f 	bl	800bf3c <lwip_htons>
 801061e:	4603      	mov	r3, r0
 8010620:	b2db      	uxtb	r3, r3
 8010622:	f003 0301 	and.w	r3, r3, #1
 8010626:	2b00      	cmp	r3, #0
 8010628:	d00d      	beq.n	8010646 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	899b      	ldrh	r3, [r3, #12]
 8010630:	b29c      	uxth	r4, r3
 8010632:	2001      	movs	r0, #1
 8010634:	f7fb fc82 	bl	800bf3c <lwip_htons>
 8010638:	4603      	mov	r3, r0
 801063a:	461a      	mov	r2, r3
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	4322      	orrs	r2, r4
 8010642:	b292      	uxth	r2, r2
 8010644:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f7fe fa52 	bl	800eafa <tcp_seg_free>
    while (next &&
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d00e      	beq.n	801067a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	891b      	ldrh	r3, [r3, #8]
 8010660:	461a      	mov	r2, r3
 8010662:	4b1d      	ldr	r3, [pc, #116]	@ (80106d8 <tcp_oos_insert_segment+0x10c>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	441a      	add	r2, r3
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	6839      	ldr	r1, [r7, #0]
 8010670:	8909      	ldrh	r1, [r1, #8]
 8010672:	440b      	add	r3, r1
 8010674:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010676:	2b00      	cmp	r3, #0
 8010678:	daca      	bge.n	8010610 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d01e      	beq.n	80106be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	891b      	ldrh	r3, [r3, #8]
 8010684:	461a      	mov	r2, r3
 8010686:	4b14      	ldr	r3, [pc, #80]	@ (80106d8 <tcp_oos_insert_segment+0x10c>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	441a      	add	r2, r3
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010694:	2b00      	cmp	r3, #0
 8010696:	dd12      	ble.n	80106be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	b29a      	uxth	r2, r3
 80106a0:	4b0d      	ldr	r3, [pc, #52]	@ (80106d8 <tcp_oos_insert_segment+0x10c>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	685a      	ldr	r2, [r3, #4]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	891b      	ldrh	r3, [r3, #8]
 80106b6:	4619      	mov	r1, r3
 80106b8:	4610      	mov	r0, r2
 80106ba:	f7fc fe13 	bl	800d2e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	601a      	str	r2, [r3, #0]
}
 80106c4:	bf00      	nop
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd90      	pop	{r4, r7, pc}
 80106cc:	08018e6c 	.word	0x08018e6c
 80106d0:	0801912c 	.word	0x0801912c
 80106d4:	08018eb8 	.word	0x08018eb8
 80106d8:	20008854 	.word	0x20008854

080106dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80106dc:	b5b0      	push	{r4, r5, r7, lr}
 80106de:	b086      	sub	sp, #24
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	607a      	str	r2, [r7, #4]
 80106e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80106ea:	e03e      	b.n	801076a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fd f800 	bl	800d700 <pbuf_clen>
 8010700:	4603      	mov	r3, r0
 8010702:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801070a:	8a7a      	ldrh	r2, [r7, #18]
 801070c:	429a      	cmp	r2, r3
 801070e:	d906      	bls.n	801071e <tcp_free_acked_segments+0x42>
 8010710:	4b2a      	ldr	r3, [pc, #168]	@ (80107bc <tcp_free_acked_segments+0xe0>)
 8010712:	f240 4257 	movw	r2, #1111	@ 0x457
 8010716:	492a      	ldr	r1, [pc, #168]	@ (80107c0 <tcp_free_acked_segments+0xe4>)
 8010718:	482a      	ldr	r0, [pc, #168]	@ (80107c4 <tcp_free_acked_segments+0xe8>)
 801071a:	f006 fb79 	bl	8016e10 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010724:	8a7b      	ldrh	r3, [r7, #18]
 8010726:	1ad3      	subs	r3, r2, r3
 8010728:	b29a      	uxth	r2, r3
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	891a      	ldrh	r2, [r3, #8]
 8010734:	4b24      	ldr	r3, [pc, #144]	@ (80107c8 <tcp_free_acked_segments+0xec>)
 8010736:	881b      	ldrh	r3, [r3, #0]
 8010738:	4413      	add	r3, r2
 801073a:	b29a      	uxth	r2, r3
 801073c:	4b22      	ldr	r3, [pc, #136]	@ (80107c8 <tcp_free_acked_segments+0xec>)
 801073e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010740:	6978      	ldr	r0, [r7, #20]
 8010742:	f7fe f9da 	bl	800eafa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00c      	beq.n	801076a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d109      	bne.n	801076a <tcp_free_acked_segments+0x8e>
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d106      	bne.n	801076a <tcp_free_acked_segments+0x8e>
 801075c:	4b17      	ldr	r3, [pc, #92]	@ (80107bc <tcp_free_acked_segments+0xe0>)
 801075e:	f240 4261 	movw	r2, #1121	@ 0x461
 8010762:	491a      	ldr	r1, [pc, #104]	@ (80107cc <tcp_free_acked_segments+0xf0>)
 8010764:	4817      	ldr	r0, [pc, #92]	@ (80107c4 <tcp_free_acked_segments+0xe8>)
 8010766:	f006 fb53 	bl	8016e10 <iprintf>
  while (seg_list != NULL &&
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d020      	beq.n	80107b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	4618      	mov	r0, r3
 8010778:	f7fb fbf6 	bl	800bf68 <lwip_htonl>
 801077c:	4604      	mov	r4, r0
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	891b      	ldrh	r3, [r3, #8]
 8010782:	461d      	mov	r5, r3
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	899b      	ldrh	r3, [r3, #12]
 801078a:	b29b      	uxth	r3, r3
 801078c:	4618      	mov	r0, r3
 801078e:	f7fb fbd5 	bl	800bf3c <lwip_htons>
 8010792:	4603      	mov	r3, r0
 8010794:	b2db      	uxtb	r3, r3
 8010796:	f003 0303 	and.w	r3, r3, #3
 801079a:	2b00      	cmp	r3, #0
 801079c:	d001      	beq.n	80107a2 <tcp_free_acked_segments+0xc6>
 801079e:	2301      	movs	r3, #1
 80107a0:	e000      	b.n	80107a4 <tcp_free_acked_segments+0xc8>
 80107a2:	2300      	movs	r3, #0
 80107a4:	442b      	add	r3, r5
 80107a6:	18e2      	adds	r2, r4, r3
 80107a8:	4b09      	ldr	r3, [pc, #36]	@ (80107d0 <tcp_free_acked_segments+0xf4>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	dd9c      	ble.n	80106ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80107b2:	68bb      	ldr	r3, [r7, #8]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3718      	adds	r7, #24
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bdb0      	pop	{r4, r5, r7, pc}
 80107bc:	08018e6c 	.word	0x08018e6c
 80107c0:	08019154 	.word	0x08019154
 80107c4:	08018eb8 	.word	0x08018eb8
 80107c8:	2000885c 	.word	0x2000885c
 80107cc:	0801917c 	.word	0x0801917c
 80107d0:	20008858 	.word	0x20008858

080107d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80107d4:	b5b0      	push	{r4, r5, r7, lr}
 80107d6:	b094      	sub	sp, #80	@ 0x50
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80107dc:	2300      	movs	r3, #0
 80107de:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d106      	bne.n	80107f4 <tcp_receive+0x20>
 80107e6:	4b91      	ldr	r3, [pc, #580]	@ (8010a2c <tcp_receive+0x258>)
 80107e8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80107ec:	4990      	ldr	r1, [pc, #576]	@ (8010a30 <tcp_receive+0x25c>)
 80107ee:	4891      	ldr	r0, [pc, #580]	@ (8010a34 <tcp_receive+0x260>)
 80107f0:	f006 fb0e 	bl	8016e10 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	7d1b      	ldrb	r3, [r3, #20]
 80107f8:	2b03      	cmp	r3, #3
 80107fa:	d806      	bhi.n	801080a <tcp_receive+0x36>
 80107fc:	4b8b      	ldr	r3, [pc, #556]	@ (8010a2c <tcp_receive+0x258>)
 80107fe:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010802:	498d      	ldr	r1, [pc, #564]	@ (8010a38 <tcp_receive+0x264>)
 8010804:	488b      	ldr	r0, [pc, #556]	@ (8010a34 <tcp_receive+0x260>)
 8010806:	f006 fb03 	bl	8016e10 <iprintf>

  if (flags & TCP_ACK) {
 801080a:	4b8c      	ldr	r3, [pc, #560]	@ (8010a3c <tcp_receive+0x268>)
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	f003 0310 	and.w	r3, r3, #16
 8010812:	2b00      	cmp	r3, #0
 8010814:	f000 8264 	beq.w	8010ce0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801081e:	461a      	mov	r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010824:	4413      	add	r3, r2
 8010826:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801082c:	4b84      	ldr	r3, [pc, #528]	@ (8010a40 <tcp_receive+0x26c>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	2b00      	cmp	r3, #0
 8010834:	db1b      	blt.n	801086e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801083a:	4b81      	ldr	r3, [pc, #516]	@ (8010a40 <tcp_receive+0x26c>)
 801083c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801083e:	429a      	cmp	r2, r3
 8010840:	d106      	bne.n	8010850 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010846:	4b7f      	ldr	r3, [pc, #508]	@ (8010a44 <tcp_receive+0x270>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	2b00      	cmp	r3, #0
 801084e:	db0e      	blt.n	801086e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010854:	4b7b      	ldr	r3, [pc, #492]	@ (8010a44 <tcp_receive+0x270>)
 8010856:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010858:	429a      	cmp	r2, r3
 801085a:	d125      	bne.n	80108a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801085c:	4b7a      	ldr	r3, [pc, #488]	@ (8010a48 <tcp_receive+0x274>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	89db      	ldrh	r3, [r3, #14]
 8010862:	b29a      	uxth	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801086a:	429a      	cmp	r2, r3
 801086c:	d91c      	bls.n	80108a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801086e:	4b76      	ldr	r3, [pc, #472]	@ (8010a48 <tcp_receive+0x274>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	89db      	ldrh	r3, [r3, #14]
 8010874:	b29a      	uxth	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010888:	429a      	cmp	r2, r3
 801088a:	d205      	bcs.n	8010898 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010898:	4b69      	ldr	r3, [pc, #420]	@ (8010a40 <tcp_receive+0x26c>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80108a0:	4b68      	ldr	r3, [pc, #416]	@ (8010a44 <tcp_receive+0x270>)
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80108a8:	4b66      	ldr	r3, [pc, #408]	@ (8010a44 <tcp_receive+0x270>)
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	dc58      	bgt.n	8010968 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80108b6:	4b65      	ldr	r3, [pc, #404]	@ (8010a4c <tcp_receive+0x278>)
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d14b      	bne.n	8010956 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80108c8:	4413      	add	r3, r2
 80108ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d142      	bne.n	8010956 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	db3d      	blt.n	8010956 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80108de:	4b59      	ldr	r3, [pc, #356]	@ (8010a44 <tcp_receive+0x270>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d137      	bne.n	8010956 <tcp_receive+0x182>
              found_dupack = 1;
 80108e6:	2301      	movs	r3, #1
 80108e8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80108f0:	2bff      	cmp	r3, #255	@ 0xff
 80108f2:	d007      	beq.n	8010904 <tcp_receive+0x130>
                ++pcb->dupacks;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80108fa:	3301      	adds	r3, #1
 80108fc:	b2da      	uxtb	r2, r3
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801090a:	2b03      	cmp	r3, #3
 801090c:	d91b      	bls.n	8010946 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010918:	4413      	add	r3, r2
 801091a:	b29a      	uxth	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010922:	429a      	cmp	r2, r3
 8010924:	d30a      	bcc.n	801093c <tcp_receive+0x168>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010930:	4413      	add	r3, r2
 8010932:	b29a      	uxth	r2, r3
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801093a:	e004      	b.n	8010946 <tcp_receive+0x172>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010942:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801094c:	2b02      	cmp	r3, #2
 801094e:	d902      	bls.n	8010956 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f001 fee7 	bl	8012724 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010958:	2b00      	cmp	r3, #0
 801095a:	f040 8161 	bne.w	8010c20 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010966:	e15b      	b.n	8010c20 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010968:	4b36      	ldr	r3, [pc, #216]	@ (8010a44 <tcp_receive+0x270>)
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	3b01      	subs	r3, #1
 8010974:	2b00      	cmp	r3, #0
 8010976:	f2c0 814e 	blt.w	8010c16 <tcp_receive+0x442>
 801097a:	4b32      	ldr	r3, [pc, #200]	@ (8010a44 <tcp_receive+0x270>)
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	2b00      	cmp	r3, #0
 8010986:	f300 8146 	bgt.w	8010c16 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	8b5b      	ldrh	r3, [r3, #26]
 801098e:	f003 0304 	and.w	r3, r3, #4
 8010992:	2b00      	cmp	r3, #0
 8010994:	d010      	beq.n	80109b8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	8b5b      	ldrh	r3, [r3, #26]
 801099a:	f023 0304 	bic.w	r3, r3, #4
 801099e:	b29a      	uxth	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80109c6:	10db      	asrs	r3, r3, #3
 80109c8:	b21b      	sxth	r3, r3
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	4413      	add	r3, r2
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	b21a      	sxth	r2, r3
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80109e0:	4b18      	ldr	r3, [pc, #96]	@ (8010a44 <tcp_receive+0x270>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	1ad3      	subs	r3, r2, r3
 80109ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80109f8:	4b12      	ldr	r3, [pc, #72]	@ (8010a44 <tcp_receive+0x270>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	7d1b      	ldrb	r3, [r3, #20]
 8010a04:	2b03      	cmp	r3, #3
 8010a06:	f240 8097 	bls.w	8010b38 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d245      	bcs.n	8010aa6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	8b5b      	ldrh	r3, [r3, #26]
 8010a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d014      	beq.n	8010a50 <tcp_receive+0x27c>
 8010a26:	2301      	movs	r3, #1
 8010a28:	e013      	b.n	8010a52 <tcp_receive+0x27e>
 8010a2a:	bf00      	nop
 8010a2c:	08018e6c 	.word	0x08018e6c
 8010a30:	0801919c 	.word	0x0801919c
 8010a34:	08018eb8 	.word	0x08018eb8
 8010a38:	080191b8 	.word	0x080191b8
 8010a3c:	20008860 	.word	0x20008860
 8010a40:	20008854 	.word	0x20008854
 8010a44:	20008858 	.word	0x20008858
 8010a48:	20008844 	.word	0x20008844
 8010a4c:	2000885e 	.word	0x2000885e
 8010a50:	2302      	movs	r3, #2
 8010a52:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010a56:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a60:	fb12 f303 	smulbb	r3, r2, r3
 8010a64:	b29b      	uxth	r3, r3
 8010a66:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	bf28      	it	cs
 8010a6c:	4613      	movcs	r3, r2
 8010a6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a78:	4413      	add	r3, r2
 8010a7a:	b29a      	uxth	r2, r3
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d309      	bcc.n	8010a9a <tcp_receive+0x2c6>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a8e:	4413      	add	r3, r2
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010a98:	e04e      	b.n	8010b38 <tcp_receive+0x364>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010aa0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010aa4:	e048      	b.n	8010b38 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010aac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010aae:	4413      	add	r3, r2
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d309      	bcc.n	8010ad0 <tcp_receive+0x2fc>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010ac2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010ac4:	4413      	add	r3, r2
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010ace:	e004      	b.n	8010ada <tcp_receive+0x306>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ad6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d326      	bcc.n	8010b38 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010af6:	1ad3      	subs	r3, r2, r3
 8010af8:	b29a      	uxth	r2, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b0a:	4413      	add	r3, r2
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d30a      	bcc.n	8010b2e <tcp_receive+0x35a>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b22:	4413      	add	r3, r2
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010b2c:	e004      	b.n	8010b38 <tcp_receive+0x364>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010b34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b40:	4a98      	ldr	r2, [pc, #608]	@ (8010da4 <tcp_receive+0x5d0>)
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7ff fdca 	bl	80106dc <tcp_free_acked_segments>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b56:	4a94      	ldr	r2, [pc, #592]	@ (8010da8 <tcp_receive+0x5d4>)
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ff fdbf 	bl	80106dc <tcp_free_acked_segments>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d104      	bne.n	8010b76 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010b72:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010b74:	e002      	b.n	8010b7c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d103      	bne.n	8010b92 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010b98:	4b84      	ldr	r3, [pc, #528]	@ (8010dac <tcp_receive+0x5d8>)
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	b29a      	uxth	r2, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	8b5b      	ldrh	r3, [r3, #26]
 8010baa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d035      	beq.n	8010c1e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d118      	bne.n	8010bec <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d00c      	beq.n	8010bdc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fb f9ca 	bl	800bf68 <lwip_htonl>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	dc20      	bgt.n	8010c1e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	8b5b      	ldrh	r3, [r3, #26]
 8010be0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bea:	e018      	b.n	8010c1e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bf4:	68db      	ldr	r3, [r3, #12]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fb f9b5 	bl	800bf68 <lwip_htonl>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	1ae3      	subs	r3, r4, r3
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	dc0b      	bgt.n	8010c1e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	8b5b      	ldrh	r3, [r3, #26]
 8010c0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c14:	e003      	b.n	8010c1e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f001 ff70 	bl	8012afc <tcp_send_empty_ack>
 8010c1c:	e000      	b.n	8010c20 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c1e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d05b      	beq.n	8010ce0 <tcp_receive+0x50c>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c2c:	4b60      	ldr	r3, [pc, #384]	@ (8010db0 <tcp_receive+0x5dc>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	da54      	bge.n	8010ce0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010c36:	4b5f      	ldr	r3, [pc, #380]	@ (8010db4 <tcp_receive+0x5e0>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	1ad3      	subs	r3, r2, r3
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010c4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010c54:	10db      	asrs	r3, r3, #3
 8010c56:	b21b      	sxth	r3, r3
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010c68:	b29a      	uxth	r2, r3
 8010c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010c6e:	4413      	add	r3, r2
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	b21a      	sxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010c78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	da05      	bge.n	8010c8c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010c80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010c84:	425b      	negs	r3, r3
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010c8c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010c96:	109b      	asrs	r3, r3, #2
 8010c98:	b21b      	sxth	r3, r3
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010cb0:	4413      	add	r3, r2
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	b21a      	sxth	r2, r3
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010cc0:	10db      	asrs	r3, r3, #3
 8010cc2:	b21b      	sxth	r3, r3
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	4413      	add	r3, r2
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	b21a      	sxth	r2, r3
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010ce0:	4b35      	ldr	r3, [pc, #212]	@ (8010db8 <tcp_receive+0x5e4>)
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 84df 	beq.w	80116a8 <tcp_receive+0xed4>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	7d1b      	ldrb	r3, [r3, #20]
 8010cee:	2b06      	cmp	r3, #6
 8010cf0:	f200 84da 	bhi.w	80116a8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010cf8:	4b30      	ldr	r3, [pc, #192]	@ (8010dbc <tcp_receive+0x5e8>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	1ad3      	subs	r3, r2, r3
 8010cfe:	3b01      	subs	r3, #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	f2c0 808f 	blt.w	8010e24 <tcp_receive+0x650>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8010db8 <tcp_receive+0x5e4>)
 8010d0c:	881b      	ldrh	r3, [r3, #0]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	4b2a      	ldr	r3, [pc, #168]	@ (8010dbc <tcp_receive+0x5e8>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	440b      	add	r3, r1
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	3301      	adds	r3, #1
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f300 8082 	bgt.w	8010e24 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010d20:	4b27      	ldr	r3, [pc, #156]	@ (8010dc0 <tcp_receive+0x5ec>)
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d2a:	4b24      	ldr	r3, [pc, #144]	@ (8010dbc <tcp_receive+0x5e8>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	1ad3      	subs	r3, r2, r3
 8010d30:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010d32:	4b23      	ldr	r3, [pc, #140]	@ (8010dc0 <tcp_receive+0x5ec>)
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d106      	bne.n	8010d48 <tcp_receive+0x574>
 8010d3a:	4b22      	ldr	r3, [pc, #136]	@ (8010dc4 <tcp_receive+0x5f0>)
 8010d3c:	f240 5294 	movw	r2, #1428	@ 0x594
 8010d40:	4921      	ldr	r1, [pc, #132]	@ (8010dc8 <tcp_receive+0x5f4>)
 8010d42:	4822      	ldr	r0, [pc, #136]	@ (8010dcc <tcp_receive+0x5f8>)
 8010d44:	f006 f864 	bl	8016e10 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d906      	bls.n	8010d60 <tcp_receive+0x58c>
 8010d52:	4b1c      	ldr	r3, [pc, #112]	@ (8010dc4 <tcp_receive+0x5f0>)
 8010d54:	f240 5295 	movw	r2, #1429	@ 0x595
 8010d58:	491d      	ldr	r1, [pc, #116]	@ (8010dd0 <tcp_receive+0x5fc>)
 8010d5a:	481c      	ldr	r0, [pc, #112]	@ (8010dcc <tcp_receive+0x5f8>)
 8010d5c:	f006 f858 	bl	8016e10 <iprintf>
      off = (u16_t)off32;
 8010d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010d66:	4b16      	ldr	r3, [pc, #88]	@ (8010dc0 <tcp_receive+0x5ec>)
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	891b      	ldrh	r3, [r3, #8]
 8010d6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d906      	bls.n	8010d82 <tcp_receive+0x5ae>
 8010d74:	4b13      	ldr	r3, [pc, #76]	@ (8010dc4 <tcp_receive+0x5f0>)
 8010d76:	f240 5297 	movw	r2, #1431	@ 0x597
 8010d7a:	4916      	ldr	r1, [pc, #88]	@ (8010dd4 <tcp_receive+0x600>)
 8010d7c:	4813      	ldr	r0, [pc, #76]	@ (8010dcc <tcp_receive+0x5f8>)
 8010d7e:	f006 f847 	bl	8016e10 <iprintf>
      inseg.len -= off;
 8010d82:	4b0f      	ldr	r3, [pc, #60]	@ (8010dc0 <tcp_receive+0x5ec>)
 8010d84:	891a      	ldrh	r2, [r3, #8]
 8010d86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8010dc0 <tcp_receive+0x5ec>)
 8010d90:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010d92:	4b0b      	ldr	r3, [pc, #44]	@ (8010dc0 <tcp_receive+0x5ec>)
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	891a      	ldrh	r2, [r3, #8]
 8010d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010da0:	e02a      	b.n	8010df8 <tcp_receive+0x624>
 8010da2:	bf00      	nop
 8010da4:	080191d4 	.word	0x080191d4
 8010da8:	080191dc 	.word	0x080191dc
 8010dac:	2000885c 	.word	0x2000885c
 8010db0:	20008858 	.word	0x20008858
 8010db4:	2000881c 	.word	0x2000881c
 8010db8:	2000885e 	.word	0x2000885e
 8010dbc:	20008854 	.word	0x20008854
 8010dc0:	20008834 	.word	0x20008834
 8010dc4:	08018e6c 	.word	0x08018e6c
 8010dc8:	080191e4 	.word	0x080191e4
 8010dcc:	08018eb8 	.word	0x08018eb8
 8010dd0:	080191f4 	.word	0x080191f4
 8010dd4:	08019204 	.word	0x08019204
        off -= p->len;
 8010dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010dda:	895b      	ldrh	r3, [r3, #10]
 8010ddc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010de0:	1ad3      	subs	r3, r2, r3
 8010de2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010de8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010dea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010dee:	2200      	movs	r2, #0
 8010df0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010dfa:	895b      	ldrh	r3, [r3, #10]
 8010dfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d8e9      	bhi.n	8010dd8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010e04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010e0c:	f7fc fb6a 	bl	800d4e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e14:	4a90      	ldr	r2, [pc, #576]	@ (8011058 <tcp_receive+0x884>)
 8010e16:	6013      	str	r3, [r2, #0]
 8010e18:	4b90      	ldr	r3, [pc, #576]	@ (801105c <tcp_receive+0x888>)
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	4a8e      	ldr	r2, [pc, #568]	@ (8011058 <tcp_receive+0x884>)
 8010e1e:	6812      	ldr	r2, [r2, #0]
 8010e20:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e22:	e00d      	b.n	8010e40 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010e24:	4b8c      	ldr	r3, [pc, #560]	@ (8011058 <tcp_receive+0x884>)
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e2c:	1ad3      	subs	r3, r2, r3
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	da06      	bge.n	8010e40 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	8b5b      	ldrh	r3, [r3, #26]
 8010e36:	f043 0302 	orr.w	r3, r3, #2
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e40:	4b85      	ldr	r3, [pc, #532]	@ (8011058 <tcp_receive+0x884>)
 8010e42:	681a      	ldr	r2, [r3, #0]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f2c0 8427 	blt.w	801169e <tcp_receive+0xeca>
 8010e50:	4b81      	ldr	r3, [pc, #516]	@ (8011058 <tcp_receive+0x884>)
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e58:	6879      	ldr	r1, [r7, #4]
 8010e5a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010e5c:	440b      	add	r3, r1
 8010e5e:	1ad3      	subs	r3, r2, r3
 8010e60:	3301      	adds	r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f300 841b 	bgt.w	801169e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8011058 <tcp_receive+0x884>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	f040 8298 	bne.w	80113a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010e76:	4b79      	ldr	r3, [pc, #484]	@ (801105c <tcp_receive+0x888>)
 8010e78:	891c      	ldrh	r4, [r3, #8]
 8010e7a:	4b78      	ldr	r3, [pc, #480]	@ (801105c <tcp_receive+0x888>)
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	899b      	ldrh	r3, [r3, #12]
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fb f85a 	bl	800bf3c <lwip_htons>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	f003 0303 	and.w	r3, r3, #3
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d001      	beq.n	8010e98 <tcp_receive+0x6c4>
 8010e94:	2301      	movs	r3, #1
 8010e96:	e000      	b.n	8010e9a <tcp_receive+0x6c6>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	4423      	add	r3, r4
 8010e9c:	b29a      	uxth	r2, r3
 8010e9e:	4b70      	ldr	r3, [pc, #448]	@ (8011060 <tcp_receive+0x88c>)
 8010ea0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8011060 <tcp_receive+0x88c>)
 8010ea8:	881b      	ldrh	r3, [r3, #0]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d274      	bcs.n	8010f98 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010eae:	4b6b      	ldr	r3, [pc, #428]	@ (801105c <tcp_receive+0x888>)
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	899b      	ldrh	r3, [r3, #12]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fb f840 	bl	800bf3c <lwip_htons>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	b2db      	uxtb	r3, r3
 8010ec0:	f003 0301 	and.w	r3, r3, #1
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d01e      	beq.n	8010f06 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010ec8:	4b64      	ldr	r3, [pc, #400]	@ (801105c <tcp_receive+0x888>)
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	899b      	ldrh	r3, [r3, #12]
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	b21b      	sxth	r3, r3
 8010ed2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010ed6:	b21c      	sxth	r4, r3
 8010ed8:	4b60      	ldr	r3, [pc, #384]	@ (801105c <tcp_receive+0x888>)
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	899b      	ldrh	r3, [r3, #12]
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fb f82b 	bl	800bf3c <lwip_htons>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7fb f823 	bl	800bf3c <lwip_htons>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	b21b      	sxth	r3, r3
 8010efa:	4323      	orrs	r3, r4
 8010efc:	b21a      	sxth	r2, r3
 8010efe:	4b57      	ldr	r3, [pc, #348]	@ (801105c <tcp_receive+0x888>)
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	b292      	uxth	r2, r2
 8010f04:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010f0a:	4b54      	ldr	r3, [pc, #336]	@ (801105c <tcp_receive+0x888>)
 8010f0c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f0e:	4b53      	ldr	r3, [pc, #332]	@ (801105c <tcp_receive+0x888>)
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	899b      	ldrh	r3, [r3, #12]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fb f810 	bl	800bf3c <lwip_htons>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	f003 0302 	and.w	r3, r3, #2
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d005      	beq.n	8010f34 <tcp_receive+0x760>
            inseg.len -= 1;
 8010f28:	4b4c      	ldr	r3, [pc, #304]	@ (801105c <tcp_receive+0x888>)
 8010f2a:	891b      	ldrh	r3, [r3, #8]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	4b4a      	ldr	r3, [pc, #296]	@ (801105c <tcp_receive+0x888>)
 8010f32:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010f34:	4b49      	ldr	r3, [pc, #292]	@ (801105c <tcp_receive+0x888>)
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	4a48      	ldr	r2, [pc, #288]	@ (801105c <tcp_receive+0x888>)
 8010f3a:	8912      	ldrh	r2, [r2, #8]
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fc f9d0 	bl	800d2e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010f44:	4b45      	ldr	r3, [pc, #276]	@ (801105c <tcp_receive+0x888>)
 8010f46:	891c      	ldrh	r4, [r3, #8]
 8010f48:	4b44      	ldr	r3, [pc, #272]	@ (801105c <tcp_receive+0x888>)
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	899b      	ldrh	r3, [r3, #12]
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fa fff3 	bl	800bf3c <lwip_htons>
 8010f56:	4603      	mov	r3, r0
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	f003 0303 	and.w	r3, r3, #3
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d001      	beq.n	8010f66 <tcp_receive+0x792>
 8010f62:	2301      	movs	r3, #1
 8010f64:	e000      	b.n	8010f68 <tcp_receive+0x794>
 8010f66:	2300      	movs	r3, #0
 8010f68:	4423      	add	r3, r4
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8011060 <tcp_receive+0x88c>)
 8010f6e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f70:	4b3b      	ldr	r3, [pc, #236]	@ (8011060 <tcp_receive+0x88c>)
 8010f72:	881b      	ldrh	r3, [r3, #0]
 8010f74:	461a      	mov	r2, r3
 8010f76:	4b38      	ldr	r3, [pc, #224]	@ (8011058 <tcp_receive+0x884>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	441a      	add	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f80:	6879      	ldr	r1, [r7, #4]
 8010f82:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010f84:	440b      	add	r3, r1
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d006      	beq.n	8010f98 <tcp_receive+0x7c4>
 8010f8a:	4b36      	ldr	r3, [pc, #216]	@ (8011064 <tcp_receive+0x890>)
 8010f8c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010f90:	4935      	ldr	r1, [pc, #212]	@ (8011068 <tcp_receive+0x894>)
 8010f92:	4836      	ldr	r0, [pc, #216]	@ (801106c <tcp_receive+0x898>)
 8010f94:	f005 ff3c 	bl	8016e10 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 80e6 	beq.w	801116e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fa2:	4b2e      	ldr	r3, [pc, #184]	@ (801105c <tcp_receive+0x888>)
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	899b      	ldrh	r3, [r3, #12]
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fa ffc6 	bl	800bf3c <lwip_htons>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	f003 0301 	and.w	r3, r3, #1
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d010      	beq.n	8010fde <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010fbc:	e00a      	b.n	8010fd4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fc2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f7fd fd93 	bl	800eafa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d1f0      	bne.n	8010fbe <tcp_receive+0x7ea>
 8010fdc:	e0c7      	b.n	801116e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010fe4:	e051      	b.n	801108a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	899b      	ldrh	r3, [r3, #12]
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fa ffa4 	bl	800bf3c <lwip_htons>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	f003 0301 	and.w	r3, r3, #1
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d03c      	beq.n	801107a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011000:	4b16      	ldr	r3, [pc, #88]	@ (801105c <tcp_receive+0x888>)
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	899b      	ldrh	r3, [r3, #12]
 8011006:	b29b      	uxth	r3, r3
 8011008:	4618      	mov	r0, r3
 801100a:	f7fa ff97 	bl	800bf3c <lwip_htons>
 801100e:	4603      	mov	r3, r0
 8011010:	b2db      	uxtb	r3, r3
 8011012:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011016:	2b00      	cmp	r3, #0
 8011018:	d12f      	bne.n	801107a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801101a:	4b10      	ldr	r3, [pc, #64]	@ (801105c <tcp_receive+0x888>)
 801101c:	68db      	ldr	r3, [r3, #12]
 801101e:	899b      	ldrh	r3, [r3, #12]
 8011020:	b29c      	uxth	r4, r3
 8011022:	2001      	movs	r0, #1
 8011024:	f7fa ff8a 	bl	800bf3c <lwip_htons>
 8011028:	4603      	mov	r3, r0
 801102a:	461a      	mov	r2, r3
 801102c:	4b0b      	ldr	r3, [pc, #44]	@ (801105c <tcp_receive+0x888>)
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	4322      	orrs	r2, r4
 8011032:	b292      	uxth	r2, r2
 8011034:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011036:	4b09      	ldr	r3, [pc, #36]	@ (801105c <tcp_receive+0x888>)
 8011038:	891c      	ldrh	r4, [r3, #8]
 801103a:	4b08      	ldr	r3, [pc, #32]	@ (801105c <tcp_receive+0x888>)
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	899b      	ldrh	r3, [r3, #12]
 8011040:	b29b      	uxth	r3, r3
 8011042:	4618      	mov	r0, r3
 8011044:	f7fa ff7a 	bl	800bf3c <lwip_htons>
 8011048:	4603      	mov	r3, r0
 801104a:	b2db      	uxtb	r3, r3
 801104c:	f003 0303 	and.w	r3, r3, #3
 8011050:	2b00      	cmp	r3, #0
 8011052:	d00d      	beq.n	8011070 <tcp_receive+0x89c>
 8011054:	2301      	movs	r3, #1
 8011056:	e00c      	b.n	8011072 <tcp_receive+0x89e>
 8011058:	20008854 	.word	0x20008854
 801105c:	20008834 	.word	0x20008834
 8011060:	2000885e 	.word	0x2000885e
 8011064:	08018e6c 	.word	0x08018e6c
 8011068:	08019214 	.word	0x08019214
 801106c:	08018eb8 	.word	0x08018eb8
 8011070:	2300      	movs	r3, #0
 8011072:	4423      	add	r3, r4
 8011074:	b29a      	uxth	r2, r3
 8011076:	4b98      	ldr	r3, [pc, #608]	@ (80112d8 <tcp_receive+0xb04>)
 8011078:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801107a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801107c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801107e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011084:	6938      	ldr	r0, [r7, #16]
 8011086:	f7fd fd38 	bl	800eafa <tcp_seg_free>
            while (next &&
 801108a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801108c:	2b00      	cmp	r3, #0
 801108e:	d00e      	beq.n	80110ae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011090:	4b91      	ldr	r3, [pc, #580]	@ (80112d8 <tcp_receive+0xb04>)
 8011092:	881b      	ldrh	r3, [r3, #0]
 8011094:	461a      	mov	r2, r3
 8011096:	4b91      	ldr	r3, [pc, #580]	@ (80112dc <tcp_receive+0xb08>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	441a      	add	r2, r3
 801109c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80110a4:	8909      	ldrh	r1, [r1, #8]
 80110a6:	440b      	add	r3, r1
 80110a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	da9b      	bge.n	8010fe6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80110ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d059      	beq.n	8011168 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80110b4:	4b88      	ldr	r3, [pc, #544]	@ (80112d8 <tcp_receive+0xb04>)
 80110b6:	881b      	ldrh	r3, [r3, #0]
 80110b8:	461a      	mov	r2, r3
 80110ba:	4b88      	ldr	r3, [pc, #544]	@ (80112dc <tcp_receive+0xb08>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	441a      	add	r2, r3
 80110c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	dd4d      	ble.n	8011168 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80110cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	4b81      	ldr	r3, [pc, #516]	@ (80112dc <tcp_receive+0xb08>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	b29b      	uxth	r3, r3
 80110da:	1ad3      	subs	r3, r2, r3
 80110dc:	b29a      	uxth	r2, r3
 80110de:	4b80      	ldr	r3, [pc, #512]	@ (80112e0 <tcp_receive+0xb0c>)
 80110e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80110e2:	4b7f      	ldr	r3, [pc, #508]	@ (80112e0 <tcp_receive+0xb0c>)
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	899b      	ldrh	r3, [r3, #12]
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fa ff26 	bl	800bf3c <lwip_htons>
 80110f0:	4603      	mov	r3, r0
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	f003 0302 	and.w	r3, r3, #2
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d005      	beq.n	8011108 <tcp_receive+0x934>
                inseg.len -= 1;
 80110fc:	4b78      	ldr	r3, [pc, #480]	@ (80112e0 <tcp_receive+0xb0c>)
 80110fe:	891b      	ldrh	r3, [r3, #8]
 8011100:	3b01      	subs	r3, #1
 8011102:	b29a      	uxth	r2, r3
 8011104:	4b76      	ldr	r3, [pc, #472]	@ (80112e0 <tcp_receive+0xb0c>)
 8011106:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011108:	4b75      	ldr	r3, [pc, #468]	@ (80112e0 <tcp_receive+0xb0c>)
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	4a74      	ldr	r2, [pc, #464]	@ (80112e0 <tcp_receive+0xb0c>)
 801110e:	8912      	ldrh	r2, [r2, #8]
 8011110:	4611      	mov	r1, r2
 8011112:	4618      	mov	r0, r3
 8011114:	f7fc f8e6 	bl	800d2e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011118:	4b71      	ldr	r3, [pc, #452]	@ (80112e0 <tcp_receive+0xb0c>)
 801111a:	891c      	ldrh	r4, [r3, #8]
 801111c:	4b70      	ldr	r3, [pc, #448]	@ (80112e0 <tcp_receive+0xb0c>)
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	899b      	ldrh	r3, [r3, #12]
 8011122:	b29b      	uxth	r3, r3
 8011124:	4618      	mov	r0, r3
 8011126:	f7fa ff09 	bl	800bf3c <lwip_htons>
 801112a:	4603      	mov	r3, r0
 801112c:	b2db      	uxtb	r3, r3
 801112e:	f003 0303 	and.w	r3, r3, #3
 8011132:	2b00      	cmp	r3, #0
 8011134:	d001      	beq.n	801113a <tcp_receive+0x966>
 8011136:	2301      	movs	r3, #1
 8011138:	e000      	b.n	801113c <tcp_receive+0x968>
 801113a:	2300      	movs	r3, #0
 801113c:	4423      	add	r3, r4
 801113e:	b29a      	uxth	r2, r3
 8011140:	4b65      	ldr	r3, [pc, #404]	@ (80112d8 <tcp_receive+0xb04>)
 8011142:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011144:	4b64      	ldr	r3, [pc, #400]	@ (80112d8 <tcp_receive+0xb04>)
 8011146:	881b      	ldrh	r3, [r3, #0]
 8011148:	461a      	mov	r2, r3
 801114a:	4b64      	ldr	r3, [pc, #400]	@ (80112dc <tcp_receive+0xb08>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	441a      	add	r2, r3
 8011150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	429a      	cmp	r2, r3
 8011158:	d006      	beq.n	8011168 <tcp_receive+0x994>
 801115a:	4b62      	ldr	r3, [pc, #392]	@ (80112e4 <tcp_receive+0xb10>)
 801115c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011160:	4961      	ldr	r1, [pc, #388]	@ (80112e8 <tcp_receive+0xb14>)
 8011162:	4862      	ldr	r0, [pc, #392]	@ (80112ec <tcp_receive+0xb18>)
 8011164:	f005 fe54 	bl	8016e10 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801116c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801116e:	4b5a      	ldr	r3, [pc, #360]	@ (80112d8 <tcp_receive+0xb04>)
 8011170:	881b      	ldrh	r3, [r3, #0]
 8011172:	461a      	mov	r2, r3
 8011174:	4b59      	ldr	r3, [pc, #356]	@ (80112dc <tcp_receive+0xb08>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	441a      	add	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011182:	4b55      	ldr	r3, [pc, #340]	@ (80112d8 <tcp_receive+0xb04>)
 8011184:	881b      	ldrh	r3, [r3, #0]
 8011186:	429a      	cmp	r2, r3
 8011188:	d206      	bcs.n	8011198 <tcp_receive+0x9c4>
 801118a:	4b56      	ldr	r3, [pc, #344]	@ (80112e4 <tcp_receive+0xb10>)
 801118c:	f240 6207 	movw	r2, #1543	@ 0x607
 8011190:	4957      	ldr	r1, [pc, #348]	@ (80112f0 <tcp_receive+0xb1c>)
 8011192:	4856      	ldr	r0, [pc, #344]	@ (80112ec <tcp_receive+0xb18>)
 8011194:	f005 fe3c 	bl	8016e10 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801119c:	4b4e      	ldr	r3, [pc, #312]	@ (80112d8 <tcp_receive+0xb04>)
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	1ad3      	subs	r3, r2, r3
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7fc ffc5 	bl	800e138 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80111ae:	4b4c      	ldr	r3, [pc, #304]	@ (80112e0 <tcp_receive+0xb0c>)
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	891b      	ldrh	r3, [r3, #8]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d006      	beq.n	80111c6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80111b8:	4b49      	ldr	r3, [pc, #292]	@ (80112e0 <tcp_receive+0xb0c>)
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	4a4d      	ldr	r2, [pc, #308]	@ (80112f4 <tcp_receive+0xb20>)
 80111be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80111c0:	4b47      	ldr	r3, [pc, #284]	@ (80112e0 <tcp_receive+0xb0c>)
 80111c2:	2200      	movs	r2, #0
 80111c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80111c6:	4b46      	ldr	r3, [pc, #280]	@ (80112e0 <tcp_receive+0xb0c>)
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	899b      	ldrh	r3, [r3, #12]
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fa feb4 	bl	800bf3c <lwip_htons>
 80111d4:	4603      	mov	r3, r0
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	f003 0301 	and.w	r3, r3, #1
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 80b8 	beq.w	8011352 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80111e2:	4b45      	ldr	r3, [pc, #276]	@ (80112f8 <tcp_receive+0xb24>)
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	f043 0320 	orr.w	r3, r3, #32
 80111ea:	b2da      	uxtb	r2, r3
 80111ec:	4b42      	ldr	r3, [pc, #264]	@ (80112f8 <tcp_receive+0xb24>)
 80111ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80111f0:	e0af      	b.n	8011352 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	4a36      	ldr	r2, [pc, #216]	@ (80112dc <tcp_receive+0xb08>)
 8011202:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	891b      	ldrh	r3, [r3, #8]
 8011208:	461c      	mov	r4, r3
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	899b      	ldrh	r3, [r3, #12]
 8011210:	b29b      	uxth	r3, r3
 8011212:	4618      	mov	r0, r3
 8011214:	f7fa fe92 	bl	800bf3c <lwip_htons>
 8011218:	4603      	mov	r3, r0
 801121a:	b2db      	uxtb	r3, r3
 801121c:	f003 0303 	and.w	r3, r3, #3
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <tcp_receive+0xa54>
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <tcp_receive+0xa56>
 8011228:	2300      	movs	r3, #0
 801122a:	191a      	adds	r2, r3, r4
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011230:	441a      	add	r2, r3
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801123a:	461c      	mov	r4, r3
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	891b      	ldrh	r3, [r3, #8]
 8011240:	461d      	mov	r5, r3
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	899b      	ldrh	r3, [r3, #12]
 8011248:	b29b      	uxth	r3, r3
 801124a:	4618      	mov	r0, r3
 801124c:	f7fa fe76 	bl	800bf3c <lwip_htons>
 8011250:	4603      	mov	r3, r0
 8011252:	b2db      	uxtb	r3, r3
 8011254:	f003 0303 	and.w	r3, r3, #3
 8011258:	2b00      	cmp	r3, #0
 801125a:	d001      	beq.n	8011260 <tcp_receive+0xa8c>
 801125c:	2301      	movs	r3, #1
 801125e:	e000      	b.n	8011262 <tcp_receive+0xa8e>
 8011260:	2300      	movs	r3, #0
 8011262:	442b      	add	r3, r5
 8011264:	429c      	cmp	r4, r3
 8011266:	d206      	bcs.n	8011276 <tcp_receive+0xaa2>
 8011268:	4b1e      	ldr	r3, [pc, #120]	@ (80112e4 <tcp_receive+0xb10>)
 801126a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801126e:	4923      	ldr	r1, [pc, #140]	@ (80112fc <tcp_receive+0xb28>)
 8011270:	481e      	ldr	r0, [pc, #120]	@ (80112ec <tcp_receive+0xb18>)
 8011272:	f005 fdcd 	bl	8016e10 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	891b      	ldrh	r3, [r3, #8]
 801127a:	461c      	mov	r4, r3
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	899b      	ldrh	r3, [r3, #12]
 8011282:	b29b      	uxth	r3, r3
 8011284:	4618      	mov	r0, r3
 8011286:	f7fa fe59 	bl	800bf3c <lwip_htons>
 801128a:	4603      	mov	r3, r0
 801128c:	b2db      	uxtb	r3, r3
 801128e:	f003 0303 	and.w	r3, r3, #3
 8011292:	2b00      	cmp	r3, #0
 8011294:	d001      	beq.n	801129a <tcp_receive+0xac6>
 8011296:	2301      	movs	r3, #1
 8011298:	e000      	b.n	801129c <tcp_receive+0xac8>
 801129a:	2300      	movs	r3, #0
 801129c:	1919      	adds	r1, r3, r4
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80112a2:	b28b      	uxth	r3, r1
 80112a4:	1ad3      	subs	r3, r2, r3
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7fc ff43 	bl	800e138 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	891b      	ldrh	r3, [r3, #8]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d028      	beq.n	801130e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80112bc:	4b0d      	ldr	r3, [pc, #52]	@ (80112f4 <tcp_receive+0xb20>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d01d      	beq.n	8011300 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80112c4:	4b0b      	ldr	r3, [pc, #44]	@ (80112f4 <tcp_receive+0xb20>)
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	4619      	mov	r1, r3
 80112ce:	4610      	mov	r0, r2
 80112d0:	f7fc fa50 	bl	800d774 <pbuf_cat>
 80112d4:	e018      	b.n	8011308 <tcp_receive+0xb34>
 80112d6:	bf00      	nop
 80112d8:	2000885e 	.word	0x2000885e
 80112dc:	20008854 	.word	0x20008854
 80112e0:	20008834 	.word	0x20008834
 80112e4:	08018e6c 	.word	0x08018e6c
 80112e8:	0801924c 	.word	0x0801924c
 80112ec:	08018eb8 	.word	0x08018eb8
 80112f0:	08019288 	.word	0x08019288
 80112f4:	20008864 	.word	0x20008864
 80112f8:	20008861 	.word	0x20008861
 80112fc:	080192a8 	.word	0x080192a8
            } else {
              recv_data = cseg->p;
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	4a70      	ldr	r2, [pc, #448]	@ (80114c8 <tcp_receive+0xcf4>)
 8011306:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	2200      	movs	r2, #0
 801130c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	68db      	ldr	r3, [r3, #12]
 8011312:	899b      	ldrh	r3, [r3, #12]
 8011314:	b29b      	uxth	r3, r3
 8011316:	4618      	mov	r0, r3
 8011318:	f7fa fe10 	bl	800bf3c <lwip_htons>
 801131c:	4603      	mov	r3, r0
 801131e:	b2db      	uxtb	r3, r3
 8011320:	f003 0301 	and.w	r3, r3, #1
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00d      	beq.n	8011344 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011328:	4b68      	ldr	r3, [pc, #416]	@ (80114cc <tcp_receive+0xcf8>)
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	f043 0320 	orr.w	r3, r3, #32
 8011330:	b2da      	uxtb	r2, r3
 8011332:	4b66      	ldr	r3, [pc, #408]	@ (80114cc <tcp_receive+0xcf8>)
 8011334:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	7d1b      	ldrb	r3, [r3, #20]
 801133a:	2b04      	cmp	r3, #4
 801133c:	d102      	bne.n	8011344 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2207      	movs	r2, #7
 8011342:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	681a      	ldr	r2, [r3, #0]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801134c:	68b8      	ldr	r0, [r7, #8]
 801134e:	f7fd fbd4 	bl	800eafa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011356:	2b00      	cmp	r3, #0
 8011358:	d008      	beq.n	801136c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	685a      	ldr	r2, [r3, #4]
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011366:	429a      	cmp	r2, r3
 8011368:	f43f af43 	beq.w	80111f2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	8b5b      	ldrh	r3, [r3, #26]
 8011370:	f003 0301 	and.w	r3, r3, #1
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00e      	beq.n	8011396 <tcp_receive+0xbc2>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	8b5b      	ldrh	r3, [r3, #26]
 801137c:	f023 0301 	bic.w	r3, r3, #1
 8011380:	b29a      	uxth	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	835a      	strh	r2, [r3, #26]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	8b5b      	ldrh	r3, [r3, #26]
 801138a:	f043 0302 	orr.w	r3, r3, #2
 801138e:	b29a      	uxth	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011394:	e187      	b.n	80116a6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	8b5b      	ldrh	r3, [r3, #26]
 801139a:	f043 0301 	orr.w	r3, r3, #1
 801139e:	b29a      	uxth	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113a4:	e17f      	b.n	80116a6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d106      	bne.n	80113bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80113ae:	4848      	ldr	r0, [pc, #288]	@ (80114d0 <tcp_receive+0xcfc>)
 80113b0:	f7fd fbbc 	bl	800eb2c <tcp_seg_copy>
 80113b4:	4602      	mov	r2, r0
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80113ba:	e16c      	b.n	8011696 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80113bc:	2300      	movs	r3, #0
 80113be:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80113c6:	e156      	b.n	8011676 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80113c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	685a      	ldr	r2, [r3, #4]
 80113ce:	4b41      	ldr	r3, [pc, #260]	@ (80114d4 <tcp_receive+0xd00>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d11d      	bne.n	8011412 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80113d6:	4b3e      	ldr	r3, [pc, #248]	@ (80114d0 <tcp_receive+0xcfc>)
 80113d8:	891a      	ldrh	r2, [r3, #8]
 80113da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113dc:	891b      	ldrh	r3, [r3, #8]
 80113de:	429a      	cmp	r2, r3
 80113e0:	f240 814e 	bls.w	8011680 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113e4:	483a      	ldr	r0, [pc, #232]	@ (80114d0 <tcp_receive+0xcfc>)
 80113e6:	f7fd fba1 	bl	800eb2c <tcp_seg_copy>
 80113ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	f000 8148 	beq.w	8011684 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80113f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d003      	beq.n	8011402 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80113fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	601a      	str	r2, [r3, #0]
 8011400:	e002      	b.n	8011408 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	697a      	ldr	r2, [r7, #20]
 8011406:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011408:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801140a:	6978      	ldr	r0, [r7, #20]
 801140c:	f7ff f8de 	bl	80105cc <tcp_oos_insert_segment>
                }
                break;
 8011410:	e138      	b.n	8011684 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011414:	2b00      	cmp	r3, #0
 8011416:	d117      	bne.n	8011448 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011418:	4b2e      	ldr	r3, [pc, #184]	@ (80114d4 <tcp_receive+0xd00>)
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801141e:	68db      	ldr	r3, [r3, #12]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	1ad3      	subs	r3, r2, r3
 8011424:	2b00      	cmp	r3, #0
 8011426:	da57      	bge.n	80114d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011428:	4829      	ldr	r0, [pc, #164]	@ (80114d0 <tcp_receive+0xcfc>)
 801142a:	f7fd fb7f 	bl	800eb2c <tcp_seg_copy>
 801142e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	2b00      	cmp	r3, #0
 8011434:	f000 8128 	beq.w	8011688 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	69ba      	ldr	r2, [r7, #24]
 801143c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801143e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011440:	69b8      	ldr	r0, [r7, #24]
 8011442:	f7ff f8c3 	bl	80105cc <tcp_oos_insert_segment>
                  }
                  break;
 8011446:	e11f      	b.n	8011688 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011448:	4b22      	ldr	r3, [pc, #136]	@ (80114d4 <tcp_receive+0xd00>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	1ad3      	subs	r3, r2, r3
 8011454:	3b01      	subs	r3, #1
 8011456:	2b00      	cmp	r3, #0
 8011458:	db3e      	blt.n	80114d8 <tcp_receive+0xd04>
 801145a:	4b1e      	ldr	r3, [pc, #120]	@ (80114d4 <tcp_receive+0xd00>)
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	3301      	adds	r3, #1
 8011468:	2b00      	cmp	r3, #0
 801146a:	dc35      	bgt.n	80114d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801146c:	4818      	ldr	r0, [pc, #96]	@ (80114d0 <tcp_receive+0xcfc>)
 801146e:	f7fd fb5d 	bl	800eb2c <tcp_seg_copy>
 8011472:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	2b00      	cmp	r3, #0
 8011478:	f000 8108 	beq.w	801168c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801147c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011484:	8912      	ldrh	r2, [r2, #8]
 8011486:	441a      	add	r2, r3
 8011488:	4b12      	ldr	r3, [pc, #72]	@ (80114d4 <tcp_receive+0xd00>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	2b00      	cmp	r3, #0
 8011490:	dd12      	ble.n	80114b8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011492:	4b10      	ldr	r3, [pc, #64]	@ (80114d4 <tcp_receive+0xd00>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	b29a      	uxth	r2, r3
 8011498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	b29b      	uxth	r3, r3
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80114a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114aa:	685a      	ldr	r2, [r3, #4]
 80114ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114ae:	891b      	ldrh	r3, [r3, #8]
 80114b0:	4619      	mov	r1, r3
 80114b2:	4610      	mov	r0, r2
 80114b4:	f7fb ff16 	bl	800d2e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80114b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114ba:	69fa      	ldr	r2, [r7, #28]
 80114bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80114be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80114c0:	69f8      	ldr	r0, [r7, #28]
 80114c2:	f7ff f883 	bl	80105cc <tcp_oos_insert_segment>
                  }
                  break;
 80114c6:	e0e1      	b.n	801168c <tcp_receive+0xeb8>
 80114c8:	20008864 	.word	0x20008864
 80114cc:	20008861 	.word	0x20008861
 80114d0:	20008834 	.word	0x20008834
 80114d4:	20008854 	.word	0x20008854
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80114d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114da:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80114dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	f040 80c5 	bne.w	8011670 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80114e6:	4b7f      	ldr	r3, [pc, #508]	@ (80116e4 <tcp_receive+0xf10>)
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f340 80bc 	ble.w	8011670 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80114f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	899b      	ldrh	r3, [r3, #12]
 80114fe:	b29b      	uxth	r3, r3
 8011500:	4618      	mov	r0, r3
 8011502:	f7fa fd1b 	bl	800bf3c <lwip_htons>
 8011506:	4603      	mov	r3, r0
 8011508:	b2db      	uxtb	r3, r3
 801150a:	f003 0301 	and.w	r3, r3, #1
 801150e:	2b00      	cmp	r3, #0
 8011510:	f040 80be 	bne.w	8011690 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011514:	4874      	ldr	r0, [pc, #464]	@ (80116e8 <tcp_receive+0xf14>)
 8011516:	f7fd fb09 	bl	800eb2c <tcp_seg_copy>
 801151a:	4602      	mov	r2, r0
 801151c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801151e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	f000 80b5 	beq.w	8011694 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801152a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011532:	8912      	ldrh	r2, [r2, #8]
 8011534:	441a      	add	r2, r3
 8011536:	4b6b      	ldr	r3, [pc, #428]	@ (80116e4 <tcp_receive+0xf10>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	2b00      	cmp	r3, #0
 801153e:	dd12      	ble.n	8011566 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011540:	4b68      	ldr	r3, [pc, #416]	@ (80116e4 <tcp_receive+0xf10>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	b29a      	uxth	r2, r3
 8011546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011548:	68db      	ldr	r3, [r3, #12]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	b29b      	uxth	r3, r3
 801154e:	1ad3      	subs	r3, r2, r3
 8011550:	b29a      	uxth	r2, r3
 8011552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011554:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011558:	685a      	ldr	r2, [r3, #4]
 801155a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801155c:	891b      	ldrh	r3, [r3, #8]
 801155e:	4619      	mov	r1, r3
 8011560:	4610      	mov	r0, r2
 8011562:	f7fb febf 	bl	800d2e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011566:	4b61      	ldr	r3, [pc, #388]	@ (80116ec <tcp_receive+0xf18>)
 8011568:	881b      	ldrh	r3, [r3, #0]
 801156a:	461a      	mov	r2, r3
 801156c:	4b5d      	ldr	r3, [pc, #372]	@ (80116e4 <tcp_receive+0xf10>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	441a      	add	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011576:	6879      	ldr	r1, [r7, #4]
 8011578:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801157a:	440b      	add	r3, r1
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	2b00      	cmp	r3, #0
 8011580:	f340 8088 	ble.w	8011694 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	899b      	ldrh	r3, [r3, #12]
 801158c:	b29b      	uxth	r3, r3
 801158e:	4618      	mov	r0, r3
 8011590:	f7fa fcd4 	bl	800bf3c <lwip_htons>
 8011594:	4603      	mov	r3, r0
 8011596:	b2db      	uxtb	r3, r3
 8011598:	f003 0301 	and.w	r3, r3, #1
 801159c:	2b00      	cmp	r3, #0
 801159e:	d021      	beq.n	80115e4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80115a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	899b      	ldrh	r3, [r3, #12]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	b21b      	sxth	r3, r3
 80115ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80115b0:	b21c      	sxth	r4, r3
 80115b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	899b      	ldrh	r3, [r3, #12]
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	4618      	mov	r0, r3
 80115be:	f7fa fcbd 	bl	800bf3c <lwip_htons>
 80115c2:	4603      	mov	r3, r0
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fa fcb5 	bl	800bf3c <lwip_htons>
 80115d2:	4603      	mov	r3, r0
 80115d4:	b21b      	sxth	r3, r3
 80115d6:	4323      	orrs	r3, r4
 80115d8:	b21a      	sxth	r2, r3
 80115da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	b292      	uxth	r2, r2
 80115e2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115ee:	4413      	add	r3, r2
 80115f0:	b299      	uxth	r1, r3
 80115f2:	4b3c      	ldr	r3, [pc, #240]	@ (80116e4 <tcp_receive+0xf10>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	1a8a      	subs	r2, r1, r2
 80115fe:	b292      	uxth	r2, r2
 8011600:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	685a      	ldr	r2, [r3, #4]
 8011608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	891b      	ldrh	r3, [r3, #8]
 801160e:	4619      	mov	r1, r3
 8011610:	4610      	mov	r0, r2
 8011612:	f7fb fe67 	bl	800d2e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	891c      	ldrh	r4, [r3, #8]
 801161c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	68db      	ldr	r3, [r3, #12]
 8011622:	899b      	ldrh	r3, [r3, #12]
 8011624:	b29b      	uxth	r3, r3
 8011626:	4618      	mov	r0, r3
 8011628:	f7fa fc88 	bl	800bf3c <lwip_htons>
 801162c:	4603      	mov	r3, r0
 801162e:	b2db      	uxtb	r3, r3
 8011630:	f003 0303 	and.w	r3, r3, #3
 8011634:	2b00      	cmp	r3, #0
 8011636:	d001      	beq.n	801163c <tcp_receive+0xe68>
 8011638:	2301      	movs	r3, #1
 801163a:	e000      	b.n	801163e <tcp_receive+0xe6a>
 801163c:	2300      	movs	r3, #0
 801163e:	4423      	add	r3, r4
 8011640:	b29a      	uxth	r2, r3
 8011642:	4b2a      	ldr	r3, [pc, #168]	@ (80116ec <tcp_receive+0xf18>)
 8011644:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011646:	4b29      	ldr	r3, [pc, #164]	@ (80116ec <tcp_receive+0xf18>)
 8011648:	881b      	ldrh	r3, [r3, #0]
 801164a:	461a      	mov	r2, r3
 801164c:	4b25      	ldr	r3, [pc, #148]	@ (80116e4 <tcp_receive+0xf10>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	441a      	add	r2, r3
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011656:	6879      	ldr	r1, [r7, #4]
 8011658:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801165a:	440b      	add	r3, r1
 801165c:	429a      	cmp	r2, r3
 801165e:	d019      	beq.n	8011694 <tcp_receive+0xec0>
 8011660:	4b23      	ldr	r3, [pc, #140]	@ (80116f0 <tcp_receive+0xf1c>)
 8011662:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011666:	4923      	ldr	r1, [pc, #140]	@ (80116f4 <tcp_receive+0xf20>)
 8011668:	4823      	ldr	r0, [pc, #140]	@ (80116f8 <tcp_receive+0xf24>)
 801166a:	f005 fbd1 	bl	8016e10 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801166e:	e011      	b.n	8011694 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011678:	2b00      	cmp	r3, #0
 801167a:	f47f aea5 	bne.w	80113c8 <tcp_receive+0xbf4>
 801167e:	e00a      	b.n	8011696 <tcp_receive+0xec2>
                break;
 8011680:	bf00      	nop
 8011682:	e008      	b.n	8011696 <tcp_receive+0xec2>
                break;
 8011684:	bf00      	nop
 8011686:	e006      	b.n	8011696 <tcp_receive+0xec2>
                  break;
 8011688:	bf00      	nop
 801168a:	e004      	b.n	8011696 <tcp_receive+0xec2>
                  break;
 801168c:	bf00      	nop
 801168e:	e002      	b.n	8011696 <tcp_receive+0xec2>
                  break;
 8011690:	bf00      	nop
 8011692:	e000      	b.n	8011696 <tcp_receive+0xec2>
                break;
 8011694:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f001 fa30 	bl	8012afc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801169c:	e003      	b.n	80116a6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f001 fa2c 	bl	8012afc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80116a4:	e01a      	b.n	80116dc <tcp_receive+0xf08>
 80116a6:	e019      	b.n	80116dc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80116a8:	4b0e      	ldr	r3, [pc, #56]	@ (80116e4 <tcp_receive+0xf10>)
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	db0a      	blt.n	80116cc <tcp_receive+0xef8>
 80116b6:	4b0b      	ldr	r3, [pc, #44]	@ (80116e4 <tcp_receive+0xf10>)
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116be:	6879      	ldr	r1, [r7, #4]
 80116c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80116c2:	440b      	add	r3, r1
 80116c4:	1ad3      	subs	r3, r2, r3
 80116c6:	3301      	adds	r3, #1
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	dd07      	ble.n	80116dc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	8b5b      	ldrh	r3, [r3, #26]
 80116d0:	f043 0302 	orr.w	r3, r3, #2
 80116d4:	b29a      	uxth	r2, r3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80116da:	e7ff      	b.n	80116dc <tcp_receive+0xf08>
 80116dc:	bf00      	nop
 80116de:	3750      	adds	r7, #80	@ 0x50
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bdb0      	pop	{r4, r5, r7, pc}
 80116e4:	20008854 	.word	0x20008854
 80116e8:	20008834 	.word	0x20008834
 80116ec:	2000885e 	.word	0x2000885e
 80116f0:	08018e6c 	.word	0x08018e6c
 80116f4:	08019214 	.word	0x08019214
 80116f8:	08018eb8 	.word	0x08018eb8

080116fc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011702:	4b15      	ldr	r3, [pc, #84]	@ (8011758 <tcp_get_next_optbyte+0x5c>)
 8011704:	881b      	ldrh	r3, [r3, #0]
 8011706:	1c5a      	adds	r2, r3, #1
 8011708:	b291      	uxth	r1, r2
 801170a:	4a13      	ldr	r2, [pc, #76]	@ (8011758 <tcp_get_next_optbyte+0x5c>)
 801170c:	8011      	strh	r1, [r2, #0]
 801170e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011710:	4b12      	ldr	r3, [pc, #72]	@ (801175c <tcp_get_next_optbyte+0x60>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d004      	beq.n	8011722 <tcp_get_next_optbyte+0x26>
 8011718:	4b11      	ldr	r3, [pc, #68]	@ (8011760 <tcp_get_next_optbyte+0x64>)
 801171a:	881b      	ldrh	r3, [r3, #0]
 801171c:	88fa      	ldrh	r2, [r7, #6]
 801171e:	429a      	cmp	r2, r3
 8011720:	d208      	bcs.n	8011734 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011722:	4b10      	ldr	r3, [pc, #64]	@ (8011764 <tcp_get_next_optbyte+0x68>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	3314      	adds	r3, #20
 8011728:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801172a:	88fb      	ldrh	r3, [r7, #6]
 801172c:	683a      	ldr	r2, [r7, #0]
 801172e:	4413      	add	r3, r2
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	e00b      	b.n	801174c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011734:	88fb      	ldrh	r3, [r7, #6]
 8011736:	b2da      	uxtb	r2, r3
 8011738:	4b09      	ldr	r3, [pc, #36]	@ (8011760 <tcp_get_next_optbyte+0x64>)
 801173a:	881b      	ldrh	r3, [r3, #0]
 801173c:	b2db      	uxtb	r3, r3
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011742:	4b06      	ldr	r3, [pc, #24]	@ (801175c <tcp_get_next_optbyte+0x60>)
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	797b      	ldrb	r3, [r7, #5]
 8011748:	4413      	add	r3, r2
 801174a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801174c:	4618      	mov	r0, r3
 801174e:	370c      	adds	r7, #12
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr
 8011758:	20008850 	.word	0x20008850
 801175c:	2000884c 	.word	0x2000884c
 8011760:	2000884a 	.word	0x2000884a
 8011764:	20008844 	.word	0x20008844

08011768 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d106      	bne.n	8011784 <tcp_parseopt+0x1c>
 8011776:	4b32      	ldr	r3, [pc, #200]	@ (8011840 <tcp_parseopt+0xd8>)
 8011778:	f240 727d 	movw	r2, #1917	@ 0x77d
 801177c:	4931      	ldr	r1, [pc, #196]	@ (8011844 <tcp_parseopt+0xdc>)
 801177e:	4832      	ldr	r0, [pc, #200]	@ (8011848 <tcp_parseopt+0xe0>)
 8011780:	f005 fb46 	bl	8016e10 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011784:	4b31      	ldr	r3, [pc, #196]	@ (801184c <tcp_parseopt+0xe4>)
 8011786:	881b      	ldrh	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d056      	beq.n	801183a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801178c:	4b30      	ldr	r3, [pc, #192]	@ (8011850 <tcp_parseopt+0xe8>)
 801178e:	2200      	movs	r2, #0
 8011790:	801a      	strh	r2, [r3, #0]
 8011792:	e046      	b.n	8011822 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011794:	f7ff ffb2 	bl	80116fc <tcp_get_next_optbyte>
 8011798:	4603      	mov	r3, r0
 801179a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801179c:	7bfb      	ldrb	r3, [r7, #15]
 801179e:	2b02      	cmp	r3, #2
 80117a0:	d006      	beq.n	80117b0 <tcp_parseopt+0x48>
 80117a2:	2b02      	cmp	r3, #2
 80117a4:	dc2a      	bgt.n	80117fc <tcp_parseopt+0x94>
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d042      	beq.n	8011830 <tcp_parseopt+0xc8>
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	d038      	beq.n	8011820 <tcp_parseopt+0xb8>
 80117ae:	e025      	b.n	80117fc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80117b0:	f7ff ffa4 	bl	80116fc <tcp_get_next_optbyte>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b04      	cmp	r3, #4
 80117b8:	d13c      	bne.n	8011834 <tcp_parseopt+0xcc>
 80117ba:	4b25      	ldr	r3, [pc, #148]	@ (8011850 <tcp_parseopt+0xe8>)
 80117bc:	881b      	ldrh	r3, [r3, #0]
 80117be:	3301      	adds	r3, #1
 80117c0:	4a22      	ldr	r2, [pc, #136]	@ (801184c <tcp_parseopt+0xe4>)
 80117c2:	8812      	ldrh	r2, [r2, #0]
 80117c4:	4293      	cmp	r3, r2
 80117c6:	da35      	bge.n	8011834 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80117c8:	f7ff ff98 	bl	80116fc <tcp_get_next_optbyte>
 80117cc:	4603      	mov	r3, r0
 80117ce:	021b      	lsls	r3, r3, #8
 80117d0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80117d2:	f7ff ff93 	bl	80116fc <tcp_get_next_optbyte>
 80117d6:	4603      	mov	r3, r0
 80117d8:	461a      	mov	r2, r3
 80117da:	89bb      	ldrh	r3, [r7, #12]
 80117dc:	4313      	orrs	r3, r2
 80117de:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80117e0:	89bb      	ldrh	r3, [r7, #12]
 80117e2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80117e6:	d804      	bhi.n	80117f2 <tcp_parseopt+0x8a>
 80117e8:	89bb      	ldrh	r3, [r7, #12]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d001      	beq.n	80117f2 <tcp_parseopt+0x8a>
 80117ee:	89ba      	ldrh	r2, [r7, #12]
 80117f0:	e001      	b.n	80117f6 <tcp_parseopt+0x8e>
 80117f2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80117fa:	e012      	b.n	8011822 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80117fc:	f7ff ff7e 	bl	80116fc <tcp_get_next_optbyte>
 8011800:	4603      	mov	r3, r0
 8011802:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011804:	7afb      	ldrb	r3, [r7, #11]
 8011806:	2b01      	cmp	r3, #1
 8011808:	d916      	bls.n	8011838 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801180a:	7afb      	ldrb	r3, [r7, #11]
 801180c:	b29a      	uxth	r2, r3
 801180e:	4b10      	ldr	r3, [pc, #64]	@ (8011850 <tcp_parseopt+0xe8>)
 8011810:	881b      	ldrh	r3, [r3, #0]
 8011812:	4413      	add	r3, r2
 8011814:	b29b      	uxth	r3, r3
 8011816:	3b02      	subs	r3, #2
 8011818:	b29a      	uxth	r2, r3
 801181a:	4b0d      	ldr	r3, [pc, #52]	@ (8011850 <tcp_parseopt+0xe8>)
 801181c:	801a      	strh	r2, [r3, #0]
 801181e:	e000      	b.n	8011822 <tcp_parseopt+0xba>
          break;
 8011820:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011822:	4b0b      	ldr	r3, [pc, #44]	@ (8011850 <tcp_parseopt+0xe8>)
 8011824:	881a      	ldrh	r2, [r3, #0]
 8011826:	4b09      	ldr	r3, [pc, #36]	@ (801184c <tcp_parseopt+0xe4>)
 8011828:	881b      	ldrh	r3, [r3, #0]
 801182a:	429a      	cmp	r2, r3
 801182c:	d3b2      	bcc.n	8011794 <tcp_parseopt+0x2c>
 801182e:	e004      	b.n	801183a <tcp_parseopt+0xd2>
          return;
 8011830:	bf00      	nop
 8011832:	e002      	b.n	801183a <tcp_parseopt+0xd2>
            return;
 8011834:	bf00      	nop
 8011836:	e000      	b.n	801183a <tcp_parseopt+0xd2>
            return;
 8011838:	bf00      	nop
      }
    }
  }
}
 801183a:	3710      	adds	r7, #16
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	08018e6c 	.word	0x08018e6c
 8011844:	080192d0 	.word	0x080192d0
 8011848:	08018eb8 	.word	0x08018eb8
 801184c:	20008848 	.word	0x20008848
 8011850:	20008850 	.word	0x20008850

08011854 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011854:	b480      	push	{r7}
 8011856:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011858:	4b05      	ldr	r3, [pc, #20]	@ (8011870 <tcp_trigger_input_pcb_close+0x1c>)
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	f043 0310 	orr.w	r3, r3, #16
 8011860:	b2da      	uxtb	r2, r3
 8011862:	4b03      	ldr	r3, [pc, #12]	@ (8011870 <tcp_trigger_input_pcb_close+0x1c>)
 8011864:	701a      	strb	r2, [r3, #0]
}
 8011866:	bf00      	nop
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr
 8011870:	20008861 	.word	0x20008861

08011874 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d00a      	beq.n	801189c <tcp_route+0x28>
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	7a1b      	ldrb	r3, [r3, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d006      	beq.n	801189c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	7a1b      	ldrb	r3, [r3, #8]
 8011892:	4618      	mov	r0, r3
 8011894:	f7fb fb4c 	bl	800cf30 <netif_get_by_index>
 8011898:	4603      	mov	r3, r0
 801189a:	e003      	b.n	80118a4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f003 f96b 	bl	8014b78 <ip4_route>
 80118a2:	4603      	mov	r3, r0
  }
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3710      	adds	r7, #16
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80118ac:	b590      	push	{r4, r7, lr}
 80118ae:	b087      	sub	sp, #28
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	603b      	str	r3, [r7, #0]
 80118b8:	4613      	mov	r3, r2
 80118ba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d105      	bne.n	80118ce <tcp_create_segment+0x22>
 80118c2:	4b43      	ldr	r3, [pc, #268]	@ (80119d0 <tcp_create_segment+0x124>)
 80118c4:	22a3      	movs	r2, #163	@ 0xa3
 80118c6:	4943      	ldr	r1, [pc, #268]	@ (80119d4 <tcp_create_segment+0x128>)
 80118c8:	4843      	ldr	r0, [pc, #268]	@ (80119d8 <tcp_create_segment+0x12c>)
 80118ca:	f005 faa1 	bl	8016e10 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d105      	bne.n	80118e0 <tcp_create_segment+0x34>
 80118d4:	4b3e      	ldr	r3, [pc, #248]	@ (80119d0 <tcp_create_segment+0x124>)
 80118d6:	22a4      	movs	r2, #164	@ 0xa4
 80118d8:	4940      	ldr	r1, [pc, #256]	@ (80119dc <tcp_create_segment+0x130>)
 80118da:	483f      	ldr	r0, [pc, #252]	@ (80119d8 <tcp_create_segment+0x12c>)
 80118dc:	f005 fa98 	bl	8016e10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80118e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	f003 0304 	and.w	r3, r3, #4
 80118ec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80118ee:	2003      	movs	r0, #3
 80118f0:	f7fa ff98 	bl	800c824 <memp_malloc>
 80118f4:	6138      	str	r0, [r7, #16]
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d104      	bne.n	8011906 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80118fc:	68b8      	ldr	r0, [r7, #8]
 80118fe:	f7fb fe77 	bl	800d5f0 <pbuf_free>
    return NULL;
 8011902:	2300      	movs	r3, #0
 8011904:	e060      	b.n	80119c8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801190c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	2200      	movs	r2, #0
 8011912:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	891a      	ldrh	r2, [r3, #8]
 801191e:	7dfb      	ldrb	r3, [r7, #23]
 8011920:	b29b      	uxth	r3, r3
 8011922:	429a      	cmp	r2, r3
 8011924:	d205      	bcs.n	8011932 <tcp_create_segment+0x86>
 8011926:	4b2a      	ldr	r3, [pc, #168]	@ (80119d0 <tcp_create_segment+0x124>)
 8011928:	22b0      	movs	r2, #176	@ 0xb0
 801192a:	492d      	ldr	r1, [pc, #180]	@ (80119e0 <tcp_create_segment+0x134>)
 801192c:	482a      	ldr	r0, [pc, #168]	@ (80119d8 <tcp_create_segment+0x12c>)
 801192e:	f005 fa6f 	bl	8016e10 <iprintf>
  seg->len = p->tot_len - optlen;
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	891a      	ldrh	r2, [r3, #8]
 8011936:	7dfb      	ldrb	r3, [r7, #23]
 8011938:	b29b      	uxth	r3, r3
 801193a:	1ad3      	subs	r3, r2, r3
 801193c:	b29a      	uxth	r2, r3
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011942:	2114      	movs	r1, #20
 8011944:	68b8      	ldr	r0, [r7, #8]
 8011946:	f7fb fdbd 	bl	800d4c4 <pbuf_add_header>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d004      	beq.n	801195a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011950:	6938      	ldr	r0, [r7, #16]
 8011952:	f7fd f8d2 	bl	800eafa <tcp_seg_free>
    return NULL;
 8011956:	2300      	movs	r3, #0
 8011958:	e036      	b.n	80119c8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	685a      	ldr	r2, [r3, #4]
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	8ada      	ldrh	r2, [r3, #22]
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	68dc      	ldr	r4, [r3, #12]
 801196c:	4610      	mov	r0, r2
 801196e:	f7fa fae5 	bl	800bf3c <lwip_htons>
 8011972:	4603      	mov	r3, r0
 8011974:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	8b1a      	ldrh	r2, [r3, #24]
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	68dc      	ldr	r4, [r3, #12]
 801197e:	4610      	mov	r0, r2
 8011980:	f7fa fadc 	bl	800bf3c <lwip_htons>
 8011984:	4603      	mov	r3, r0
 8011986:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	68dc      	ldr	r4, [r3, #12]
 801198c:	6838      	ldr	r0, [r7, #0]
 801198e:	f7fa faeb 	bl	800bf68 <lwip_htonl>
 8011992:	4603      	mov	r3, r0
 8011994:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011996:	7dfb      	ldrb	r3, [r7, #23]
 8011998:	089b      	lsrs	r3, r3, #2
 801199a:	b2db      	uxtb	r3, r3
 801199c:	3305      	adds	r3, #5
 801199e:	b29b      	uxth	r3, r3
 80119a0:	031b      	lsls	r3, r3, #12
 80119a2:	b29a      	uxth	r2, r3
 80119a4:	79fb      	ldrb	r3, [r7, #7]
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	4313      	orrs	r3, r2
 80119aa:	b29a      	uxth	r2, r3
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	68dc      	ldr	r4, [r3, #12]
 80119b0:	4610      	mov	r0, r2
 80119b2:	f7fa fac3 	bl	800bf3c <lwip_htons>
 80119b6:	4603      	mov	r3, r0
 80119b8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	68db      	ldr	r3, [r3, #12]
 80119be:	2200      	movs	r2, #0
 80119c0:	749a      	strb	r2, [r3, #18]
 80119c2:	2200      	movs	r2, #0
 80119c4:	74da      	strb	r2, [r3, #19]
  return seg;
 80119c6:	693b      	ldr	r3, [r7, #16]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	371c      	adds	r7, #28
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd90      	pop	{r4, r7, pc}
 80119d0:	080192ec 	.word	0x080192ec
 80119d4:	08019320 	.word	0x08019320
 80119d8:	08019340 	.word	0x08019340
 80119dc:	08019368 	.word	0x08019368
 80119e0:	0801938c 	.word	0x0801938c

080119e4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80119e4:	b590      	push	{r4, r7, lr}
 80119e6:	b08b      	sub	sp, #44	@ 0x2c
 80119e8:	af02      	add	r7, sp, #8
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	460b      	mov	r3, r1
 80119ee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80119f0:	2300      	movs	r3, #0
 80119f2:	61fb      	str	r3, [r7, #28]
 80119f4:	2300      	movs	r3, #0
 80119f6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80119f8:	2300      	movs	r3, #0
 80119fa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d106      	bne.n	8011a10 <tcp_split_unsent_seg+0x2c>
 8011a02:	4b95      	ldr	r3, [pc, #596]	@ (8011c58 <tcp_split_unsent_seg+0x274>)
 8011a04:	f240 324b 	movw	r2, #843	@ 0x34b
 8011a08:	4994      	ldr	r1, [pc, #592]	@ (8011c5c <tcp_split_unsent_seg+0x278>)
 8011a0a:	4895      	ldr	r0, [pc, #596]	@ (8011c60 <tcp_split_unsent_seg+0x27c>)
 8011a0c:	f005 fa00 	bl	8016e10 <iprintf>

  useg = pcb->unsent;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d102      	bne.n	8011a22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a20:	e116      	b.n	8011c50 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011a22:	887b      	ldrh	r3, [r7, #2]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d109      	bne.n	8011a3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011a28:	4b8b      	ldr	r3, [pc, #556]	@ (8011c58 <tcp_split_unsent_seg+0x274>)
 8011a2a:	f240 3253 	movw	r2, #851	@ 0x353
 8011a2e:	498d      	ldr	r1, [pc, #564]	@ (8011c64 <tcp_split_unsent_seg+0x280>)
 8011a30:	488b      	ldr	r0, [pc, #556]	@ (8011c60 <tcp_split_unsent_seg+0x27c>)
 8011a32:	f005 f9ed 	bl	8016e10 <iprintf>
    return ERR_VAL;
 8011a36:	f06f 0305 	mvn.w	r3, #5
 8011a3a:	e109      	b.n	8011c50 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	891b      	ldrh	r3, [r3, #8]
 8011a40:	887a      	ldrh	r2, [r7, #2]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d301      	bcc.n	8011a4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011a46:	2300      	movs	r3, #0
 8011a48:	e102      	b.n	8011c50 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a4e:	887a      	ldrh	r2, [r7, #2]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d906      	bls.n	8011a62 <tcp_split_unsent_seg+0x7e>
 8011a54:	4b80      	ldr	r3, [pc, #512]	@ (8011c58 <tcp_split_unsent_seg+0x274>)
 8011a56:	f240 325b 	movw	r2, #859	@ 0x35b
 8011a5a:	4983      	ldr	r1, [pc, #524]	@ (8011c68 <tcp_split_unsent_seg+0x284>)
 8011a5c:	4880      	ldr	r0, [pc, #512]	@ (8011c60 <tcp_split_unsent_seg+0x27c>)
 8011a5e:	f005 f9d7 	bl	8016e10 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	891b      	ldrh	r3, [r3, #8]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d106      	bne.n	8011a78 <tcp_split_unsent_seg+0x94>
 8011a6a:	4b7b      	ldr	r3, [pc, #492]	@ (8011c58 <tcp_split_unsent_seg+0x274>)
 8011a6c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011a70:	497e      	ldr	r1, [pc, #504]	@ (8011c6c <tcp_split_unsent_seg+0x288>)
 8011a72:	487b      	ldr	r0, [pc, #492]	@ (8011c60 <tcp_split_unsent_seg+0x27c>)
 8011a74:	f005 f9cc 	bl	8016e10 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	7a9b      	ldrb	r3, [r3, #10]
 8011a7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011a7e:	7bfb      	ldrb	r3, [r7, #15]
 8011a80:	009b      	lsls	r3, r3, #2
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	f003 0304 	and.w	r3, r3, #4
 8011a88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	891a      	ldrh	r2, [r3, #8]
 8011a8e:	887b      	ldrh	r3, [r7, #2]
 8011a90:	1ad3      	subs	r3, r2, r3
 8011a92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011a94:	7bbb      	ldrb	r3, [r7, #14]
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	89bb      	ldrh	r3, [r7, #12]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	2036      	movs	r0, #54	@ 0x36
 8011aa6:	f7fb fabf 	bl	800d028 <pbuf_alloc>
 8011aaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	f000 80b7 	beq.w	8011c22 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	891a      	ldrh	r2, [r3, #8]
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	891b      	ldrh	r3, [r3, #8]
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	887b      	ldrh	r3, [r7, #2]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	6858      	ldr	r0, [r3, #4]
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	685a      	ldr	r2, [r3, #4]
 8011ad0:	7bbb      	ldrb	r3, [r7, #14]
 8011ad2:	18d1      	adds	r1, r2, r3
 8011ad4:	897b      	ldrh	r3, [r7, #10]
 8011ad6:	89ba      	ldrh	r2, [r7, #12]
 8011ad8:	f7fb ff84 	bl	800d9e4 <pbuf_copy_partial>
 8011adc:	4603      	mov	r3, r0
 8011ade:	461a      	mov	r2, r3
 8011ae0:	89bb      	ldrh	r3, [r7, #12]
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	f040 809f 	bne.w	8011c26 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	68db      	ldr	r3, [r3, #12]
 8011aec:	899b      	ldrh	r3, [r3, #12]
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fa fa23 	bl	800bf3c <lwip_htons>
 8011af6:	4603      	mov	r3, r0
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011afe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011b00:	2300      	movs	r3, #0
 8011b02:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011b04:	7efb      	ldrb	r3, [r7, #27]
 8011b06:	f003 0308 	and.w	r3, r3, #8
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d007      	beq.n	8011b1e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011b0e:	7efb      	ldrb	r3, [r7, #27]
 8011b10:	f023 0308 	bic.w	r3, r3, #8
 8011b14:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011b16:	7ebb      	ldrb	r3, [r7, #26]
 8011b18:	f043 0308 	orr.w	r3, r3, #8
 8011b1c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011b1e:	7efb      	ldrb	r3, [r7, #27]
 8011b20:	f003 0301 	and.w	r3, r3, #1
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d007      	beq.n	8011b38 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011b28:	7efb      	ldrb	r3, [r7, #27]
 8011b2a:	f023 0301 	bic.w	r3, r3, #1
 8011b2e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011b30:	7ebb      	ldrb	r3, [r7, #26]
 8011b32:	f043 0301 	orr.w	r3, r3, #1
 8011b36:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7fa fa12 	bl	800bf68 <lwip_htonl>
 8011b44:	4602      	mov	r2, r0
 8011b46:	887b      	ldrh	r3, [r7, #2]
 8011b48:	18d1      	adds	r1, r2, r3
 8011b4a:	7eba      	ldrb	r2, [r7, #26]
 8011b4c:	7bfb      	ldrb	r3, [r7, #15]
 8011b4e:	9300      	str	r3, [sp, #0]
 8011b50:	460b      	mov	r3, r1
 8011b52:	6939      	ldr	r1, [r7, #16]
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7ff fea9 	bl	80118ac <tcp_create_segment>
 8011b5a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d063      	beq.n	8011c2a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fb fdca 	bl	800d700 <pbuf_clen>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	461a      	mov	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b76:	1a9b      	subs	r3, r3, r2
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	6858      	ldr	r0, [r3, #4]
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	685b      	ldr	r3, [r3, #4]
 8011b88:	891a      	ldrh	r2, [r3, #8]
 8011b8a:	89bb      	ldrh	r3, [r7, #12]
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	b29b      	uxth	r3, r3
 8011b90:	4619      	mov	r1, r3
 8011b92:	f7fb fba7 	bl	800d2e4 <pbuf_realloc>
  useg->len -= remainder;
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	891a      	ldrh	r2, [r3, #8]
 8011b9a:	89bb      	ldrh	r3, [r7, #12]
 8011b9c:	1ad3      	subs	r3, r2, r3
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	899b      	ldrh	r3, [r3, #12]
 8011baa:	b29c      	uxth	r4, r3
 8011bac:	7efb      	ldrb	r3, [r7, #27]
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fa f9c3 	bl	800bf3c <lwip_htons>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	461a      	mov	r2, r3
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	4322      	orrs	r2, r4
 8011bc0:	b292      	uxth	r2, r2
 8011bc2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fb fd99 	bl	800d700 <pbuf_clen>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011bd8:	4413      	add	r3, r2
 8011bda:	b29a      	uxth	r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fb fd8a 	bl	800d700 <pbuf_clen>
 8011bec:	4603      	mov	r3, r0
 8011bee:	461a      	mov	r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011bf6:	4413      	add	r3, r2
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	69fb      	ldr	r3, [r7, #28]
 8011c06:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	69fa      	ldr	r2, [r7, #28]
 8011c0c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011c0e:	69fb      	ldr	r3, [r7, #28]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d103      	bne.n	8011c1e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	e016      	b.n	8011c50 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011c22:	bf00      	nop
 8011c24:	e002      	b.n	8011c2c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011c26:	bf00      	nop
 8011c28:	e000      	b.n	8011c2c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011c2a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011c2c:	69fb      	ldr	r3, [r7, #28]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d006      	beq.n	8011c40 <tcp_split_unsent_seg+0x25c>
 8011c32:	4b09      	ldr	r3, [pc, #36]	@ (8011c58 <tcp_split_unsent_seg+0x274>)
 8011c34:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011c38:	490d      	ldr	r1, [pc, #52]	@ (8011c70 <tcp_split_unsent_seg+0x28c>)
 8011c3a:	4809      	ldr	r0, [pc, #36]	@ (8011c60 <tcp_split_unsent_seg+0x27c>)
 8011c3c:	f005 f8e8 	bl	8016e10 <iprintf>
  if (p != NULL) {
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d002      	beq.n	8011c4c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011c46:	6938      	ldr	r0, [r7, #16]
 8011c48:	f7fb fcd2 	bl	800d5f0 <pbuf_free>
  }

  return ERR_MEM;
 8011c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3724      	adds	r7, #36	@ 0x24
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd90      	pop	{r4, r7, pc}
 8011c58:	080192ec 	.word	0x080192ec
 8011c5c:	08019680 	.word	0x08019680
 8011c60:	08019340 	.word	0x08019340
 8011c64:	080196a4 	.word	0x080196a4
 8011c68:	080196c8 	.word	0x080196c8
 8011c6c:	080196d8 	.word	0x080196d8
 8011c70:	080196e8 	.word	0x080196e8

08011c74 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011c74:	b590      	push	{r4, r7, lr}
 8011c76:	b085      	sub	sp, #20
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d106      	bne.n	8011c90 <tcp_send_fin+0x1c>
 8011c82:	4b21      	ldr	r3, [pc, #132]	@ (8011d08 <tcp_send_fin+0x94>)
 8011c84:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011c88:	4920      	ldr	r1, [pc, #128]	@ (8011d0c <tcp_send_fin+0x98>)
 8011c8a:	4821      	ldr	r0, [pc, #132]	@ (8011d10 <tcp_send_fin+0x9c>)
 8011c8c:	f005 f8c0 	bl	8016e10 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d02e      	beq.n	8011cf6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c9c:	60fb      	str	r3, [r7, #12]
 8011c9e:	e002      	b.n	8011ca6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1f8      	bne.n	8011ca0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	899b      	ldrh	r3, [r3, #12]
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fa f940 	bl	800bf3c <lwip_htons>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	f003 0307 	and.w	r3, r3, #7
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d116      	bne.n	8011cf6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	899b      	ldrh	r3, [r3, #12]
 8011cce:	b29c      	uxth	r4, r3
 8011cd0:	2001      	movs	r0, #1
 8011cd2:	f7fa f933 	bl	800bf3c <lwip_htons>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	461a      	mov	r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	68db      	ldr	r3, [r3, #12]
 8011cde:	4322      	orrs	r2, r4
 8011ce0:	b292      	uxth	r2, r2
 8011ce2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	8b5b      	ldrh	r3, [r3, #26]
 8011ce8:	f043 0320 	orr.w	r3, r3, #32
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	e004      	b.n	8011d00 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011cf6:	2101      	movs	r1, #1
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f000 f80b 	bl	8011d14 <tcp_enqueue_flags>
 8011cfe:	4603      	mov	r3, r0
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	3714      	adds	r7, #20
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd90      	pop	{r4, r7, pc}
 8011d08:	080192ec 	.word	0x080192ec
 8011d0c:	080196f4 	.word	0x080196f4
 8011d10:	08019340 	.word	0x08019340

08011d14 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b08a      	sub	sp, #40	@ 0x28
 8011d18:	af02      	add	r7, sp, #8
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011d20:	2300      	movs	r3, #0
 8011d22:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011d24:	2300      	movs	r3, #0
 8011d26:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011d28:	78fb      	ldrb	r3, [r7, #3]
 8011d2a:	f003 0303 	and.w	r3, r3, #3
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d106      	bne.n	8011d40 <tcp_enqueue_flags+0x2c>
 8011d32:	4b67      	ldr	r3, [pc, #412]	@ (8011ed0 <tcp_enqueue_flags+0x1bc>)
 8011d34:	f240 4211 	movw	r2, #1041	@ 0x411
 8011d38:	4966      	ldr	r1, [pc, #408]	@ (8011ed4 <tcp_enqueue_flags+0x1c0>)
 8011d3a:	4867      	ldr	r0, [pc, #412]	@ (8011ed8 <tcp_enqueue_flags+0x1c4>)
 8011d3c:	f005 f868 	bl	8016e10 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d106      	bne.n	8011d54 <tcp_enqueue_flags+0x40>
 8011d46:	4b62      	ldr	r3, [pc, #392]	@ (8011ed0 <tcp_enqueue_flags+0x1bc>)
 8011d48:	f240 4213 	movw	r2, #1043	@ 0x413
 8011d4c:	4963      	ldr	r1, [pc, #396]	@ (8011edc <tcp_enqueue_flags+0x1c8>)
 8011d4e:	4862      	ldr	r0, [pc, #392]	@ (8011ed8 <tcp_enqueue_flags+0x1c4>)
 8011d50:	f005 f85e 	bl	8016e10 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011d54:	78fb      	ldrb	r3, [r7, #3]
 8011d56:	f003 0302 	and.w	r3, r3, #2
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d001      	beq.n	8011d62 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011d5e:	2301      	movs	r3, #1
 8011d60:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d62:	7ffb      	ldrb	r3, [r7, #31]
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	f003 0304 	and.w	r3, r3, #4
 8011d6c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d6e:	7dfb      	ldrb	r3, [r7, #23]
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d76:	4619      	mov	r1, r3
 8011d78:	2036      	movs	r0, #54	@ 0x36
 8011d7a:	f7fb f955 	bl	800d028 <pbuf_alloc>
 8011d7e:	6138      	str	r0, [r7, #16]
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d109      	bne.n	8011d9a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	8b5b      	ldrh	r3, [r3, #26]
 8011d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d94:	f04f 33ff 	mov.w	r3, #4294967295
 8011d98:	e095      	b.n	8011ec6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	895a      	ldrh	r2, [r3, #10]
 8011d9e:	7dfb      	ldrb	r3, [r7, #23]
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d206      	bcs.n	8011db4 <tcp_enqueue_flags+0xa0>
 8011da6:	4b4a      	ldr	r3, [pc, #296]	@ (8011ed0 <tcp_enqueue_flags+0x1bc>)
 8011da8:	f240 4239 	movw	r2, #1081	@ 0x439
 8011dac:	494c      	ldr	r1, [pc, #304]	@ (8011ee0 <tcp_enqueue_flags+0x1cc>)
 8011dae:	484a      	ldr	r0, [pc, #296]	@ (8011ed8 <tcp_enqueue_flags+0x1c4>)
 8011db0:	f005 f82e 	bl	8016e10 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011db8:	78fa      	ldrb	r2, [r7, #3]
 8011dba:	7ffb      	ldrb	r3, [r7, #31]
 8011dbc:	9300      	str	r3, [sp, #0]
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	6939      	ldr	r1, [r7, #16]
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff fd72 	bl	80118ac <tcp_create_segment>
 8011dc8:	60f8      	str	r0, [r7, #12]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d109      	bne.n	8011de4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	8b5b      	ldrh	r3, [r3, #26]
 8011dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dd8:	b29a      	uxth	r2, r3
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011dde:	f04f 33ff 	mov.w	r3, #4294967295
 8011de2:	e070      	b.n	8011ec6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	f003 0303 	and.w	r3, r3, #3
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d006      	beq.n	8011dfe <tcp_enqueue_flags+0xea>
 8011df0:	4b37      	ldr	r3, [pc, #220]	@ (8011ed0 <tcp_enqueue_flags+0x1bc>)
 8011df2:	f240 4242 	movw	r2, #1090	@ 0x442
 8011df6:	493b      	ldr	r1, [pc, #236]	@ (8011ee4 <tcp_enqueue_flags+0x1d0>)
 8011df8:	4837      	ldr	r0, [pc, #220]	@ (8011ed8 <tcp_enqueue_flags+0x1c4>)
 8011dfa:	f005 f809 	bl	8016e10 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	891b      	ldrh	r3, [r3, #8]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d006      	beq.n	8011e14 <tcp_enqueue_flags+0x100>
 8011e06:	4b32      	ldr	r3, [pc, #200]	@ (8011ed0 <tcp_enqueue_flags+0x1bc>)
 8011e08:	f240 4243 	movw	r2, #1091	@ 0x443
 8011e0c:	4936      	ldr	r1, [pc, #216]	@ (8011ee8 <tcp_enqueue_flags+0x1d4>)
 8011e0e:	4832      	ldr	r0, [pc, #200]	@ (8011ed8 <tcp_enqueue_flags+0x1c4>)
 8011e10:	f004 fffe 	bl	8016e10 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d103      	bne.n	8011e24 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011e22:	e00d      	b.n	8011e40 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e28:	61bb      	str	r3, [r7, #24]
 8011e2a:	e002      	b.n	8011e32 <tcp_enqueue_flags+0x11e>
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	61bb      	str	r3, [r7, #24]
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d1f8      	bne.n	8011e2c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	68fa      	ldr	r2, [r7, #12]
 8011e3e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2200      	movs	r2, #0
 8011e44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011e48:	78fb      	ldrb	r3, [r7, #3]
 8011e4a:	f003 0302 	and.w	r3, r3, #2
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d104      	bne.n	8011e5c <tcp_enqueue_flags+0x148>
 8011e52:	78fb      	ldrb	r3, [r7, #3]
 8011e54:	f003 0301 	and.w	r3, r3, #1
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d004      	beq.n	8011e66 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e60:	1c5a      	adds	r2, r3, #1
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011e66:	78fb      	ldrb	r3, [r7, #3]
 8011e68:	f003 0301 	and.w	r3, r3, #1
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d006      	beq.n	8011e7e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	8b5b      	ldrh	r3, [r3, #26]
 8011e74:	f043 0320 	orr.w	r3, r3, #32
 8011e78:	b29a      	uxth	r2, r3
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7fb fc3c 	bl	800d700 <pbuf_clen>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e92:	4413      	add	r3, r2
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d00e      	beq.n	8011ec4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d10a      	bne.n	8011ec4 <tcp_enqueue_flags+0x1b0>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d106      	bne.n	8011ec4 <tcp_enqueue_flags+0x1b0>
 8011eb6:	4b06      	ldr	r3, [pc, #24]	@ (8011ed0 <tcp_enqueue_flags+0x1bc>)
 8011eb8:	f240 4265 	movw	r2, #1125	@ 0x465
 8011ebc:	490b      	ldr	r1, [pc, #44]	@ (8011eec <tcp_enqueue_flags+0x1d8>)
 8011ebe:	4806      	ldr	r0, [pc, #24]	@ (8011ed8 <tcp_enqueue_flags+0x1c4>)
 8011ec0:	f004 ffa6 	bl	8016e10 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011ec4:	2300      	movs	r3, #0
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3720      	adds	r7, #32
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	080192ec 	.word	0x080192ec
 8011ed4:	08019710 	.word	0x08019710
 8011ed8:	08019340 	.word	0x08019340
 8011edc:	08019768 	.word	0x08019768
 8011ee0:	08019788 	.word	0x08019788
 8011ee4:	080197c4 	.word	0x080197c4
 8011ee8:	080197dc 	.word	0x080197dc
 8011eec:	08019808 	.word	0x08019808

08011ef0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011ef0:	b5b0      	push	{r4, r5, r7, lr}
 8011ef2:	b08a      	sub	sp, #40	@ 0x28
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d106      	bne.n	8011f0c <tcp_output+0x1c>
 8011efe:	4b8a      	ldr	r3, [pc, #552]	@ (8012128 <tcp_output+0x238>)
 8011f00:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011f04:	4989      	ldr	r1, [pc, #548]	@ (801212c <tcp_output+0x23c>)
 8011f06:	488a      	ldr	r0, [pc, #552]	@ (8012130 <tcp_output+0x240>)
 8011f08:	f004 ff82 	bl	8016e10 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	7d1b      	ldrb	r3, [r3, #20]
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d106      	bne.n	8011f22 <tcp_output+0x32>
 8011f14:	4b84      	ldr	r3, [pc, #528]	@ (8012128 <tcp_output+0x238>)
 8011f16:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011f1a:	4986      	ldr	r1, [pc, #536]	@ (8012134 <tcp_output+0x244>)
 8011f1c:	4884      	ldr	r0, [pc, #528]	@ (8012130 <tcp_output+0x240>)
 8011f1e:	f004 ff77 	bl	8016e10 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011f22:	4b85      	ldr	r3, [pc, #532]	@ (8012138 <tcp_output+0x248>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d101      	bne.n	8011f30 <tcp_output+0x40>
    return ERR_OK;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	e1ce      	b.n	80122ce <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	bf28      	it	cs
 8011f40:	4613      	movcs	r3, r2
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d10b      	bne.n	8011f6a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	8b5b      	ldrh	r3, [r3, #26]
 8011f56:	f003 0302 	and.w	r3, r3, #2
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f000 81aa 	beq.w	80122b4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f000 fdcb 	bl	8012afc <tcp_send_empty_ack>
 8011f66:	4603      	mov	r3, r0
 8011f68:	e1b1      	b.n	80122ce <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011f6a:	6879      	ldr	r1, [r7, #4]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	3304      	adds	r3, #4
 8011f70:	461a      	mov	r2, r3
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f7ff fc7e 	bl	8011874 <tcp_route>
 8011f78:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d102      	bne.n	8011f86 <tcp_output+0x96>
    return ERR_RTE;
 8011f80:	f06f 0303 	mvn.w	r3, #3
 8011f84:	e1a3      	b.n	80122ce <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d003      	beq.n	8011f94 <tcp_output+0xa4>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d111      	bne.n	8011fb8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d002      	beq.n	8011fa0 <tcp_output+0xb0>
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	3304      	adds	r3, #4
 8011f9e:	e000      	b.n	8011fa2 <tcp_output+0xb2>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d102      	bne.n	8011fb0 <tcp_output+0xc0>
      return ERR_RTE;
 8011faa:	f06f 0303 	mvn.w	r3, #3
 8011fae:	e18e      	b.n	80122ce <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	681a      	ldr	r2, [r3, #0]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7f9 ffd2 	bl	800bf68 <lwip_htonl>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fca:	1ad3      	subs	r3, r2, r3
 8011fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fce:	8912      	ldrh	r2, [r2, #8]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	69ba      	ldr	r2, [r7, #24]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d227      	bcs.n	8012028 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011fde:	461a      	mov	r2, r3
 8011fe0:	69bb      	ldr	r3, [r7, #24]
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	d114      	bne.n	8012010 <tcp_output+0x120>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d110      	bne.n	8012010 <tcp_output+0x120>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d10b      	bne.n	8012010 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2201      	movs	r2, #1
 8012004:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2200      	movs	r2, #0
 801200c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	8b5b      	ldrh	r3, [r3, #26]
 8012014:	f003 0302 	and.w	r3, r3, #2
 8012018:	2b00      	cmp	r3, #0
 801201a:	f000 814d 	beq.w	80122b8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f000 fd6c 	bl	8012afc <tcp_send_empty_ack>
 8012024:	4603      	mov	r3, r0
 8012026:	e152      	b.n	80122ce <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2200      	movs	r2, #0
 801202c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012034:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012036:	6a3b      	ldr	r3, [r7, #32]
 8012038:	2b00      	cmp	r3, #0
 801203a:	f000 811c 	beq.w	8012276 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801203e:	e002      	b.n	8012046 <tcp_output+0x156>
 8012040:	6a3b      	ldr	r3, [r7, #32]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	623b      	str	r3, [r7, #32]
 8012046:	6a3b      	ldr	r3, [r7, #32]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d1f8      	bne.n	8012040 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801204e:	e112      	b.n	8012276 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012052:	68db      	ldr	r3, [r3, #12]
 8012054:	899b      	ldrh	r3, [r3, #12]
 8012056:	b29b      	uxth	r3, r3
 8012058:	4618      	mov	r0, r3
 801205a:	f7f9 ff6f 	bl	800bf3c <lwip_htons>
 801205e:	4603      	mov	r3, r0
 8012060:	b2db      	uxtb	r3, r3
 8012062:	f003 0304 	and.w	r3, r3, #4
 8012066:	2b00      	cmp	r3, #0
 8012068:	d006      	beq.n	8012078 <tcp_output+0x188>
 801206a:	4b2f      	ldr	r3, [pc, #188]	@ (8012128 <tcp_output+0x238>)
 801206c:	f240 5236 	movw	r2, #1334	@ 0x536
 8012070:	4932      	ldr	r1, [pc, #200]	@ (801213c <tcp_output+0x24c>)
 8012072:	482f      	ldr	r0, [pc, #188]	@ (8012130 <tcp_output+0x240>)
 8012074:	f004 fecc 	bl	8016e10 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801207c:	2b00      	cmp	r3, #0
 801207e:	d01f      	beq.n	80120c0 <tcp_output+0x1d0>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	8b5b      	ldrh	r3, [r3, #26]
 8012084:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012088:	2b00      	cmp	r3, #0
 801208a:	d119      	bne.n	80120c0 <tcp_output+0x1d0>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012090:	2b00      	cmp	r3, #0
 8012092:	d00b      	beq.n	80120ac <tcp_output+0x1bc>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d110      	bne.n	80120c0 <tcp_output+0x1d0>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120a2:	891a      	ldrh	r2, [r3, #8]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d209      	bcs.n	80120c0 <tcp_output+0x1d0>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d004      	beq.n	80120c0 <tcp_output+0x1d0>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80120bc:	2b08      	cmp	r3, #8
 80120be:	d901      	bls.n	80120c4 <tcp_output+0x1d4>
 80120c0:	2301      	movs	r3, #1
 80120c2:	e000      	b.n	80120c6 <tcp_output+0x1d6>
 80120c4:	2300      	movs	r3, #0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	8b5b      	ldrh	r3, [r3, #26]
 80120ce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f000 80e4 	beq.w	80122a0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	7d1b      	ldrb	r3, [r3, #20]
 80120dc:	2b02      	cmp	r3, #2
 80120de:	d00d      	beq.n	80120fc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80120e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	899b      	ldrh	r3, [r3, #12]
 80120e6:	b29c      	uxth	r4, r3
 80120e8:	2010      	movs	r0, #16
 80120ea:	f7f9 ff27 	bl	800bf3c <lwip_htons>
 80120ee:	4603      	mov	r3, r0
 80120f0:	461a      	mov	r2, r3
 80120f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f4:	68db      	ldr	r3, [r3, #12]
 80120f6:	4322      	orrs	r2, r4
 80120f8:	b292      	uxth	r2, r2
 80120fa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80120fc:	697a      	ldr	r2, [r7, #20]
 80120fe:	6879      	ldr	r1, [r7, #4]
 8012100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012102:	f000 f909 	bl	8012318 <tcp_output_segment>
 8012106:	4603      	mov	r3, r0
 8012108:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d016      	beq.n	8012140 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	8b5b      	ldrh	r3, [r3, #26]
 8012116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801211a:	b29a      	uxth	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	835a      	strh	r2, [r3, #26]
      return err;
 8012120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012124:	e0d3      	b.n	80122ce <tcp_output+0x3de>
 8012126:	bf00      	nop
 8012128:	080192ec 	.word	0x080192ec
 801212c:	08019830 	.word	0x08019830
 8012130:	08019340 	.word	0x08019340
 8012134:	08019848 	.word	0x08019848
 8012138:	20008868 	.word	0x20008868
 801213c:	08019870 	.word	0x08019870
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	7d1b      	ldrb	r3, [r3, #20]
 801214c:	2b02      	cmp	r3, #2
 801214e:	d006      	beq.n	801215e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	8b5b      	ldrh	r3, [r3, #26]
 8012154:	f023 0303 	bic.w	r3, r3, #3
 8012158:	b29a      	uxth	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	4618      	mov	r0, r3
 8012166:	f7f9 feff 	bl	800bf68 <lwip_htonl>
 801216a:	4604      	mov	r4, r0
 801216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801216e:	891b      	ldrh	r3, [r3, #8]
 8012170:	461d      	mov	r5, r3
 8012172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012174:	68db      	ldr	r3, [r3, #12]
 8012176:	899b      	ldrh	r3, [r3, #12]
 8012178:	b29b      	uxth	r3, r3
 801217a:	4618      	mov	r0, r3
 801217c:	f7f9 fede 	bl	800bf3c <lwip_htons>
 8012180:	4603      	mov	r3, r0
 8012182:	b2db      	uxtb	r3, r3
 8012184:	f003 0303 	and.w	r3, r3, #3
 8012188:	2b00      	cmp	r3, #0
 801218a:	d001      	beq.n	8012190 <tcp_output+0x2a0>
 801218c:	2301      	movs	r3, #1
 801218e:	e000      	b.n	8012192 <tcp_output+0x2a2>
 8012190:	2300      	movs	r3, #0
 8012192:	442b      	add	r3, r5
 8012194:	4423      	add	r3, r4
 8012196:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	da02      	bge.n	80121aa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	68ba      	ldr	r2, [r7, #8]
 80121a8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80121aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ac:	891b      	ldrh	r3, [r3, #8]
 80121ae:	461c      	mov	r4, r3
 80121b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	899b      	ldrh	r3, [r3, #12]
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7f9 febf 	bl	800bf3c <lwip_htons>
 80121be:	4603      	mov	r3, r0
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	f003 0303 	and.w	r3, r3, #3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d001      	beq.n	80121ce <tcp_output+0x2de>
 80121ca:	2301      	movs	r3, #1
 80121cc:	e000      	b.n	80121d0 <tcp_output+0x2e0>
 80121ce:	2300      	movs	r3, #0
 80121d0:	4423      	add	r3, r4
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d049      	beq.n	801226a <tcp_output+0x37a>
      seg->next = NULL;
 80121d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d8:	2200      	movs	r2, #0
 80121da:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d105      	bne.n	80121f0 <tcp_output+0x300>
        pcb->unacked = seg;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121e8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80121ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ec:	623b      	str	r3, [r7, #32]
 80121ee:	e03f      	b.n	8012270 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80121f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7f9 feb6 	bl	800bf68 <lwip_htonl>
 80121fc:	4604      	mov	r4, r0
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	4618      	mov	r0, r3
 8012206:	f7f9 feaf 	bl	800bf68 <lwip_htonl>
 801220a:	4603      	mov	r3, r0
 801220c:	1ae3      	subs	r3, r4, r3
 801220e:	2b00      	cmp	r3, #0
 8012210:	da24      	bge.n	801225c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	3370      	adds	r3, #112	@ 0x70
 8012216:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012218:	e002      	b.n	8012220 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801221a:	69fb      	ldr	r3, [r7, #28]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d011      	beq.n	801224c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	68db      	ldr	r3, [r3, #12]
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	f7f9 fe99 	bl	800bf68 <lwip_htonl>
 8012236:	4604      	mov	r4, r0
 8012238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223a:	68db      	ldr	r3, [r3, #12]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	4618      	mov	r0, r3
 8012240:	f7f9 fe92 	bl	800bf68 <lwip_htonl>
 8012244:	4603      	mov	r3, r0
 8012246:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012248:	2b00      	cmp	r3, #0
 801224a:	dbe6      	blt.n	801221a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012252:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	e009      	b.n	8012270 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801225c:	6a3b      	ldr	r3, [r7, #32]
 801225e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012260:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012262:	6a3b      	ldr	r3, [r7, #32]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	623b      	str	r3, [r7, #32]
 8012268:	e002      	b.n	8012270 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801226a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801226c:	f7fc fc45 	bl	800eafa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012274:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012278:	2b00      	cmp	r3, #0
 801227a:	d012      	beq.n	80122a2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	4618      	mov	r0, r3
 8012284:	f7f9 fe70 	bl	800bf68 <lwip_htonl>
 8012288:	4602      	mov	r2, r0
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801228e:	1ad3      	subs	r3, r2, r3
 8012290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012292:	8912      	ldrh	r2, [r2, #8]
 8012294:	4413      	add	r3, r2
  while (seg != NULL &&
 8012296:	69ba      	ldr	r2, [r7, #24]
 8012298:	429a      	cmp	r2, r3
 801229a:	f4bf aed9 	bcs.w	8012050 <tcp_output+0x160>
 801229e:	e000      	b.n	80122a2 <tcp_output+0x3b2>
      break;
 80122a0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d108      	bne.n	80122bc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2200      	movs	r2, #0
 80122ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80122b2:	e004      	b.n	80122be <tcp_output+0x3ce>
    goto output_done;
 80122b4:	bf00      	nop
 80122b6:	e002      	b.n	80122be <tcp_output+0x3ce>
    goto output_done;
 80122b8:	bf00      	nop
 80122ba:	e000      	b.n	80122be <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80122bc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	8b5b      	ldrh	r3, [r3, #26]
 80122c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3728      	adds	r7, #40	@ 0x28
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bdb0      	pop	{r4, r5, r7, pc}
 80122d6:	bf00      	nop

080122d8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d106      	bne.n	80122f4 <tcp_output_segment_busy+0x1c>
 80122e6:	4b09      	ldr	r3, [pc, #36]	@ (801230c <tcp_output_segment_busy+0x34>)
 80122e8:	f240 529a 	movw	r2, #1434	@ 0x59a
 80122ec:	4908      	ldr	r1, [pc, #32]	@ (8012310 <tcp_output_segment_busy+0x38>)
 80122ee:	4809      	ldr	r0, [pc, #36]	@ (8012314 <tcp_output_segment_busy+0x3c>)
 80122f0:	f004 fd8e 	bl	8016e10 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	7b9b      	ldrb	r3, [r3, #14]
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d001      	beq.n	8012302 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80122fe:	2301      	movs	r3, #1
 8012300:	e000      	b.n	8012304 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012302:	2300      	movs	r3, #0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3708      	adds	r7, #8
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	080192ec 	.word	0x080192ec
 8012310:	08019888 	.word	0x08019888
 8012314:	08019340 	.word	0x08019340

08012318 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012318:	b5b0      	push	{r4, r5, r7, lr}
 801231a:	b08c      	sub	sp, #48	@ 0x30
 801231c:	af04      	add	r7, sp, #16
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <tcp_output_segment+0x20>
 801232a:	4b64      	ldr	r3, [pc, #400]	@ (80124bc <tcp_output_segment+0x1a4>)
 801232c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012330:	4963      	ldr	r1, [pc, #396]	@ (80124c0 <tcp_output_segment+0x1a8>)
 8012332:	4864      	ldr	r0, [pc, #400]	@ (80124c4 <tcp_output_segment+0x1ac>)
 8012334:	f004 fd6c 	bl	8016e10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_output_segment+0x34>
 801233e:	4b5f      	ldr	r3, [pc, #380]	@ (80124bc <tcp_output_segment+0x1a4>)
 8012340:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012344:	4960      	ldr	r1, [pc, #384]	@ (80124c8 <tcp_output_segment+0x1b0>)
 8012346:	485f      	ldr	r0, [pc, #380]	@ (80124c4 <tcp_output_segment+0x1ac>)
 8012348:	f004 fd62 	bl	8016e10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <tcp_output_segment+0x48>
 8012352:	4b5a      	ldr	r3, [pc, #360]	@ (80124bc <tcp_output_segment+0x1a4>)
 8012354:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012358:	495c      	ldr	r1, [pc, #368]	@ (80124cc <tcp_output_segment+0x1b4>)
 801235a:	485a      	ldr	r0, [pc, #360]	@ (80124c4 <tcp_output_segment+0x1ac>)
 801235c:	f004 fd58 	bl	8016e10 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f7ff ffb9 	bl	80122d8 <tcp_output_segment_busy>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d001      	beq.n	8012370 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801236c:	2300      	movs	r3, #0
 801236e:	e0a1      	b.n	80124b4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	68dc      	ldr	r4, [r3, #12]
 8012378:	4610      	mov	r0, r2
 801237a:	f7f9 fdf5 	bl	800bf68 <lwip_htonl>
 801237e:	4603      	mov	r3, r0
 8012380:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	68dc      	ldr	r4, [r3, #12]
 801238a:	4610      	mov	r0, r2
 801238c:	f7f9 fdd6 	bl	800bf3c <lwip_htons>
 8012390:	4603      	mov	r3, r0
 8012392:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012398:	68ba      	ldr	r2, [r7, #8]
 801239a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801239c:	441a      	add	r2, r3
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	68db      	ldr	r3, [r3, #12]
 80123a6:	3314      	adds	r3, #20
 80123a8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	7a9b      	ldrb	r3, [r3, #10]
 80123ae:	f003 0301 	and.w	r3, r3, #1
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d015      	beq.n	80123e2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	3304      	adds	r3, #4
 80123ba:	461a      	mov	r2, r3
 80123bc:	6879      	ldr	r1, [r7, #4]
 80123be:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80123c2:	f7fc fe91 	bl	800f0e8 <tcp_eff_send_mss_netif>
 80123c6:	4603      	mov	r3, r0
 80123c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80123ca:	8b7b      	ldrh	r3, [r7, #26]
 80123cc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7f9 fdc9 	bl	800bf68 <lwip_htonl>
 80123d6:	4602      	mov	r2, r0
 80123d8:	69fb      	ldr	r3, [r7, #28]
 80123da:	601a      	str	r2, [r3, #0]
    opts += 1;
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	3304      	adds	r3, #4
 80123e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	da02      	bge.n	80123f2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	2200      	movs	r2, #0
 80123f0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d10c      	bne.n	8012414 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80123fa:	4b35      	ldr	r3, [pc, #212]	@ (80124d0 <tcp_output_segment+0x1b8>)
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	68db      	ldr	r3, [r3, #12]
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	4618      	mov	r0, r3
 801240a:	f7f9 fdad 	bl	800bf68 <lwip_htonl>
 801240e:	4602      	mov	r2, r0
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	68da      	ldr	r2, [r3, #12]
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	1ad3      	subs	r3, r2, r3
 8012420:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	8959      	ldrh	r1, [r3, #10]
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	8b3a      	ldrh	r2, [r7, #24]
 801242e:	1a8a      	subs	r2, r1, r2
 8012430:	b292      	uxth	r2, r2
 8012432:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	8919      	ldrh	r1, [r3, #8]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	8b3a      	ldrh	r2, [r7, #24]
 8012440:	1a8a      	subs	r2, r1, r2
 8012442:	b292      	uxth	r2, r2
 8012444:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	68d2      	ldr	r2, [r2, #12]
 801244e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	68db      	ldr	r3, [r3, #12]
 8012454:	2200      	movs	r2, #0
 8012456:	741a      	strb	r2, [r3, #16]
 8012458:	2200      	movs	r2, #0
 801245a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	68da      	ldr	r2, [r3, #12]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	7a9b      	ldrb	r3, [r3, #10]
 8012464:	f003 0301 	and.w	r3, r3, #1
 8012468:	2b00      	cmp	r3, #0
 801246a:	d001      	beq.n	8012470 <tcp_output_segment+0x158>
 801246c:	2318      	movs	r3, #24
 801246e:	e000      	b.n	8012472 <tcp_output_segment+0x15a>
 8012470:	2314      	movs	r3, #20
 8012472:	4413      	add	r3, r2
 8012474:	69fa      	ldr	r2, [r7, #28]
 8012476:	429a      	cmp	r2, r3
 8012478:	d006      	beq.n	8012488 <tcp_output_segment+0x170>
 801247a:	4b10      	ldr	r3, [pc, #64]	@ (80124bc <tcp_output_segment+0x1a4>)
 801247c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012480:	4914      	ldr	r1, [pc, #80]	@ (80124d4 <tcp_output_segment+0x1bc>)
 8012482:	4810      	ldr	r0, [pc, #64]	@ (80124c4 <tcp_output_segment+0x1ac>)
 8012484:	f004 fcc4 	bl	8016e10 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	6858      	ldr	r0, [r3, #4]
 801248c:	68b9      	ldr	r1, [r7, #8]
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	1d1c      	adds	r4, r3, #4
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	7add      	ldrb	r5, [r3, #11]
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	7a9b      	ldrb	r3, [r3, #10]
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	9202      	str	r2, [sp, #8]
 801249e:	2206      	movs	r2, #6
 80124a0:	9201      	str	r2, [sp, #4]
 80124a2:	9300      	str	r3, [sp, #0]
 80124a4:	462b      	mov	r3, r5
 80124a6:	4622      	mov	r2, r4
 80124a8:	f002 fd24 	bl	8014ef4 <ip4_output_if>
 80124ac:	4603      	mov	r3, r0
 80124ae:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80124b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bdb0      	pop	{r4, r5, r7, pc}
 80124bc:	080192ec 	.word	0x080192ec
 80124c0:	080198b0 	.word	0x080198b0
 80124c4:	08019340 	.word	0x08019340
 80124c8:	080198d0 	.word	0x080198d0
 80124cc:	080198f0 	.word	0x080198f0
 80124d0:	2000881c 	.word	0x2000881c
 80124d4:	08019914 	.word	0x08019914

080124d8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80124d8:	b5b0      	push	{r4, r5, r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d106      	bne.n	80124f4 <tcp_rexmit_rto_prepare+0x1c>
 80124e6:	4b31      	ldr	r3, [pc, #196]	@ (80125ac <tcp_rexmit_rto_prepare+0xd4>)
 80124e8:	f240 6263 	movw	r2, #1635	@ 0x663
 80124ec:	4930      	ldr	r1, [pc, #192]	@ (80125b0 <tcp_rexmit_rto_prepare+0xd8>)
 80124ee:	4831      	ldr	r0, [pc, #196]	@ (80125b4 <tcp_rexmit_rto_prepare+0xdc>)
 80124f0:	f004 fc8e 	bl	8016e10 <iprintf>

  if (pcb->unacked == NULL) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d102      	bne.n	8012502 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80124fc:	f06f 0305 	mvn.w	r3, #5
 8012500:	e050      	b.n	80125a4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012506:	60fb      	str	r3, [r7, #12]
 8012508:	e00b      	b.n	8012522 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801250a:	68f8      	ldr	r0, [r7, #12]
 801250c:	f7ff fee4 	bl	80122d8 <tcp_output_segment_busy>
 8012510:	4603      	mov	r3, r0
 8012512:	2b00      	cmp	r3, #0
 8012514:	d002      	beq.n	801251c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012516:	f06f 0305 	mvn.w	r3, #5
 801251a:	e043      	b.n	80125a4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	60fb      	str	r3, [r7, #12]
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1ef      	bne.n	801250a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f7ff fed4 	bl	80122d8 <tcp_output_segment_busy>
 8012530:	4603      	mov	r3, r0
 8012532:	2b00      	cmp	r3, #0
 8012534:	d002      	beq.n	801253c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012536:	f06f 0305 	mvn.w	r3, #5
 801253a:	e033      	b.n	80125a4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	8b5b      	ldrh	r3, [r3, #26]
 8012556:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801255a:	b29a      	uxth	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	4618      	mov	r0, r3
 8012568:	f7f9 fcfe 	bl	800bf68 <lwip_htonl>
 801256c:	4604      	mov	r4, r0
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	891b      	ldrh	r3, [r3, #8]
 8012572:	461d      	mov	r5, r3
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	68db      	ldr	r3, [r3, #12]
 8012578:	899b      	ldrh	r3, [r3, #12]
 801257a:	b29b      	uxth	r3, r3
 801257c:	4618      	mov	r0, r3
 801257e:	f7f9 fcdd 	bl	800bf3c <lwip_htons>
 8012582:	4603      	mov	r3, r0
 8012584:	b2db      	uxtb	r3, r3
 8012586:	f003 0303 	and.w	r3, r3, #3
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <tcp_rexmit_rto_prepare+0xba>
 801258e:	2301      	movs	r3, #1
 8012590:	e000      	b.n	8012594 <tcp_rexmit_rto_prepare+0xbc>
 8012592:	2300      	movs	r3, #0
 8012594:	442b      	add	r3, r5
 8012596:	18e2      	adds	r2, r4, r3
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80125a2:	2300      	movs	r3, #0
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3710      	adds	r7, #16
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bdb0      	pop	{r4, r5, r7, pc}
 80125ac:	080192ec 	.word	0x080192ec
 80125b0:	08019928 	.word	0x08019928
 80125b4:	08019340 	.word	0x08019340

080125b8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d106      	bne.n	80125d4 <tcp_rexmit_rto_commit+0x1c>
 80125c6:	4b0d      	ldr	r3, [pc, #52]	@ (80125fc <tcp_rexmit_rto_commit+0x44>)
 80125c8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80125cc:	490c      	ldr	r1, [pc, #48]	@ (8012600 <tcp_rexmit_rto_commit+0x48>)
 80125ce:	480d      	ldr	r0, [pc, #52]	@ (8012604 <tcp_rexmit_rto_commit+0x4c>)
 80125d0:	f004 fc1e 	bl	8016e10 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80125da:	2bff      	cmp	r3, #255	@ 0xff
 80125dc:	d007      	beq.n	80125ee <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80125e4:	3301      	adds	r3, #1
 80125e6:	b2da      	uxtb	r2, r3
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7ff fc7e 	bl	8011ef0 <tcp_output>
}
 80125f4:	bf00      	nop
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	080192ec 	.word	0x080192ec
 8012600:	0801994c 	.word	0x0801994c
 8012604:	08019340 	.word	0x08019340

08012608 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d106      	bne.n	8012624 <tcp_rexmit_rto+0x1c>
 8012616:	4b0a      	ldr	r3, [pc, #40]	@ (8012640 <tcp_rexmit_rto+0x38>)
 8012618:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801261c:	4909      	ldr	r1, [pc, #36]	@ (8012644 <tcp_rexmit_rto+0x3c>)
 801261e:	480a      	ldr	r0, [pc, #40]	@ (8012648 <tcp_rexmit_rto+0x40>)
 8012620:	f004 fbf6 	bl	8016e10 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7ff ff57 	bl	80124d8 <tcp_rexmit_rto_prepare>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d102      	bne.n	8012636 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f7ff ffc1 	bl	80125b8 <tcp_rexmit_rto_commit>
  }
}
 8012636:	bf00      	nop
 8012638:	3708      	adds	r7, #8
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	080192ec 	.word	0x080192ec
 8012644:	08019970 	.word	0x08019970
 8012648:	08019340 	.word	0x08019340

0801264c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801264c:	b590      	push	{r4, r7, lr}
 801264e:	b085      	sub	sp, #20
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <tcp_rexmit+0x1c>
 801265a:	4b2f      	ldr	r3, [pc, #188]	@ (8012718 <tcp_rexmit+0xcc>)
 801265c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012660:	492e      	ldr	r1, [pc, #184]	@ (801271c <tcp_rexmit+0xd0>)
 8012662:	482f      	ldr	r0, [pc, #188]	@ (8012720 <tcp_rexmit+0xd4>)
 8012664:	f004 fbd4 	bl	8016e10 <iprintf>

  if (pcb->unacked == NULL) {
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801266c:	2b00      	cmp	r3, #0
 801266e:	d102      	bne.n	8012676 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012670:	f06f 0305 	mvn.w	r3, #5
 8012674:	e04c      	b.n	8012710 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801267a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801267c:	68b8      	ldr	r0, [r7, #8]
 801267e:	f7ff fe2b 	bl	80122d8 <tcp_output_segment_busy>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d002      	beq.n	801268e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012688:	f06f 0305 	mvn.w	r3, #5
 801268c:	e040      	b.n	8012710 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	336c      	adds	r3, #108	@ 0x6c
 801269a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801269c:	e002      	b.n	80126a4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d011      	beq.n	80126d0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7f9 fc57 	bl	800bf68 <lwip_htonl>
 80126ba:	4604      	mov	r4, r0
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7f9 fc50 	bl	800bf68 <lwip_htonl>
 80126c8:	4603      	mov	r3, r0
 80126ca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	dbe6      	blt.n	801269e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	68ba      	ldr	r2, [r7, #8]
 80126dc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d103      	bne.n	80126ee <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2200      	movs	r2, #0
 80126ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126f4:	2bff      	cmp	r3, #255	@ 0xff
 80126f6:	d007      	beq.n	8012708 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126fe:	3301      	adds	r3, #1
 8012700:	b2da      	uxtb	r2, r3
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3714      	adds	r7, #20
 8012714:	46bd      	mov	sp, r7
 8012716:	bd90      	pop	{r4, r7, pc}
 8012718:	080192ec 	.word	0x080192ec
 801271c:	0801998c 	.word	0x0801998c
 8012720:	08019340 	.word	0x08019340

08012724 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d106      	bne.n	8012740 <tcp_rexmit_fast+0x1c>
 8012732:	4b2a      	ldr	r3, [pc, #168]	@ (80127dc <tcp_rexmit_fast+0xb8>)
 8012734:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012738:	4929      	ldr	r1, [pc, #164]	@ (80127e0 <tcp_rexmit_fast+0xbc>)
 801273a:	482a      	ldr	r0, [pc, #168]	@ (80127e4 <tcp_rexmit_fast+0xc0>)
 801273c:	f004 fb68 	bl	8016e10 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012744:	2b00      	cmp	r3, #0
 8012746:	d045      	beq.n	80127d4 <tcp_rexmit_fast+0xb0>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	8b5b      	ldrh	r3, [r3, #26]
 801274c:	f003 0304 	and.w	r3, r3, #4
 8012750:	2b00      	cmp	r3, #0
 8012752:	d13f      	bne.n	80127d4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f7ff ff79 	bl	801264c <tcp_rexmit>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d139      	bne.n	80127d4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801276c:	4293      	cmp	r3, r2
 801276e:	bf28      	it	cs
 8012770:	4613      	movcs	r3, r2
 8012772:	b29b      	uxth	r3, r3
 8012774:	2b00      	cmp	r3, #0
 8012776:	da00      	bge.n	801277a <tcp_rexmit_fast+0x56>
 8012778:	3301      	adds	r3, #1
 801277a:	105b      	asrs	r3, r3, #1
 801277c:	b29a      	uxth	r2, r3
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801278a:	461a      	mov	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012790:	005b      	lsls	r3, r3, #1
 8012792:	429a      	cmp	r2, r3
 8012794:	d206      	bcs.n	80127a4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801279a:	005b      	lsls	r3, r3, #1
 801279c:	b29a      	uxth	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80127ae:	4619      	mov	r1, r3
 80127b0:	0049      	lsls	r1, r1, #1
 80127b2:	440b      	add	r3, r1
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	4413      	add	r3, r2
 80127b8:	b29a      	uxth	r2, r3
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	8b5b      	ldrh	r3, [r3, #26]
 80127c4:	f043 0304 	orr.w	r3, r3, #4
 80127c8:	b29a      	uxth	r2, r3
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2200      	movs	r2, #0
 80127d2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80127d4:	bf00      	nop
 80127d6:	3708      	adds	r7, #8
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	080192ec 	.word	0x080192ec
 80127e0:	080199a4 	.word	0x080199a4
 80127e4:	08019340 	.word	0x08019340

080127e8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b086      	sub	sp, #24
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	607b      	str	r3, [r7, #4]
 80127f2:	460b      	mov	r3, r1
 80127f4:	817b      	strh	r3, [r7, #10]
 80127f6:	4613      	mov	r3, r2
 80127f8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80127fa:	897a      	ldrh	r2, [r7, #10]
 80127fc:	893b      	ldrh	r3, [r7, #8]
 80127fe:	4413      	add	r3, r2
 8012800:	b29b      	uxth	r3, r3
 8012802:	3314      	adds	r3, #20
 8012804:	b29b      	uxth	r3, r3
 8012806:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801280a:	4619      	mov	r1, r3
 801280c:	2022      	movs	r0, #34	@ 0x22
 801280e:	f7fa fc0b 	bl	800d028 <pbuf_alloc>
 8012812:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d04d      	beq.n	80128b6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801281a:	897b      	ldrh	r3, [r7, #10]
 801281c:	3313      	adds	r3, #19
 801281e:	697a      	ldr	r2, [r7, #20]
 8012820:	8952      	ldrh	r2, [r2, #10]
 8012822:	4293      	cmp	r3, r2
 8012824:	db06      	blt.n	8012834 <tcp_output_alloc_header_common+0x4c>
 8012826:	4b26      	ldr	r3, [pc, #152]	@ (80128c0 <tcp_output_alloc_header_common+0xd8>)
 8012828:	f240 7223 	movw	r2, #1827	@ 0x723
 801282c:	4925      	ldr	r1, [pc, #148]	@ (80128c4 <tcp_output_alloc_header_common+0xdc>)
 801282e:	4826      	ldr	r0, [pc, #152]	@ (80128c8 <tcp_output_alloc_header_common+0xe0>)
 8012830:	f004 faee 	bl	8016e10 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801283a:	8c3b      	ldrh	r3, [r7, #32]
 801283c:	4618      	mov	r0, r3
 801283e:	f7f9 fb7d 	bl	800bf3c <lwip_htons>
 8012842:	4603      	mov	r3, r0
 8012844:	461a      	mov	r2, r3
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801284a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801284c:	4618      	mov	r0, r3
 801284e:	f7f9 fb75 	bl	800bf3c <lwip_htons>
 8012852:	4603      	mov	r3, r0
 8012854:	461a      	mov	r2, r3
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	f7f9 fb81 	bl	800bf68 <lwip_htonl>
 8012866:	4602      	mov	r2, r0
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801286c:	897b      	ldrh	r3, [r7, #10]
 801286e:	089b      	lsrs	r3, r3, #2
 8012870:	b29b      	uxth	r3, r3
 8012872:	3305      	adds	r3, #5
 8012874:	b29b      	uxth	r3, r3
 8012876:	031b      	lsls	r3, r3, #12
 8012878:	b29a      	uxth	r2, r3
 801287a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801287e:	b29b      	uxth	r3, r3
 8012880:	4313      	orrs	r3, r2
 8012882:	b29b      	uxth	r3, r3
 8012884:	4618      	mov	r0, r3
 8012886:	f7f9 fb59 	bl	800bf3c <lwip_htons>
 801288a:	4603      	mov	r3, r0
 801288c:	461a      	mov	r2, r3
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012892:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012894:	4618      	mov	r0, r3
 8012896:	f7f9 fb51 	bl	800bf3c <lwip_htons>
 801289a:	4603      	mov	r3, r0
 801289c:	461a      	mov	r2, r3
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	2200      	movs	r2, #0
 80128a6:	741a      	strb	r2, [r3, #16]
 80128a8:	2200      	movs	r2, #0
 80128aa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80128ac:	693b      	ldr	r3, [r7, #16]
 80128ae:	2200      	movs	r2, #0
 80128b0:	749a      	strb	r2, [r3, #18]
 80128b2:	2200      	movs	r2, #0
 80128b4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80128b6:	697b      	ldr	r3, [r7, #20]
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3718      	adds	r7, #24
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	080192ec 	.word	0x080192ec
 80128c4:	080199c4 	.word	0x080199c4
 80128c8:	08019340 	.word	0x08019340

080128cc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80128cc:	b5b0      	push	{r4, r5, r7, lr}
 80128ce:	b08a      	sub	sp, #40	@ 0x28
 80128d0:	af04      	add	r7, sp, #16
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	607b      	str	r3, [r7, #4]
 80128d6:	460b      	mov	r3, r1
 80128d8:	817b      	strh	r3, [r7, #10]
 80128da:	4613      	mov	r3, r2
 80128dc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d106      	bne.n	80128f2 <tcp_output_alloc_header+0x26>
 80128e4:	4b15      	ldr	r3, [pc, #84]	@ (801293c <tcp_output_alloc_header+0x70>)
 80128e6:	f240 7242 	movw	r2, #1858	@ 0x742
 80128ea:	4915      	ldr	r1, [pc, #84]	@ (8012940 <tcp_output_alloc_header+0x74>)
 80128ec:	4815      	ldr	r0, [pc, #84]	@ (8012944 <tcp_output_alloc_header+0x78>)
 80128ee:	f004 fa8f 	bl	8016e10 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	8adb      	ldrh	r3, [r3, #22]
 80128fa:	68fa      	ldr	r2, [r7, #12]
 80128fc:	8b12      	ldrh	r2, [r2, #24]
 80128fe:	68f9      	ldr	r1, [r7, #12]
 8012900:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012902:	893d      	ldrh	r5, [r7, #8]
 8012904:	897c      	ldrh	r4, [r7, #10]
 8012906:	9103      	str	r1, [sp, #12]
 8012908:	2110      	movs	r1, #16
 801290a:	9102      	str	r1, [sp, #8]
 801290c:	9201      	str	r2, [sp, #4]
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	462a      	mov	r2, r5
 8012914:	4621      	mov	r1, r4
 8012916:	f7ff ff67 	bl	80127e8 <tcp_output_alloc_header_common>
 801291a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d006      	beq.n	8012930 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801292a:	441a      	add	r2, r3
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012930:	697b      	ldr	r3, [r7, #20]
}
 8012932:	4618      	mov	r0, r3
 8012934:	3718      	adds	r7, #24
 8012936:	46bd      	mov	sp, r7
 8012938:	bdb0      	pop	{r4, r5, r7, pc}
 801293a:	bf00      	nop
 801293c:	080192ec 	.word	0x080192ec
 8012940:	080199f4 	.word	0x080199f4
 8012944:	08019340 	.word	0x08019340

08012948 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	4611      	mov	r1, r2
 8012954:	461a      	mov	r2, r3
 8012956:	460b      	mov	r3, r1
 8012958:	71fb      	strb	r3, [r7, #7]
 801295a:	4613      	mov	r3, r2
 801295c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801295e:	2300      	movs	r3, #0
 8012960:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d106      	bne.n	8012976 <tcp_output_fill_options+0x2e>
 8012968:	4b12      	ldr	r3, [pc, #72]	@ (80129b4 <tcp_output_fill_options+0x6c>)
 801296a:	f240 7256 	movw	r2, #1878	@ 0x756
 801296e:	4912      	ldr	r1, [pc, #72]	@ (80129b8 <tcp_output_fill_options+0x70>)
 8012970:	4812      	ldr	r0, [pc, #72]	@ (80129bc <tcp_output_fill_options+0x74>)
 8012972:	f004 fa4d 	bl	8016e10 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801297c:	69bb      	ldr	r3, [r7, #24]
 801297e:	3314      	adds	r3, #20
 8012980:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012982:	8bfb      	ldrh	r3, [r7, #30]
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	461a      	mov	r2, r3
 8012988:	79fb      	ldrb	r3, [r7, #7]
 801298a:	009b      	lsls	r3, r3, #2
 801298c:	f003 0304 	and.w	r3, r3, #4
 8012990:	4413      	add	r3, r2
 8012992:	3314      	adds	r3, #20
 8012994:	69ba      	ldr	r2, [r7, #24]
 8012996:	4413      	add	r3, r2
 8012998:	697a      	ldr	r2, [r7, #20]
 801299a:	429a      	cmp	r2, r3
 801299c:	d006      	beq.n	80129ac <tcp_output_fill_options+0x64>
 801299e:	4b05      	ldr	r3, [pc, #20]	@ (80129b4 <tcp_output_fill_options+0x6c>)
 80129a0:	f240 7275 	movw	r2, #1909	@ 0x775
 80129a4:	4906      	ldr	r1, [pc, #24]	@ (80129c0 <tcp_output_fill_options+0x78>)
 80129a6:	4805      	ldr	r0, [pc, #20]	@ (80129bc <tcp_output_fill_options+0x74>)
 80129a8:	f004 fa32 	bl	8016e10 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80129ac:	bf00      	nop
 80129ae:	3720      	adds	r7, #32
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	080192ec 	.word	0x080192ec
 80129b8:	08019a1c 	.word	0x08019a1c
 80129bc:	08019340 	.word	0x08019340
 80129c0:	08019914 	.word	0x08019914

080129c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b08a      	sub	sp, #40	@ 0x28
 80129c8:	af04      	add	r7, sp, #16
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	607a      	str	r2, [r7, #4]
 80129d0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d106      	bne.n	80129e6 <tcp_output_control_segment+0x22>
 80129d8:	4b1c      	ldr	r3, [pc, #112]	@ (8012a4c <tcp_output_control_segment+0x88>)
 80129da:	f240 7287 	movw	r2, #1927	@ 0x787
 80129de:	491c      	ldr	r1, [pc, #112]	@ (8012a50 <tcp_output_control_segment+0x8c>)
 80129e0:	481c      	ldr	r0, [pc, #112]	@ (8012a54 <tcp_output_control_segment+0x90>)
 80129e2:	f004 fa15 	bl	8016e10 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80129e6:	683a      	ldr	r2, [r7, #0]
 80129e8:	6879      	ldr	r1, [r7, #4]
 80129ea:	68f8      	ldr	r0, [r7, #12]
 80129ec:	f7fe ff42 	bl	8011874 <tcp_route>
 80129f0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d102      	bne.n	80129fe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80129f8:	23fc      	movs	r3, #252	@ 0xfc
 80129fa:	75fb      	strb	r3, [r7, #23]
 80129fc:	e01c      	b.n	8012a38 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d006      	beq.n	8012a12 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	7adb      	ldrb	r3, [r3, #11]
 8012a08:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	7a9b      	ldrb	r3, [r3, #10]
 8012a0e:	757b      	strb	r3, [r7, #21]
 8012a10:	e003      	b.n	8012a1a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012a12:	23ff      	movs	r3, #255	@ 0xff
 8012a14:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012a16:	2300      	movs	r3, #0
 8012a18:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012a1a:	7dba      	ldrb	r2, [r7, #22]
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	9302      	str	r3, [sp, #8]
 8012a20:	2306      	movs	r3, #6
 8012a22:	9301      	str	r3, [sp, #4]
 8012a24:	7d7b      	ldrb	r3, [r7, #21]
 8012a26:	9300      	str	r3, [sp, #0]
 8012a28:	4613      	mov	r3, r2
 8012a2a:	683a      	ldr	r2, [r7, #0]
 8012a2c:	6879      	ldr	r1, [r7, #4]
 8012a2e:	68b8      	ldr	r0, [r7, #8]
 8012a30:	f002 fa60 	bl	8014ef4 <ip4_output_if>
 8012a34:	4603      	mov	r3, r0
 8012a36:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012a38:	68b8      	ldr	r0, [r7, #8]
 8012a3a:	f7fa fdd9 	bl	800d5f0 <pbuf_free>
  return err;
 8012a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3718      	adds	r7, #24
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	080192ec 	.word	0x080192ec
 8012a50:	08019a44 	.word	0x08019a44
 8012a54:	08019340 	.word	0x08019340

08012a58 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012a58:	b590      	push	{r4, r7, lr}
 8012a5a:	b08b      	sub	sp, #44	@ 0x2c
 8012a5c:	af04      	add	r7, sp, #16
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	607a      	str	r2, [r7, #4]
 8012a64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d106      	bne.n	8012a7a <tcp_rst+0x22>
 8012a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8012aec <tcp_rst+0x94>)
 8012a6e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012a72:	491f      	ldr	r1, [pc, #124]	@ (8012af0 <tcp_rst+0x98>)
 8012a74:	481f      	ldr	r0, [pc, #124]	@ (8012af4 <tcp_rst+0x9c>)
 8012a76:	f004 f9cb 	bl	8016e10 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d106      	bne.n	8012a8e <tcp_rst+0x36>
 8012a80:	4b1a      	ldr	r3, [pc, #104]	@ (8012aec <tcp_rst+0x94>)
 8012a82:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012a86:	491c      	ldr	r1, [pc, #112]	@ (8012af8 <tcp_rst+0xa0>)
 8012a88:	481a      	ldr	r0, [pc, #104]	@ (8012af4 <tcp_rst+0x9c>)
 8012a8a:	f004 f9c1 	bl	8016e10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a8e:	2300      	movs	r3, #0
 8012a90:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012a92:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012a96:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012a98:	7dfb      	ldrb	r3, [r7, #23]
 8012a9a:	b29c      	uxth	r4, r3
 8012a9c:	68b8      	ldr	r0, [r7, #8]
 8012a9e:	f7f9 fa63 	bl	800bf68 <lwip_htonl>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	8abb      	ldrh	r3, [r7, #20]
 8012aa6:	9303      	str	r3, [sp, #12]
 8012aa8:	2314      	movs	r3, #20
 8012aaa:	9302      	str	r3, [sp, #8]
 8012aac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012aae:	9301      	str	r3, [sp, #4]
 8012ab0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012ab2:	9300      	str	r3, [sp, #0]
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	4621      	mov	r1, r4
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7ff fe94 	bl	80127e8 <tcp_output_alloc_header_common>
 8012ac0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d00c      	beq.n	8012ae2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ac8:	7dfb      	ldrb	r3, [r7, #23]
 8012aca:	2200      	movs	r2, #0
 8012acc:	6939      	ldr	r1, [r7, #16]
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	f7ff ff3a 	bl	8012948 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ad6:	683a      	ldr	r2, [r7, #0]
 8012ad8:	6939      	ldr	r1, [r7, #16]
 8012ada:	68f8      	ldr	r0, [r7, #12]
 8012adc:	f7ff ff72 	bl	80129c4 <tcp_output_control_segment>
 8012ae0:	e000      	b.n	8012ae4 <tcp_rst+0x8c>
    return;
 8012ae2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012ae4:	371c      	adds	r7, #28
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd90      	pop	{r4, r7, pc}
 8012aea:	bf00      	nop
 8012aec:	080192ec 	.word	0x080192ec
 8012af0:	08019a70 	.word	0x08019a70
 8012af4:	08019340 	.word	0x08019340
 8012af8:	08019a8c 	.word	0x08019a8c

08012afc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012afc:	b590      	push	{r4, r7, lr}
 8012afe:	b087      	sub	sp, #28
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012b04:	2300      	movs	r3, #0
 8012b06:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d106      	bne.n	8012b20 <tcp_send_empty_ack+0x24>
 8012b12:	4b28      	ldr	r3, [pc, #160]	@ (8012bb4 <tcp_send_empty_ack+0xb8>)
 8012b14:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012b18:	4927      	ldr	r1, [pc, #156]	@ (8012bb8 <tcp_send_empty_ack+0xbc>)
 8012b1a:	4828      	ldr	r0, [pc, #160]	@ (8012bbc <tcp_send_empty_ack+0xc0>)
 8012b1c:	f004 f978 	bl	8016e10 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012b20:	7dfb      	ldrb	r3, [r7, #23]
 8012b22:	009b      	lsls	r3, r3, #2
 8012b24:	b2db      	uxtb	r3, r3
 8012b26:	f003 0304 	and.w	r3, r3, #4
 8012b2a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012b2c:	7d7b      	ldrb	r3, [r7, #21]
 8012b2e:	b29c      	uxth	r4, r3
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7f9 fa17 	bl	800bf68 <lwip_htonl>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	4621      	mov	r1, r4
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f7ff fec3 	bl	80128cc <tcp_output_alloc_header>
 8012b46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d109      	bne.n	8012b62 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	8b5b      	ldrh	r3, [r3, #26]
 8012b52:	f043 0303 	orr.w	r3, r3, #3
 8012b56:	b29a      	uxth	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012b5c:	f06f 0301 	mvn.w	r3, #1
 8012b60:	e023      	b.n	8012baa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012b62:	7dbb      	ldrb	r3, [r7, #22]
 8012b64:	7dfa      	ldrb	r2, [r7, #23]
 8012b66:	6939      	ldr	r1, [r7, #16]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff feed 	bl	8012948 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	3304      	adds	r3, #4
 8012b74:	6939      	ldr	r1, [r7, #16]
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7ff ff24 	bl	80129c4 <tcp_output_control_segment>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d007      	beq.n	8012b98 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	8b5b      	ldrh	r3, [r3, #26]
 8012b8c:	f043 0303 	orr.w	r3, r3, #3
 8012b90:	b29a      	uxth	r2, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	835a      	strh	r2, [r3, #26]
 8012b96:	e006      	b.n	8012ba6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	8b5b      	ldrh	r3, [r3, #26]
 8012b9c:	f023 0303 	bic.w	r3, r3, #3
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	371c      	adds	r7, #28
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd90      	pop	{r4, r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	080192ec 	.word	0x080192ec
 8012bb8:	08019aa8 	.word	0x08019aa8
 8012bbc:	08019340 	.word	0x08019340

08012bc0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012bc0:	b590      	push	{r4, r7, lr}
 8012bc2:	b087      	sub	sp, #28
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012bc8:	2300      	movs	r3, #0
 8012bca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d106      	bne.n	8012be0 <tcp_keepalive+0x20>
 8012bd2:	4b18      	ldr	r3, [pc, #96]	@ (8012c34 <tcp_keepalive+0x74>)
 8012bd4:	f640 0224 	movw	r2, #2084	@ 0x824
 8012bd8:	4917      	ldr	r1, [pc, #92]	@ (8012c38 <tcp_keepalive+0x78>)
 8012bda:	4818      	ldr	r0, [pc, #96]	@ (8012c3c <tcp_keepalive+0x7c>)
 8012bdc:	f004 f918 	bl	8016e10 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012be0:	7dfb      	ldrb	r3, [r7, #23]
 8012be2:	b29c      	uxth	r4, r3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012be8:	3b01      	subs	r3, #1
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7f9 f9bc 	bl	800bf68 <lwip_htonl>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	4621      	mov	r1, r4
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f7ff fe68 	bl	80128cc <tcp_output_alloc_header>
 8012bfc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d102      	bne.n	8012c0a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012c04:	f04f 33ff 	mov.w	r3, #4294967295
 8012c08:	e010      	b.n	8012c2c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c0a:	7dfb      	ldrb	r3, [r7, #23]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	6939      	ldr	r1, [r7, #16]
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f7ff fe99 	bl	8012948 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	3304      	adds	r3, #4
 8012c1c:	6939      	ldr	r1, [r7, #16]
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f7ff fed0 	bl	80129c4 <tcp_output_control_segment>
 8012c24:	4603      	mov	r3, r0
 8012c26:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	371c      	adds	r7, #28
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd90      	pop	{r4, r7, pc}
 8012c34:	080192ec 	.word	0x080192ec
 8012c38:	08019ac8 	.word	0x08019ac8
 8012c3c:	08019340 	.word	0x08019340

08012c40 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012c40:	b590      	push	{r4, r7, lr}
 8012c42:	b08b      	sub	sp, #44	@ 0x2c
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c48:	2300      	movs	r3, #0
 8012c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d106      	bne.n	8012c62 <tcp_zero_window_probe+0x22>
 8012c54:	4b4c      	ldr	r3, [pc, #304]	@ (8012d88 <tcp_zero_window_probe+0x148>)
 8012c56:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012c5a:	494c      	ldr	r1, [pc, #304]	@ (8012d8c <tcp_zero_window_probe+0x14c>)
 8012c5c:	484c      	ldr	r0, [pc, #304]	@ (8012d90 <tcp_zero_window_probe+0x150>)
 8012c5e:	f004 f8d7 	bl	8016e10 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c66:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012c68:	6a3b      	ldr	r3, [r7, #32]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d101      	bne.n	8012c72 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	e086      	b.n	8012d80 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012c78:	2bff      	cmp	r3, #255	@ 0xff
 8012c7a:	d007      	beq.n	8012c8c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012c82:	3301      	adds	r3, #1
 8012c84:	b2da      	uxtb	r2, r3
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012c8c:	6a3b      	ldr	r3, [r7, #32]
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	899b      	ldrh	r3, [r3, #12]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7f9 f951 	bl	800bf3c <lwip_htons>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	b2db      	uxtb	r3, r3
 8012c9e:	f003 0301 	and.w	r3, r3, #1
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d005      	beq.n	8012cb2 <tcp_zero_window_probe+0x72>
 8012ca6:	6a3b      	ldr	r3, [r7, #32]
 8012ca8:	891b      	ldrh	r3, [r3, #8]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d101      	bne.n	8012cb2 <tcp_zero_window_probe+0x72>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	e000      	b.n	8012cb4 <tcp_zero_window_probe+0x74>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012cb6:	7ffb      	ldrb	r3, [r7, #31]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	bf0c      	ite	eq
 8012cbc:	2301      	moveq	r3, #1
 8012cbe:	2300      	movne	r3, #0
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cc8:	b299      	uxth	r1, r3
 8012cca:	6a3b      	ldr	r3, [r7, #32]
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	8bba      	ldrh	r2, [r7, #28]
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7ff fdfa 	bl	80128cc <tcp_output_alloc_header>
 8012cd8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012cda:	69bb      	ldr	r3, [r7, #24]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d102      	bne.n	8012ce6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ce4:	e04c      	b.n	8012d80 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012ce6:	69bb      	ldr	r3, [r7, #24]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012cec:	7ffb      	ldrb	r3, [r7, #31]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d011      	beq.n	8012d16 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	899b      	ldrh	r3, [r3, #12]
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	b21b      	sxth	r3, r3
 8012cfa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012cfe:	b21c      	sxth	r4, r3
 8012d00:	2011      	movs	r0, #17
 8012d02:	f7f9 f91b 	bl	800bf3c <lwip_htons>
 8012d06:	4603      	mov	r3, r0
 8012d08:	b21b      	sxth	r3, r3
 8012d0a:	4323      	orrs	r3, r4
 8012d0c:	b21b      	sxth	r3, r3
 8012d0e:	b29a      	uxth	r2, r3
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	819a      	strh	r2, [r3, #12]
 8012d14:	e010      	b.n	8012d38 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	3314      	adds	r3, #20
 8012d1c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012d1e:	6a3b      	ldr	r3, [r7, #32]
 8012d20:	6858      	ldr	r0, [r3, #4]
 8012d22:	6a3b      	ldr	r3, [r7, #32]
 8012d24:	685b      	ldr	r3, [r3, #4]
 8012d26:	891a      	ldrh	r2, [r3, #8]
 8012d28:	6a3b      	ldr	r3, [r7, #32]
 8012d2a:	891b      	ldrh	r3, [r3, #8]
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	b29b      	uxth	r3, r3
 8012d30:	2201      	movs	r2, #1
 8012d32:	6939      	ldr	r1, [r7, #16]
 8012d34:	f7fa fe56 	bl	800d9e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012d38:	6a3b      	ldr	r3, [r7, #32]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7f9 f912 	bl	800bf68 <lwip_htonl>
 8012d44:	4603      	mov	r3, r0
 8012d46:	3301      	adds	r3, #1
 8012d48:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	1ad3      	subs	r3, r2, r3
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	da02      	bge.n	8012d5c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d60:	2200      	movs	r2, #0
 8012d62:	69b9      	ldr	r1, [r7, #24]
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7ff fdef 	bl	8012948 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3304      	adds	r3, #4
 8012d70:	69b9      	ldr	r1, [r7, #24]
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f7ff fe26 	bl	80129c4 <tcp_output_control_segment>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	372c      	adds	r7, #44	@ 0x2c
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd90      	pop	{r4, r7, pc}
 8012d88:	080192ec 	.word	0x080192ec
 8012d8c:	08019ae4 	.word	0x08019ae4
 8012d90:	08019340 	.word	0x08019340

08012d94 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012d9c:	f7fa ff10 	bl	800dbc0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012da0:	4b0a      	ldr	r3, [pc, #40]	@ (8012dcc <tcpip_tcp_timer+0x38>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d103      	bne.n	8012db0 <tcpip_tcp_timer+0x1c>
 8012da8:	4b09      	ldr	r3, [pc, #36]	@ (8012dd0 <tcpip_tcp_timer+0x3c>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d005      	beq.n	8012dbc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012db0:	2200      	movs	r2, #0
 8012db2:	4908      	ldr	r1, [pc, #32]	@ (8012dd4 <tcpip_tcp_timer+0x40>)
 8012db4:	20fa      	movs	r0, #250	@ 0xfa
 8012db6:	f000 f8f3 	bl	8012fa0 <sys_timeout>
 8012dba:	e003      	b.n	8012dc4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012dbc:	4b06      	ldr	r3, [pc, #24]	@ (8012dd8 <tcpip_tcp_timer+0x44>)
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	601a      	str	r2, [r3, #0]
  }
}
 8012dc2:	bf00      	nop
 8012dc4:	bf00      	nop
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	20008828 	.word	0x20008828
 8012dd0:	2000882c 	.word	0x2000882c
 8012dd4:	08012d95 	.word	0x08012d95
 8012dd8:	20008874 	.word	0x20008874

08012ddc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012de0:	4b0a      	ldr	r3, [pc, #40]	@ (8012e0c <tcp_timer_needed+0x30>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d10f      	bne.n	8012e08 <tcp_timer_needed+0x2c>
 8012de8:	4b09      	ldr	r3, [pc, #36]	@ (8012e10 <tcp_timer_needed+0x34>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d103      	bne.n	8012df8 <tcp_timer_needed+0x1c>
 8012df0:	4b08      	ldr	r3, [pc, #32]	@ (8012e14 <tcp_timer_needed+0x38>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d007      	beq.n	8012e08 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012df8:	4b04      	ldr	r3, [pc, #16]	@ (8012e0c <tcp_timer_needed+0x30>)
 8012dfa:	2201      	movs	r2, #1
 8012dfc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012dfe:	2200      	movs	r2, #0
 8012e00:	4905      	ldr	r1, [pc, #20]	@ (8012e18 <tcp_timer_needed+0x3c>)
 8012e02:	20fa      	movs	r0, #250	@ 0xfa
 8012e04:	f000 f8cc 	bl	8012fa0 <sys_timeout>
  }
}
 8012e08:	bf00      	nop
 8012e0a:	bd80      	pop	{r7, pc}
 8012e0c:	20008874 	.word	0x20008874
 8012e10:	20008828 	.word	0x20008828
 8012e14:	2000882c 	.word	0x2000882c
 8012e18:	08012d95 	.word	0x08012d95

08012e1c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b086      	sub	sp, #24
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	60f8      	str	r0, [r7, #12]
 8012e24:	60b9      	str	r1, [r7, #8]
 8012e26:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012e28:	2006      	movs	r0, #6
 8012e2a:	f7f9 fcfb 	bl	800c824 <memp_malloc>
 8012e2e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d109      	bne.n	8012e4a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d151      	bne.n	8012ee0 <sys_timeout_abs+0xc4>
 8012e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8012ee8 <sys_timeout_abs+0xcc>)
 8012e3e:	22be      	movs	r2, #190	@ 0xbe
 8012e40:	492a      	ldr	r1, [pc, #168]	@ (8012eec <sys_timeout_abs+0xd0>)
 8012e42:	482b      	ldr	r0, [pc, #172]	@ (8012ef0 <sys_timeout_abs+0xd4>)
 8012e44:	f003 ffe4 	bl	8016e10 <iprintf>
    return;
 8012e48:	e04a      	b.n	8012ee0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	68ba      	ldr	r2, [r7, #8]
 8012e54:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012e62:	4b24      	ldr	r3, [pc, #144]	@ (8012ef4 <sys_timeout_abs+0xd8>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d103      	bne.n	8012e72 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012e6a:	4a22      	ldr	r2, [pc, #136]	@ (8012ef4 <sys_timeout_abs+0xd8>)
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	6013      	str	r3, [r2, #0]
    return;
 8012e70:	e037      	b.n	8012ee2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	685a      	ldr	r2, [r3, #4]
 8012e76:	4b1f      	ldr	r3, [pc, #124]	@ (8012ef4 <sys_timeout_abs+0xd8>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	685b      	ldr	r3, [r3, #4]
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	0fdb      	lsrs	r3, r3, #31
 8012e80:	f003 0301 	and.w	r3, r3, #1
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d007      	beq.n	8012e9a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8012ef4 <sys_timeout_abs+0xd8>)
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012e92:	4a18      	ldr	r2, [pc, #96]	@ (8012ef4 <sys_timeout_abs+0xd8>)
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	6013      	str	r3, [r2, #0]
 8012e98:	e023      	b.n	8012ee2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e9a:	4b16      	ldr	r3, [pc, #88]	@ (8012ef4 <sys_timeout_abs+0xd8>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	617b      	str	r3, [r7, #20]
 8012ea0:	e01a      	b.n	8012ed8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d00b      	beq.n	8012ec2 <sys_timeout_abs+0xa6>
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	685a      	ldr	r2, [r3, #4]
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	1ad3      	subs	r3, r2, r3
 8012eb6:	0fdb      	lsrs	r3, r3, #31
 8012eb8:	f003 0301 	and.w	r3, r3, #1
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d007      	beq.n	8012ed2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	681a      	ldr	r2, [r3, #0]
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	693a      	ldr	r2, [r7, #16]
 8012ece:	601a      	str	r2, [r3, #0]
        break;
 8012ed0:	e007      	b.n	8012ee2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	617b      	str	r3, [r7, #20]
 8012ed8:	697b      	ldr	r3, [r7, #20]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d1e1      	bne.n	8012ea2 <sys_timeout_abs+0x86>
 8012ede:	e000      	b.n	8012ee2 <sys_timeout_abs+0xc6>
    return;
 8012ee0:	bf00      	nop
      }
    }
  }
}
 8012ee2:	3718      	adds	r7, #24
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	08019b08 	.word	0x08019b08
 8012eec:	08019b3c 	.word	0x08019b3c
 8012ef0:	08019b7c 	.word	0x08019b7c
 8012ef4:	2000886c 	.word	0x2000886c

08012ef8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b086      	sub	sp, #24
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	4798      	blx	r3

  now = sys_now();
 8012f0a:	f7f8 fe03 	bl	800bb14 <sys_now>
 8012f0e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	4b0f      	ldr	r3, [pc, #60]	@ (8012f54 <lwip_cyclic_timer+0x5c>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	4413      	add	r3, r2
 8012f1a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012f1c:	68fa      	ldr	r2, [r7, #12]
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	1ad3      	subs	r3, r2, r3
 8012f22:	0fdb      	lsrs	r3, r3, #31
 8012f24:	f003 0301 	and.w	r3, r3, #1
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d009      	beq.n	8012f42 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	4413      	add	r3, r2
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	4907      	ldr	r1, [pc, #28]	@ (8012f58 <lwip_cyclic_timer+0x60>)
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7ff ff6e 	bl	8012e1c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012f40:	e004      	b.n	8012f4c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	4904      	ldr	r1, [pc, #16]	@ (8012f58 <lwip_cyclic_timer+0x60>)
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f7ff ff68 	bl	8012e1c <sys_timeout_abs>
}
 8012f4c:	bf00      	nop
 8012f4e:	3718      	adds	r7, #24
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	20008870 	.word	0x20008870
 8012f58:	08012ef9 	.word	0x08012ef9

08012f5c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f62:	2301      	movs	r3, #1
 8012f64:	607b      	str	r3, [r7, #4]
 8012f66:	e00e      	b.n	8012f86 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012f68:	4a0b      	ldr	r2, [pc, #44]	@ (8012f98 <sys_timeouts_init+0x3c>)
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	00db      	lsls	r3, r3, #3
 8012f74:	4a08      	ldr	r2, [pc, #32]	@ (8012f98 <sys_timeouts_init+0x3c>)
 8012f76:	4413      	add	r3, r2
 8012f78:	461a      	mov	r2, r3
 8012f7a:	4908      	ldr	r1, [pc, #32]	@ (8012f9c <sys_timeouts_init+0x40>)
 8012f7c:	f000 f810 	bl	8012fa0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	3301      	adds	r3, #1
 8012f84:	607b      	str	r3, [r7, #4]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b02      	cmp	r3, #2
 8012f8a:	d9ed      	bls.n	8012f68 <sys_timeouts_init+0xc>
  }
}
 8012f8c:	bf00      	nop
 8012f8e:	bf00      	nop
 8012f90:	3708      	adds	r7, #8
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	0801a6fc 	.word	0x0801a6fc
 8012f9c:	08012ef9 	.word	0x08012ef9

08012fa0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b086      	sub	sp, #24
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012fb2:	d306      	bcc.n	8012fc2 <sys_timeout+0x22>
 8012fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8012fe0 <sys_timeout+0x40>)
 8012fb6:	f240 1229 	movw	r2, #297	@ 0x129
 8012fba:	490a      	ldr	r1, [pc, #40]	@ (8012fe4 <sys_timeout+0x44>)
 8012fbc:	480a      	ldr	r0, [pc, #40]	@ (8012fe8 <sys_timeout+0x48>)
 8012fbe:	f003 ff27 	bl	8016e10 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012fc2:	f7f8 fda7 	bl	800bb14 <sys_now>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	4413      	add	r3, r2
 8012fcc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	68b9      	ldr	r1, [r7, #8]
 8012fd2:	6978      	ldr	r0, [r7, #20]
 8012fd4:	f7ff ff22 	bl	8012e1c <sys_timeout_abs>
#endif
}
 8012fd8:	bf00      	nop
 8012fda:	3718      	adds	r7, #24
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	08019b08 	.word	0x08019b08
 8012fe4:	08019ba4 	.word	0x08019ba4
 8012fe8:	08019b7c 	.word	0x08019b7c

08012fec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b084      	sub	sp, #16
 8012ff0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012ff2:	f7f8 fd8f 	bl	800bb14 <sys_now>
 8012ff6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8013064 <sys_check_timeouts+0x78>)
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	b2db      	uxtb	r3, r3
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d001      	beq.n	8013006 <sys_check_timeouts+0x1a>
 8013002:	f7f9 ffbb 	bl	800cf7c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013006:	4b18      	ldr	r3, [pc, #96]	@ (8013068 <sys_check_timeouts+0x7c>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d022      	beq.n	8013058 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	68fa      	ldr	r2, [r7, #12]
 8013018:	1ad3      	subs	r3, r2, r3
 801301a:	0fdb      	lsrs	r3, r3, #31
 801301c:	f003 0301 	and.w	r3, r3, #1
 8013020:	b2db      	uxtb	r3, r3
 8013022:	2b00      	cmp	r3, #0
 8013024:	d11a      	bne.n	801305c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	4a0f      	ldr	r2, [pc, #60]	@ (8013068 <sys_check_timeouts+0x7c>)
 801302c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	689b      	ldr	r3, [r3, #8]
 8013032:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	68db      	ldr	r3, [r3, #12]
 8013038:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	4a0b      	ldr	r2, [pc, #44]	@ (801306c <sys_check_timeouts+0x80>)
 8013040:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013042:	68b9      	ldr	r1, [r7, #8]
 8013044:	2006      	movs	r0, #6
 8013046:	f7f9 fc5d 	bl	800c904 <memp_free>
    if (handler != NULL) {
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d0d3      	beq.n	8012ff8 <sys_check_timeouts+0xc>
      handler(arg);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6838      	ldr	r0, [r7, #0]
 8013054:	4798      	blx	r3
  do {
 8013056:	e7cf      	b.n	8012ff8 <sys_check_timeouts+0xc>
      return;
 8013058:	bf00      	nop
 801305a:	e000      	b.n	801305e <sys_check_timeouts+0x72>
      return;
 801305c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801305e:	3710      	adds	r7, #16
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	20008819 	.word	0x20008819
 8013068:	2000886c 	.word	0x2000886c
 801306c:	20008870 	.word	0x20008870

08013070 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013074:	f003 fdcc 	bl	8016c10 <rand>
 8013078:	4603      	mov	r3, r0
 801307a:	b29b      	uxth	r3, r3
 801307c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013080:	b29b      	uxth	r3, r3
 8013082:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013086:	b29a      	uxth	r2, r3
 8013088:	4b01      	ldr	r3, [pc, #4]	@ (8013090 <udp_init+0x20>)
 801308a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801308c:	bf00      	nop
 801308e:	bd80      	pop	{r7, pc}
 8013090:	20000028 	.word	0x20000028

08013094 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801309a:	2300      	movs	r3, #0
 801309c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801309e:	4b17      	ldr	r3, [pc, #92]	@ (80130fc <udp_new_port+0x68>)
 80130a0:	881b      	ldrh	r3, [r3, #0]
 80130a2:	1c5a      	adds	r2, r3, #1
 80130a4:	b291      	uxth	r1, r2
 80130a6:	4a15      	ldr	r2, [pc, #84]	@ (80130fc <udp_new_port+0x68>)
 80130a8:	8011      	strh	r1, [r2, #0]
 80130aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d103      	bne.n	80130ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80130b2:	4b12      	ldr	r3, [pc, #72]	@ (80130fc <udp_new_port+0x68>)
 80130b4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80130b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130ba:	4b11      	ldr	r3, [pc, #68]	@ (8013100 <udp_new_port+0x6c>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	603b      	str	r3, [r7, #0]
 80130c0:	e011      	b.n	80130e6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	8a5a      	ldrh	r2, [r3, #18]
 80130c6:	4b0d      	ldr	r3, [pc, #52]	@ (80130fc <udp_new_port+0x68>)
 80130c8:	881b      	ldrh	r3, [r3, #0]
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d108      	bne.n	80130e0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80130ce:	88fb      	ldrh	r3, [r7, #6]
 80130d0:	3301      	adds	r3, #1
 80130d2:	80fb      	strh	r3, [r7, #6]
 80130d4:	88fb      	ldrh	r3, [r7, #6]
 80130d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80130da:	d3e0      	bcc.n	801309e <udp_new_port+0xa>
        return 0;
 80130dc:	2300      	movs	r3, #0
 80130de:	e007      	b.n	80130f0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	68db      	ldr	r3, [r3, #12]
 80130e4:	603b      	str	r3, [r7, #0]
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d1ea      	bne.n	80130c2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80130ec:	4b03      	ldr	r3, [pc, #12]	@ (80130fc <udp_new_port+0x68>)
 80130ee:	881b      	ldrh	r3, [r3, #0]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	370c      	adds	r7, #12
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr
 80130fc:	20000028 	.word	0x20000028
 8013100:	20008878 	.word	0x20008878

08013104 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	60b9      	str	r1, [r7, #8]
 801310e:	4613      	mov	r3, r2
 8013110:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d105      	bne.n	8013124 <udp_input_local_match+0x20>
 8013118:	4b27      	ldr	r3, [pc, #156]	@ (80131b8 <udp_input_local_match+0xb4>)
 801311a:	2287      	movs	r2, #135	@ 0x87
 801311c:	4927      	ldr	r1, [pc, #156]	@ (80131bc <udp_input_local_match+0xb8>)
 801311e:	4828      	ldr	r0, [pc, #160]	@ (80131c0 <udp_input_local_match+0xbc>)
 8013120:	f003 fe76 	bl	8016e10 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d105      	bne.n	8013136 <udp_input_local_match+0x32>
 801312a:	4b23      	ldr	r3, [pc, #140]	@ (80131b8 <udp_input_local_match+0xb4>)
 801312c:	2288      	movs	r2, #136	@ 0x88
 801312e:	4925      	ldr	r1, [pc, #148]	@ (80131c4 <udp_input_local_match+0xc0>)
 8013130:	4823      	ldr	r0, [pc, #140]	@ (80131c0 <udp_input_local_match+0xbc>)
 8013132:	f003 fe6d 	bl	8016e10 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	7a1b      	ldrb	r3, [r3, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00b      	beq.n	8013156 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	7a1a      	ldrb	r2, [r3, #8]
 8013142:	4b21      	ldr	r3, [pc, #132]	@ (80131c8 <udp_input_local_match+0xc4>)
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801314a:	3301      	adds	r3, #1
 801314c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801314e:	429a      	cmp	r2, r3
 8013150:	d001      	beq.n	8013156 <udp_input_local_match+0x52>
    return 0;
 8013152:	2300      	movs	r3, #0
 8013154:	e02b      	b.n	80131ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013156:	79fb      	ldrb	r3, [r7, #7]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d018      	beq.n	801318e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d013      	beq.n	801318a <udp_input_local_match+0x86>
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d00f      	beq.n	801318a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801316a:	4b17      	ldr	r3, [pc, #92]	@ (80131c8 <udp_input_local_match+0xc4>)
 801316c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013172:	d00a      	beq.n	801318a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681a      	ldr	r2, [r3, #0]
 8013178:	4b13      	ldr	r3, [pc, #76]	@ (80131c8 <udp_input_local_match+0xc4>)
 801317a:	695b      	ldr	r3, [r3, #20]
 801317c:	405a      	eors	r2, r3
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	3308      	adds	r3, #8
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013186:	2b00      	cmp	r3, #0
 8013188:	d110      	bne.n	80131ac <udp_input_local_match+0xa8>
          return 1;
 801318a:	2301      	movs	r3, #1
 801318c:	e00f      	b.n	80131ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d009      	beq.n	80131a8 <udp_input_local_match+0xa4>
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d005      	beq.n	80131a8 <udp_input_local_match+0xa4>
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	681a      	ldr	r2, [r3, #0]
 80131a0:	4b09      	ldr	r3, [pc, #36]	@ (80131c8 <udp_input_local_match+0xc4>)
 80131a2:	695b      	ldr	r3, [r3, #20]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d101      	bne.n	80131ac <udp_input_local_match+0xa8>
        return 1;
 80131a8:	2301      	movs	r3, #1
 80131aa:	e000      	b.n	80131ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80131ac:	2300      	movs	r3, #0
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3710      	adds	r7, #16
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	08019bf0 	.word	0x08019bf0
 80131bc:	08019c20 	.word	0x08019c20
 80131c0:	08019c44 	.word	0x08019c44
 80131c4:	08019c6c 	.word	0x08019c6c
 80131c8:	20005900 	.word	0x20005900

080131cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80131cc:	b590      	push	{r4, r7, lr}
 80131ce:	b08d      	sub	sp, #52	@ 0x34
 80131d0:	af02      	add	r7, sp, #8
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80131d6:	2300      	movs	r3, #0
 80131d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d105      	bne.n	80131ec <udp_input+0x20>
 80131e0:	4b7c      	ldr	r3, [pc, #496]	@ (80133d4 <udp_input+0x208>)
 80131e2:	22cf      	movs	r2, #207	@ 0xcf
 80131e4:	497c      	ldr	r1, [pc, #496]	@ (80133d8 <udp_input+0x20c>)
 80131e6:	487d      	ldr	r0, [pc, #500]	@ (80133dc <udp_input+0x210>)
 80131e8:	f003 fe12 	bl	8016e10 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d105      	bne.n	80131fe <udp_input+0x32>
 80131f2:	4b78      	ldr	r3, [pc, #480]	@ (80133d4 <udp_input+0x208>)
 80131f4:	22d0      	movs	r2, #208	@ 0xd0
 80131f6:	497a      	ldr	r1, [pc, #488]	@ (80133e0 <udp_input+0x214>)
 80131f8:	4878      	ldr	r0, [pc, #480]	@ (80133dc <udp_input+0x210>)
 80131fa:	f003 fe09 	bl	8016e10 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	895b      	ldrh	r3, [r3, #10]
 8013202:	2b07      	cmp	r3, #7
 8013204:	d803      	bhi.n	801320e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7fa f9f2 	bl	800d5f0 <pbuf_free>
    goto end;
 801320c:	e0de      	b.n	80133cc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013214:	4b73      	ldr	r3, [pc, #460]	@ (80133e4 <udp_input+0x218>)
 8013216:	695b      	ldr	r3, [r3, #20]
 8013218:	4a72      	ldr	r2, [pc, #456]	@ (80133e4 <udp_input+0x218>)
 801321a:	6812      	ldr	r2, [r2, #0]
 801321c:	4611      	mov	r1, r2
 801321e:	4618      	mov	r0, r3
 8013220:	f001 ff40 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 8013224:	4603      	mov	r3, r0
 8013226:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	881b      	ldrh	r3, [r3, #0]
 801322c:	b29b      	uxth	r3, r3
 801322e:	4618      	mov	r0, r3
 8013230:	f7f8 fe84 	bl	800bf3c <lwip_htons>
 8013234:	4603      	mov	r3, r0
 8013236:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	885b      	ldrh	r3, [r3, #2]
 801323c:	b29b      	uxth	r3, r3
 801323e:	4618      	mov	r0, r3
 8013240:	f7f8 fe7c 	bl	800bf3c <lwip_htons>
 8013244:	4603      	mov	r3, r0
 8013246:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013248:	2300      	movs	r3, #0
 801324a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801324c:	2300      	movs	r3, #0
 801324e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013250:	2300      	movs	r3, #0
 8013252:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013254:	4b64      	ldr	r3, [pc, #400]	@ (80133e8 <udp_input+0x21c>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	627b      	str	r3, [r7, #36]	@ 0x24
 801325a:	e054      	b.n	8013306 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801325e:	8a5b      	ldrh	r3, [r3, #18]
 8013260:	89fa      	ldrh	r2, [r7, #14]
 8013262:	429a      	cmp	r2, r3
 8013264:	d14a      	bne.n	80132fc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013266:	7cfb      	ldrb	r3, [r7, #19]
 8013268:	461a      	mov	r2, r3
 801326a:	6839      	ldr	r1, [r7, #0]
 801326c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801326e:	f7ff ff49 	bl	8013104 <udp_input_local_match>
 8013272:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013274:	2b00      	cmp	r3, #0
 8013276:	d041      	beq.n	80132fc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801327a:	7c1b      	ldrb	r3, [r3, #16]
 801327c:	f003 0304 	and.w	r3, r3, #4
 8013280:	2b00      	cmp	r3, #0
 8013282:	d11d      	bne.n	80132c0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d102      	bne.n	8013290 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801328c:	61fb      	str	r3, [r7, #28]
 801328e:	e017      	b.n	80132c0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013290:	7cfb      	ldrb	r3, [r7, #19]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d014      	beq.n	80132c0 <udp_input+0xf4>
 8013296:	4b53      	ldr	r3, [pc, #332]	@ (80133e4 <udp_input+0x218>)
 8013298:	695b      	ldr	r3, [r3, #20]
 801329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801329e:	d10f      	bne.n	80132c0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	681a      	ldr	r2, [r3, #0]
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	3304      	adds	r3, #4
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d008      	beq.n	80132c0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80132ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	3304      	adds	r3, #4
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d101      	bne.n	80132c0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80132bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132be:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80132c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132c2:	8a9b      	ldrh	r3, [r3, #20]
 80132c4:	8a3a      	ldrh	r2, [r7, #16]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d118      	bne.n	80132fc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80132ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132cc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d005      	beq.n	80132de <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80132d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132d4:	685a      	ldr	r2, [r3, #4]
 80132d6:	4b43      	ldr	r3, [pc, #268]	@ (80133e4 <udp_input+0x218>)
 80132d8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80132da:	429a      	cmp	r2, r3
 80132dc:	d10e      	bne.n	80132fc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80132de:	6a3b      	ldr	r3, [r7, #32]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d014      	beq.n	801330e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80132e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132e6:	68da      	ldr	r2, [r3, #12]
 80132e8:	6a3b      	ldr	r3, [r7, #32]
 80132ea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80132ec:	4b3e      	ldr	r3, [pc, #248]	@ (80133e8 <udp_input+0x21c>)
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80132f4:	4a3c      	ldr	r2, [pc, #240]	@ (80133e8 <udp_input+0x21c>)
 80132f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80132fa:	e008      	b.n	801330e <udp_input+0x142>
      }
    }

    prev = pcb;
 80132fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132fe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013302:	68db      	ldr	r3, [r3, #12]
 8013304:	627b      	str	r3, [r7, #36]	@ 0x24
 8013306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013308:	2b00      	cmp	r3, #0
 801330a:	d1a7      	bne.n	801325c <udp_input+0x90>
 801330c:	e000      	b.n	8013310 <udp_input+0x144>
        break;
 801330e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013312:	2b00      	cmp	r3, #0
 8013314:	d101      	bne.n	801331a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801331c:	2b00      	cmp	r3, #0
 801331e:	d002      	beq.n	8013326 <udp_input+0x15a>
    for_us = 1;
 8013320:	2301      	movs	r3, #1
 8013322:	76fb      	strb	r3, [r7, #27]
 8013324:	e00a      	b.n	801333c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	3304      	adds	r3, #4
 801332a:	681a      	ldr	r2, [r3, #0]
 801332c:	4b2d      	ldr	r3, [pc, #180]	@ (80133e4 <udp_input+0x218>)
 801332e:	695b      	ldr	r3, [r3, #20]
 8013330:	429a      	cmp	r2, r3
 8013332:	bf0c      	ite	eq
 8013334:	2301      	moveq	r3, #1
 8013336:	2300      	movne	r3, #0
 8013338:	b2db      	uxtb	r3, r3
 801333a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801333c:	7efb      	ldrb	r3, [r7, #27]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d041      	beq.n	80133c6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013342:	2108      	movs	r1, #8
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7fa f8cd 	bl	800d4e4 <pbuf_remove_header>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d00a      	beq.n	8013366 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013350:	4b20      	ldr	r3, [pc, #128]	@ (80133d4 <udp_input+0x208>)
 8013352:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013356:	4925      	ldr	r1, [pc, #148]	@ (80133ec <udp_input+0x220>)
 8013358:	4820      	ldr	r0, [pc, #128]	@ (80133dc <udp_input+0x210>)
 801335a:	f003 fd59 	bl	8016e10 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7fa f946 	bl	800d5f0 <pbuf_free>
      goto end;
 8013364:	e032      	b.n	80133cc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013368:	2b00      	cmp	r3, #0
 801336a:	d012      	beq.n	8013392 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00a      	beq.n	801338a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013376:	699c      	ldr	r4, [r3, #24]
 8013378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801337a:	69d8      	ldr	r0, [r3, #28]
 801337c:	8a3b      	ldrh	r3, [r7, #16]
 801337e:	9300      	str	r3, [sp, #0]
 8013380:	4b1b      	ldr	r3, [pc, #108]	@ (80133f0 <udp_input+0x224>)
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013386:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013388:	e021      	b.n	80133ce <udp_input+0x202>
        pbuf_free(p);
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f7fa f930 	bl	800d5f0 <pbuf_free>
        goto end;
 8013390:	e01c      	b.n	80133cc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013392:	7cfb      	ldrb	r3, [r7, #19]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d112      	bne.n	80133be <udp_input+0x1f2>
 8013398:	4b12      	ldr	r3, [pc, #72]	@ (80133e4 <udp_input+0x218>)
 801339a:	695b      	ldr	r3, [r3, #20]
 801339c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80133a0:	2be0      	cmp	r3, #224	@ 0xe0
 80133a2:	d00c      	beq.n	80133be <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80133a4:	4b0f      	ldr	r3, [pc, #60]	@ (80133e4 <udp_input+0x218>)
 80133a6:	899b      	ldrh	r3, [r3, #12]
 80133a8:	3308      	adds	r3, #8
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	b21b      	sxth	r3, r3
 80133ae:	4619      	mov	r1, r3
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f7fa f90a 	bl	800d5ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80133b6:	2103      	movs	r1, #3
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f001 fb53 	bl	8014a64 <icmp_dest_unreach>
      pbuf_free(p);
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7fa f916 	bl	800d5f0 <pbuf_free>
  return;
 80133c4:	e003      	b.n	80133ce <udp_input+0x202>
    pbuf_free(p);
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f7fa f912 	bl	800d5f0 <pbuf_free>
  return;
 80133cc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80133ce:	372c      	adds	r7, #44	@ 0x2c
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd90      	pop	{r4, r7, pc}
 80133d4:	08019bf0 	.word	0x08019bf0
 80133d8:	08019c94 	.word	0x08019c94
 80133dc:	08019c44 	.word	0x08019c44
 80133e0:	08019cac 	.word	0x08019cac
 80133e4:	20005900 	.word	0x20005900
 80133e8:	20008878 	.word	0x20008878
 80133ec:	08019cc8 	.word	0x08019cc8
 80133f0:	20005910 	.word	0x20005910

080133f4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b088      	sub	sp, #32
 80133f8:	af02      	add	r7, sp, #8
 80133fa:	60f8      	str	r0, [r7, #12]
 80133fc:	60b9      	str	r1, [r7, #8]
 80133fe:	607a      	str	r2, [r7, #4]
 8013400:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d109      	bne.n	801341c <udp_sendto+0x28>
 8013408:	4b23      	ldr	r3, [pc, #140]	@ (8013498 <udp_sendto+0xa4>)
 801340a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801340e:	4923      	ldr	r1, [pc, #140]	@ (801349c <udp_sendto+0xa8>)
 8013410:	4823      	ldr	r0, [pc, #140]	@ (80134a0 <udp_sendto+0xac>)
 8013412:	f003 fcfd 	bl	8016e10 <iprintf>
 8013416:	f06f 030f 	mvn.w	r3, #15
 801341a:	e038      	b.n	801348e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d109      	bne.n	8013436 <udp_sendto+0x42>
 8013422:	4b1d      	ldr	r3, [pc, #116]	@ (8013498 <udp_sendto+0xa4>)
 8013424:	f240 2219 	movw	r2, #537	@ 0x219
 8013428:	491e      	ldr	r1, [pc, #120]	@ (80134a4 <udp_sendto+0xb0>)
 801342a:	481d      	ldr	r0, [pc, #116]	@ (80134a0 <udp_sendto+0xac>)
 801342c:	f003 fcf0 	bl	8016e10 <iprintf>
 8013430:	f06f 030f 	mvn.w	r3, #15
 8013434:	e02b      	b.n	801348e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d109      	bne.n	8013450 <udp_sendto+0x5c>
 801343c:	4b16      	ldr	r3, [pc, #88]	@ (8013498 <udp_sendto+0xa4>)
 801343e:	f240 221a 	movw	r2, #538	@ 0x21a
 8013442:	4919      	ldr	r1, [pc, #100]	@ (80134a8 <udp_sendto+0xb4>)
 8013444:	4816      	ldr	r0, [pc, #88]	@ (80134a0 <udp_sendto+0xac>)
 8013446:	f003 fce3 	bl	8016e10 <iprintf>
 801344a:	f06f 030f 	mvn.w	r3, #15
 801344e:	e01e      	b.n	801348e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	7a1b      	ldrb	r3, [r3, #8]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d006      	beq.n	8013466 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	7a1b      	ldrb	r3, [r3, #8]
 801345c:	4618      	mov	r0, r3
 801345e:	f7f9 fd67 	bl	800cf30 <netif_get_by_index>
 8013462:	6178      	str	r0, [r7, #20]
 8013464:	e003      	b.n	801346e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f001 fb86 	bl	8014b78 <ip4_route>
 801346c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d102      	bne.n	801347a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013474:	f06f 0303 	mvn.w	r3, #3
 8013478:	e009      	b.n	801348e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801347a:	887a      	ldrh	r2, [r7, #2]
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	9300      	str	r3, [sp, #0]
 8013480:	4613      	mov	r3, r2
 8013482:	687a      	ldr	r2, [r7, #4]
 8013484:	68b9      	ldr	r1, [r7, #8]
 8013486:	68f8      	ldr	r0, [r7, #12]
 8013488:	f000 f810 	bl	80134ac <udp_sendto_if>
 801348c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801348e:	4618      	mov	r0, r3
 8013490:	3718      	adds	r7, #24
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	08019bf0 	.word	0x08019bf0
 801349c:	08019d14 	.word	0x08019d14
 80134a0:	08019c44 	.word	0x08019c44
 80134a4:	08019d2c 	.word	0x08019d2c
 80134a8:	08019d48 	.word	0x08019d48

080134ac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b088      	sub	sp, #32
 80134b0:	af02      	add	r7, sp, #8
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	607a      	str	r2, [r7, #4]
 80134b8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d109      	bne.n	80134d4 <udp_sendto_if+0x28>
 80134c0:	4b2e      	ldr	r3, [pc, #184]	@ (801357c <udp_sendto_if+0xd0>)
 80134c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80134c6:	492e      	ldr	r1, [pc, #184]	@ (8013580 <udp_sendto_if+0xd4>)
 80134c8:	482e      	ldr	r0, [pc, #184]	@ (8013584 <udp_sendto_if+0xd8>)
 80134ca:	f003 fca1 	bl	8016e10 <iprintf>
 80134ce:	f06f 030f 	mvn.w	r3, #15
 80134d2:	e04f      	b.n	8013574 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d109      	bne.n	80134ee <udp_sendto_if+0x42>
 80134da:	4b28      	ldr	r3, [pc, #160]	@ (801357c <udp_sendto_if+0xd0>)
 80134dc:	f240 2281 	movw	r2, #641	@ 0x281
 80134e0:	4929      	ldr	r1, [pc, #164]	@ (8013588 <udp_sendto_if+0xdc>)
 80134e2:	4828      	ldr	r0, [pc, #160]	@ (8013584 <udp_sendto_if+0xd8>)
 80134e4:	f003 fc94 	bl	8016e10 <iprintf>
 80134e8:	f06f 030f 	mvn.w	r3, #15
 80134ec:	e042      	b.n	8013574 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d109      	bne.n	8013508 <udp_sendto_if+0x5c>
 80134f4:	4b21      	ldr	r3, [pc, #132]	@ (801357c <udp_sendto_if+0xd0>)
 80134f6:	f240 2282 	movw	r2, #642	@ 0x282
 80134fa:	4924      	ldr	r1, [pc, #144]	@ (801358c <udp_sendto_if+0xe0>)
 80134fc:	4821      	ldr	r0, [pc, #132]	@ (8013584 <udp_sendto_if+0xd8>)
 80134fe:	f003 fc87 	bl	8016e10 <iprintf>
 8013502:	f06f 030f 	mvn.w	r3, #15
 8013506:	e035      	b.n	8013574 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013508:	6a3b      	ldr	r3, [r7, #32]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d109      	bne.n	8013522 <udp_sendto_if+0x76>
 801350e:	4b1b      	ldr	r3, [pc, #108]	@ (801357c <udp_sendto_if+0xd0>)
 8013510:	f240 2283 	movw	r2, #643	@ 0x283
 8013514:	491e      	ldr	r1, [pc, #120]	@ (8013590 <udp_sendto_if+0xe4>)
 8013516:	481b      	ldr	r0, [pc, #108]	@ (8013584 <udp_sendto_if+0xd8>)
 8013518:	f003 fc7a 	bl	8016e10 <iprintf>
 801351c:	f06f 030f 	mvn.w	r3, #15
 8013520:	e028      	b.n	8013574 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d009      	beq.n	801353c <udp_sendto_if+0x90>
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d005      	beq.n	801353c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013538:	2be0      	cmp	r3, #224	@ 0xe0
 801353a:	d103      	bne.n	8013544 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801353c:	6a3b      	ldr	r3, [r7, #32]
 801353e:	3304      	adds	r3, #4
 8013540:	617b      	str	r3, [r7, #20]
 8013542:	e00b      	b.n	801355c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681a      	ldr	r2, [r3, #0]
 8013548:	6a3b      	ldr	r3, [r7, #32]
 801354a:	3304      	adds	r3, #4
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	429a      	cmp	r2, r3
 8013550:	d002      	beq.n	8013558 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013552:	f06f 0303 	mvn.w	r3, #3
 8013556:	e00d      	b.n	8013574 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801355c:	887a      	ldrh	r2, [r7, #2]
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	9301      	str	r3, [sp, #4]
 8013562:	6a3b      	ldr	r3, [r7, #32]
 8013564:	9300      	str	r3, [sp, #0]
 8013566:	4613      	mov	r3, r2
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	68b9      	ldr	r1, [r7, #8]
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	f000 f811 	bl	8013594 <udp_sendto_if_src>
 8013572:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013574:	4618      	mov	r0, r3
 8013576:	3718      	adds	r7, #24
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}
 801357c:	08019bf0 	.word	0x08019bf0
 8013580:	08019d64 	.word	0x08019d64
 8013584:	08019c44 	.word	0x08019c44
 8013588:	08019d80 	.word	0x08019d80
 801358c:	08019d9c 	.word	0x08019d9c
 8013590:	08019dbc 	.word	0x08019dbc

08013594 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b08c      	sub	sp, #48	@ 0x30
 8013598:	af04      	add	r7, sp, #16
 801359a:	60f8      	str	r0, [r7, #12]
 801359c:	60b9      	str	r1, [r7, #8]
 801359e:	607a      	str	r2, [r7, #4]
 80135a0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d109      	bne.n	80135bc <udp_sendto_if_src+0x28>
 80135a8:	4b65      	ldr	r3, [pc, #404]	@ (8013740 <udp_sendto_if_src+0x1ac>)
 80135aa:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80135ae:	4965      	ldr	r1, [pc, #404]	@ (8013744 <udp_sendto_if_src+0x1b0>)
 80135b0:	4865      	ldr	r0, [pc, #404]	@ (8013748 <udp_sendto_if_src+0x1b4>)
 80135b2:	f003 fc2d 	bl	8016e10 <iprintf>
 80135b6:	f06f 030f 	mvn.w	r3, #15
 80135ba:	e0bc      	b.n	8013736 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d109      	bne.n	80135d6 <udp_sendto_if_src+0x42>
 80135c2:	4b5f      	ldr	r3, [pc, #380]	@ (8013740 <udp_sendto_if_src+0x1ac>)
 80135c4:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80135c8:	4960      	ldr	r1, [pc, #384]	@ (801374c <udp_sendto_if_src+0x1b8>)
 80135ca:	485f      	ldr	r0, [pc, #380]	@ (8013748 <udp_sendto_if_src+0x1b4>)
 80135cc:	f003 fc20 	bl	8016e10 <iprintf>
 80135d0:	f06f 030f 	mvn.w	r3, #15
 80135d4:	e0af      	b.n	8013736 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d109      	bne.n	80135f0 <udp_sendto_if_src+0x5c>
 80135dc:	4b58      	ldr	r3, [pc, #352]	@ (8013740 <udp_sendto_if_src+0x1ac>)
 80135de:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80135e2:	495b      	ldr	r1, [pc, #364]	@ (8013750 <udp_sendto_if_src+0x1bc>)
 80135e4:	4858      	ldr	r0, [pc, #352]	@ (8013748 <udp_sendto_if_src+0x1b4>)
 80135e6:	f003 fc13 	bl	8016e10 <iprintf>
 80135ea:	f06f 030f 	mvn.w	r3, #15
 80135ee:	e0a2      	b.n	8013736 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80135f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d109      	bne.n	801360a <udp_sendto_if_src+0x76>
 80135f6:	4b52      	ldr	r3, [pc, #328]	@ (8013740 <udp_sendto_if_src+0x1ac>)
 80135f8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80135fc:	4955      	ldr	r1, [pc, #340]	@ (8013754 <udp_sendto_if_src+0x1c0>)
 80135fe:	4852      	ldr	r0, [pc, #328]	@ (8013748 <udp_sendto_if_src+0x1b4>)
 8013600:	f003 fc06 	bl	8016e10 <iprintf>
 8013604:	f06f 030f 	mvn.w	r3, #15
 8013608:	e095      	b.n	8013736 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801360c:	2b00      	cmp	r3, #0
 801360e:	d109      	bne.n	8013624 <udp_sendto_if_src+0x90>
 8013610:	4b4b      	ldr	r3, [pc, #300]	@ (8013740 <udp_sendto_if_src+0x1ac>)
 8013612:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8013616:	4950      	ldr	r1, [pc, #320]	@ (8013758 <udp_sendto_if_src+0x1c4>)
 8013618:	484b      	ldr	r0, [pc, #300]	@ (8013748 <udp_sendto_if_src+0x1b4>)
 801361a:	f003 fbf9 	bl	8016e10 <iprintf>
 801361e:	f06f 030f 	mvn.w	r3, #15
 8013622:	e088      	b.n	8013736 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	8a5b      	ldrh	r3, [r3, #18]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d10f      	bne.n	801364c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801362c:	68f9      	ldr	r1, [r7, #12]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	8a5b      	ldrh	r3, [r3, #18]
 8013632:	461a      	mov	r2, r3
 8013634:	68f8      	ldr	r0, [r7, #12]
 8013636:	f000 f893 	bl	8013760 <udp_bind>
 801363a:	4603      	mov	r3, r0
 801363c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801363e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d002      	beq.n	801364c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013646:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801364a:	e074      	b.n	8013736 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	891b      	ldrh	r3, [r3, #8]
 8013650:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013654:	4293      	cmp	r3, r2
 8013656:	d902      	bls.n	801365e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013658:	f04f 33ff 	mov.w	r3, #4294967295
 801365c:	e06b      	b.n	8013736 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801365e:	2108      	movs	r1, #8
 8013660:	68b8      	ldr	r0, [r7, #8]
 8013662:	f7f9 ff2f 	bl	800d4c4 <pbuf_add_header>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d015      	beq.n	8013698 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801366c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013670:	2108      	movs	r1, #8
 8013672:	2022      	movs	r0, #34	@ 0x22
 8013674:	f7f9 fcd8 	bl	800d028 <pbuf_alloc>
 8013678:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801367a:	69fb      	ldr	r3, [r7, #28]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d102      	bne.n	8013686 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013680:	f04f 33ff 	mov.w	r3, #4294967295
 8013684:	e057      	b.n	8013736 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	891b      	ldrh	r3, [r3, #8]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d006      	beq.n	801369c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801368e:	68b9      	ldr	r1, [r7, #8]
 8013690:	69f8      	ldr	r0, [r7, #28]
 8013692:	f7fa f8c5 	bl	800d820 <pbuf_chain>
 8013696:	e001      	b.n	801369c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	895b      	ldrh	r3, [r3, #10]
 80136a0:	2b07      	cmp	r3, #7
 80136a2:	d806      	bhi.n	80136b2 <udp_sendto_if_src+0x11e>
 80136a4:	4b26      	ldr	r3, [pc, #152]	@ (8013740 <udp_sendto_if_src+0x1ac>)
 80136a6:	f240 320d 	movw	r2, #781	@ 0x30d
 80136aa:	492c      	ldr	r1, [pc, #176]	@ (801375c <udp_sendto_if_src+0x1c8>)
 80136ac:	4826      	ldr	r0, [pc, #152]	@ (8013748 <udp_sendto_if_src+0x1b4>)
 80136ae:	f003 fbaf 	bl	8016e10 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80136b2:	69fb      	ldr	r3, [r7, #28]
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	8a5b      	ldrh	r3, [r3, #18]
 80136bc:	4618      	mov	r0, r3
 80136be:	f7f8 fc3d 	bl	800bf3c <lwip_htons>
 80136c2:	4603      	mov	r3, r0
 80136c4:	461a      	mov	r2, r3
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80136ca:	887b      	ldrh	r3, [r7, #2]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7f8 fc35 	bl	800bf3c <lwip_htons>
 80136d2:	4603      	mov	r3, r0
 80136d4:	461a      	mov	r2, r3
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	2200      	movs	r2, #0
 80136de:	719a      	strb	r2, [r3, #6]
 80136e0:	2200      	movs	r2, #0
 80136e2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80136e4:	69fb      	ldr	r3, [r7, #28]
 80136e6:	891b      	ldrh	r3, [r3, #8]
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7f8 fc27 	bl	800bf3c <lwip_htons>
 80136ee:	4603      	mov	r3, r0
 80136f0:	461a      	mov	r2, r3
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80136f6:	2311      	movs	r3, #17
 80136f8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	7adb      	ldrb	r3, [r3, #11]
 80136fe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	7a9b      	ldrb	r3, [r3, #10]
 8013704:	7cb9      	ldrb	r1, [r7, #18]
 8013706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013708:	9202      	str	r2, [sp, #8]
 801370a:	7cfa      	ldrb	r2, [r7, #19]
 801370c:	9201      	str	r2, [sp, #4]
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	460b      	mov	r3, r1
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013716:	69f8      	ldr	r0, [r7, #28]
 8013718:	f001 fc16 	bl	8014f48 <ip4_output_if_src>
 801371c:	4603      	mov	r3, r0
 801371e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013720:	69fa      	ldr	r2, [r7, #28]
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	429a      	cmp	r2, r3
 8013726:	d004      	beq.n	8013732 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013728:	69f8      	ldr	r0, [r7, #28]
 801372a:	f7f9 ff61 	bl	800d5f0 <pbuf_free>
    q = NULL;
 801372e:	2300      	movs	r3, #0
 8013730:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013732:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3720      	adds	r7, #32
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}
 801373e:	bf00      	nop
 8013740:	08019bf0 	.word	0x08019bf0
 8013744:	08019ddc 	.word	0x08019ddc
 8013748:	08019c44 	.word	0x08019c44
 801374c:	08019dfc 	.word	0x08019dfc
 8013750:	08019e1c 	.word	0x08019e1c
 8013754:	08019e40 	.word	0x08019e40
 8013758:	08019e64 	.word	0x08019e64
 801375c:	08019e88 	.word	0x08019e88

08013760 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b086      	sub	sp, #24
 8013764:	af00      	add	r7, sp, #0
 8013766:	60f8      	str	r0, [r7, #12]
 8013768:	60b9      	str	r1, [r7, #8]
 801376a:	4613      	mov	r3, r2
 801376c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013774:	4b39      	ldr	r3, [pc, #228]	@ (801385c <udp_bind+0xfc>)
 8013776:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d109      	bne.n	8013792 <udp_bind+0x32>
 801377e:	4b38      	ldr	r3, [pc, #224]	@ (8013860 <udp_bind+0x100>)
 8013780:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013784:	4937      	ldr	r1, [pc, #220]	@ (8013864 <udp_bind+0x104>)
 8013786:	4838      	ldr	r0, [pc, #224]	@ (8013868 <udp_bind+0x108>)
 8013788:	f003 fb42 	bl	8016e10 <iprintf>
 801378c:	f06f 030f 	mvn.w	r3, #15
 8013790:	e060      	b.n	8013854 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013792:	2300      	movs	r3, #0
 8013794:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013796:	4b35      	ldr	r3, [pc, #212]	@ (801386c <udp_bind+0x10c>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	617b      	str	r3, [r7, #20]
 801379c:	e009      	b.n	80137b2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801379e:	68fa      	ldr	r2, [r7, #12]
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d102      	bne.n	80137ac <udp_bind+0x4c>
      rebind = 1;
 80137a6:	2301      	movs	r3, #1
 80137a8:	74fb      	strb	r3, [r7, #19]
      break;
 80137aa:	e005      	b.n	80137b8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	68db      	ldr	r3, [r3, #12]
 80137b0:	617b      	str	r3, [r7, #20]
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d1f2      	bne.n	801379e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80137b8:	88fb      	ldrh	r3, [r7, #6]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d109      	bne.n	80137d2 <udp_bind+0x72>
    port = udp_new_port();
 80137be:	f7ff fc69 	bl	8013094 <udp_new_port>
 80137c2:	4603      	mov	r3, r0
 80137c4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80137c6:	88fb      	ldrh	r3, [r7, #6]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d12c      	bne.n	8013826 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80137cc:	f06f 0307 	mvn.w	r3, #7
 80137d0:	e040      	b.n	8013854 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137d2:	4b26      	ldr	r3, [pc, #152]	@ (801386c <udp_bind+0x10c>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	617b      	str	r3, [r7, #20]
 80137d8:	e022      	b.n	8013820 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80137da:	68fa      	ldr	r2, [r7, #12]
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d01b      	beq.n	801381a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	8a5b      	ldrh	r3, [r3, #18]
 80137e6:	88fa      	ldrh	r2, [r7, #6]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d116      	bne.n	801381a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	681a      	ldr	r2, [r3, #0]
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80137f4:	429a      	cmp	r2, r3
 80137f6:	d00d      	beq.n	8013814 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d00a      	beq.n	8013814 <udp_bind+0xb4>
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d006      	beq.n	8013814 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013806:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013808:	2b00      	cmp	r3, #0
 801380a:	d003      	beq.n	8013814 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d102      	bne.n	801381a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013814:	f06f 0307 	mvn.w	r3, #7
 8013818:	e01c      	b.n	8013854 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	68db      	ldr	r3, [r3, #12]
 801381e:	617b      	str	r3, [r7, #20]
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d1d9      	bne.n	80137da <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d002      	beq.n	8013832 <udp_bind+0xd2>
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	e000      	b.n	8013834 <udp_bind+0xd4>
 8013832:	2300      	movs	r3, #0
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	88fa      	ldrh	r2, [r7, #6]
 801383c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801383e:	7cfb      	ldrb	r3, [r7, #19]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d106      	bne.n	8013852 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013844:	4b09      	ldr	r3, [pc, #36]	@ (801386c <udp_bind+0x10c>)
 8013846:	681a      	ldr	r2, [r3, #0]
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801384c:	4a07      	ldr	r2, [pc, #28]	@ (801386c <udp_bind+0x10c>)
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3718      	adds	r7, #24
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}
 801385c:	0801a714 	.word	0x0801a714
 8013860:	08019bf0 	.word	0x08019bf0
 8013864:	08019eb8 	.word	0x08019eb8
 8013868:	08019c44 	.word	0x08019c44
 801386c:	20008878 	.word	0x20008878

08013870 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	60f8      	str	r0, [r7, #12]
 8013878:	60b9      	str	r1, [r7, #8]
 801387a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d107      	bne.n	8013892 <udp_recv+0x22>
 8013882:	4b08      	ldr	r3, [pc, #32]	@ (80138a4 <udp_recv+0x34>)
 8013884:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013888:	4907      	ldr	r1, [pc, #28]	@ (80138a8 <udp_recv+0x38>)
 801388a:	4808      	ldr	r0, [pc, #32]	@ (80138ac <udp_recv+0x3c>)
 801388c:	f003 fac0 	bl	8016e10 <iprintf>
 8013890:	e005      	b.n	801389e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	68ba      	ldr	r2, [r7, #8]
 8013896:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	61da      	str	r2, [r3, #28]
}
 801389e:	3710      	adds	r7, #16
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	08019bf0 	.word	0x08019bf0
 80138a8:	08019f24 	.word	0x08019f24
 80138ac:	08019c44 	.word	0x08019c44

080138b0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b084      	sub	sp, #16
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d107      	bne.n	80138ce <udp_remove+0x1e>
 80138be:	4b19      	ldr	r3, [pc, #100]	@ (8013924 <udp_remove+0x74>)
 80138c0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80138c4:	4918      	ldr	r1, [pc, #96]	@ (8013928 <udp_remove+0x78>)
 80138c6:	4819      	ldr	r0, [pc, #100]	@ (801392c <udp_remove+0x7c>)
 80138c8:	f003 faa2 	bl	8016e10 <iprintf>
 80138cc:	e026      	b.n	801391c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80138ce:	4b18      	ldr	r3, [pc, #96]	@ (8013930 <udp_remove+0x80>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	687a      	ldr	r2, [r7, #4]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d105      	bne.n	80138e4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80138d8:	4b15      	ldr	r3, [pc, #84]	@ (8013930 <udp_remove+0x80>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	68db      	ldr	r3, [r3, #12]
 80138de:	4a14      	ldr	r2, [pc, #80]	@ (8013930 <udp_remove+0x80>)
 80138e0:	6013      	str	r3, [r2, #0]
 80138e2:	e017      	b.n	8013914 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80138e4:	4b12      	ldr	r3, [pc, #72]	@ (8013930 <udp_remove+0x80>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	60fb      	str	r3, [r7, #12]
 80138ea:	e010      	b.n	801390e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	68db      	ldr	r3, [r3, #12]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d009      	beq.n	8013908 <udp_remove+0x58>
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d104      	bne.n	8013908 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	68da      	ldr	r2, [r3, #12]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	60da      	str	r2, [r3, #12]
        break;
 8013906:	e005      	b.n	8013914 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	60fb      	str	r3, [r7, #12]
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d1eb      	bne.n	80138ec <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013914:	6879      	ldr	r1, [r7, #4]
 8013916:	2000      	movs	r0, #0
 8013918:	f7f8 fff4 	bl	800c904 <memp_free>
}
 801391c:	3710      	adds	r7, #16
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	08019bf0 	.word	0x08019bf0
 8013928:	08019f3c 	.word	0x08019f3c
 801392c:	08019c44 	.word	0x08019c44
 8013930:	20008878 	.word	0x20008878

08013934 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801393a:	2000      	movs	r0, #0
 801393c:	f7f8 ff72 	bl	800c824 <memp_malloc>
 8013940:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d007      	beq.n	8013958 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013948:	2220      	movs	r2, #32
 801394a:	2100      	movs	r1, #0
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f003 fac4 	bl	8016eda <memset>
    pcb->ttl = UDP_TTL;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	22ff      	movs	r2, #255	@ 0xff
 8013956:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013958:	687b      	ldr	r3, [r7, #4]
}
 801395a:	4618      	mov	r0, r3
 801395c:	3708      	adds	r7, #8
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
	...

08013964 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013964:	b480      	push	{r7}
 8013966:	b085      	sub	sp, #20
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d01e      	beq.n	80139b2 <udp_netif_ip_addr_changed+0x4e>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d01a      	beq.n	80139b2 <udp_netif_ip_addr_changed+0x4e>
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d017      	beq.n	80139b2 <udp_netif_ip_addr_changed+0x4e>
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d013      	beq.n	80139b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801398a:	4b0d      	ldr	r3, [pc, #52]	@ (80139c0 <udp_netif_ip_addr_changed+0x5c>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	60fb      	str	r3, [r7, #12]
 8013990:	e00c      	b.n	80139ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	429a      	cmp	r2, r3
 801399c:	d103      	bne.n	80139a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	60fb      	str	r3, [r7, #12]
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d1ef      	bne.n	8013992 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80139b2:	bf00      	nop
 80139b4:	3714      	adds	r7, #20
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop
 80139c0:	20008878 	.word	0x20008878

080139c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80139cc:	4915      	ldr	r1, [pc, #84]	@ (8013a24 <etharp_free_entry+0x60>)
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	4613      	mov	r3, r2
 80139d2:	005b      	lsls	r3, r3, #1
 80139d4:	4413      	add	r3, r2
 80139d6:	00db      	lsls	r3, r3, #3
 80139d8:	440b      	add	r3, r1
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d013      	beq.n	8013a08 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80139e0:	4910      	ldr	r1, [pc, #64]	@ (8013a24 <etharp_free_entry+0x60>)
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	4613      	mov	r3, r2
 80139e6:	005b      	lsls	r3, r3, #1
 80139e8:	4413      	add	r3, r2
 80139ea:	00db      	lsls	r3, r3, #3
 80139ec:	440b      	add	r3, r1
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7f9 fdfd 	bl	800d5f0 <pbuf_free>
    arp_table[i].q = NULL;
 80139f6:	490b      	ldr	r1, [pc, #44]	@ (8013a24 <etharp_free_entry+0x60>)
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	4613      	mov	r3, r2
 80139fc:	005b      	lsls	r3, r3, #1
 80139fe:	4413      	add	r3, r2
 8013a00:	00db      	lsls	r3, r3, #3
 8013a02:	440b      	add	r3, r1
 8013a04:	2200      	movs	r2, #0
 8013a06:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013a08:	4906      	ldr	r1, [pc, #24]	@ (8013a24 <etharp_free_entry+0x60>)
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	005b      	lsls	r3, r3, #1
 8013a10:	4413      	add	r3, r2
 8013a12:	00db      	lsls	r3, r3, #3
 8013a14:	440b      	add	r3, r1
 8013a16:	3314      	adds	r3, #20
 8013a18:	2200      	movs	r2, #0
 8013a1a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013a1c:	bf00      	nop
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	2000887c 	.word	0x2000887c

08013a28 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a2e:	2300      	movs	r3, #0
 8013a30:	607b      	str	r3, [r7, #4]
 8013a32:	e096      	b.n	8013b62 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013a34:	494f      	ldr	r1, [pc, #316]	@ (8013b74 <etharp_tmr+0x14c>)
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	4613      	mov	r3, r2
 8013a3a:	005b      	lsls	r3, r3, #1
 8013a3c:	4413      	add	r3, r2
 8013a3e:	00db      	lsls	r3, r3, #3
 8013a40:	440b      	add	r3, r1
 8013a42:	3314      	adds	r3, #20
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013a48:	78fb      	ldrb	r3, [r7, #3]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	f000 8086 	beq.w	8013b5c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013a50:	4948      	ldr	r1, [pc, #288]	@ (8013b74 <etharp_tmr+0x14c>)
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	4613      	mov	r3, r2
 8013a56:	005b      	lsls	r3, r3, #1
 8013a58:	4413      	add	r3, r2
 8013a5a:	00db      	lsls	r3, r3, #3
 8013a5c:	440b      	add	r3, r1
 8013a5e:	3312      	adds	r3, #18
 8013a60:	881b      	ldrh	r3, [r3, #0]
 8013a62:	3301      	adds	r3, #1
 8013a64:	b298      	uxth	r0, r3
 8013a66:	4943      	ldr	r1, [pc, #268]	@ (8013b74 <etharp_tmr+0x14c>)
 8013a68:	687a      	ldr	r2, [r7, #4]
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	005b      	lsls	r3, r3, #1
 8013a6e:	4413      	add	r3, r2
 8013a70:	00db      	lsls	r3, r3, #3
 8013a72:	440b      	add	r3, r1
 8013a74:	3312      	adds	r3, #18
 8013a76:	4602      	mov	r2, r0
 8013a78:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013a7a:	493e      	ldr	r1, [pc, #248]	@ (8013b74 <etharp_tmr+0x14c>)
 8013a7c:	687a      	ldr	r2, [r7, #4]
 8013a7e:	4613      	mov	r3, r2
 8013a80:	005b      	lsls	r3, r3, #1
 8013a82:	4413      	add	r3, r2
 8013a84:	00db      	lsls	r3, r3, #3
 8013a86:	440b      	add	r3, r1
 8013a88:	3312      	adds	r3, #18
 8013a8a:	881b      	ldrh	r3, [r3, #0]
 8013a8c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013a90:	d215      	bcs.n	8013abe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013a92:	4938      	ldr	r1, [pc, #224]	@ (8013b74 <etharp_tmr+0x14c>)
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	4613      	mov	r3, r2
 8013a98:	005b      	lsls	r3, r3, #1
 8013a9a:	4413      	add	r3, r2
 8013a9c:	00db      	lsls	r3, r3, #3
 8013a9e:	440b      	add	r3, r1
 8013aa0:	3314      	adds	r3, #20
 8013aa2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	d10e      	bne.n	8013ac6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013aa8:	4932      	ldr	r1, [pc, #200]	@ (8013b74 <etharp_tmr+0x14c>)
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	4613      	mov	r3, r2
 8013aae:	005b      	lsls	r3, r3, #1
 8013ab0:	4413      	add	r3, r2
 8013ab2:	00db      	lsls	r3, r3, #3
 8013ab4:	440b      	add	r3, r1
 8013ab6:	3312      	adds	r3, #18
 8013ab8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013aba:	2b04      	cmp	r3, #4
 8013abc:	d903      	bls.n	8013ac6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f7ff ff80 	bl	80139c4 <etharp_free_entry>
 8013ac4:	e04a      	b.n	8013b5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013ac6:	492b      	ldr	r1, [pc, #172]	@ (8013b74 <etharp_tmr+0x14c>)
 8013ac8:	687a      	ldr	r2, [r7, #4]
 8013aca:	4613      	mov	r3, r2
 8013acc:	005b      	lsls	r3, r3, #1
 8013ace:	4413      	add	r3, r2
 8013ad0:	00db      	lsls	r3, r3, #3
 8013ad2:	440b      	add	r3, r1
 8013ad4:	3314      	adds	r3, #20
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	2b03      	cmp	r3, #3
 8013ada:	d10a      	bne.n	8013af2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013adc:	4925      	ldr	r1, [pc, #148]	@ (8013b74 <etharp_tmr+0x14c>)
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	005b      	lsls	r3, r3, #1
 8013ae4:	4413      	add	r3, r2
 8013ae6:	00db      	lsls	r3, r3, #3
 8013ae8:	440b      	add	r3, r1
 8013aea:	3314      	adds	r3, #20
 8013aec:	2204      	movs	r2, #4
 8013aee:	701a      	strb	r2, [r3, #0]
 8013af0:	e034      	b.n	8013b5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013af2:	4920      	ldr	r1, [pc, #128]	@ (8013b74 <etharp_tmr+0x14c>)
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	4613      	mov	r3, r2
 8013af8:	005b      	lsls	r3, r3, #1
 8013afa:	4413      	add	r3, r2
 8013afc:	00db      	lsls	r3, r3, #3
 8013afe:	440b      	add	r3, r1
 8013b00:	3314      	adds	r3, #20
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	2b04      	cmp	r3, #4
 8013b06:	d10a      	bne.n	8013b1e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013b08:	491a      	ldr	r1, [pc, #104]	@ (8013b74 <etharp_tmr+0x14c>)
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	4613      	mov	r3, r2
 8013b0e:	005b      	lsls	r3, r3, #1
 8013b10:	4413      	add	r3, r2
 8013b12:	00db      	lsls	r3, r3, #3
 8013b14:	440b      	add	r3, r1
 8013b16:	3314      	adds	r3, #20
 8013b18:	2202      	movs	r2, #2
 8013b1a:	701a      	strb	r2, [r3, #0]
 8013b1c:	e01e      	b.n	8013b5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013b1e:	4915      	ldr	r1, [pc, #84]	@ (8013b74 <etharp_tmr+0x14c>)
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	4613      	mov	r3, r2
 8013b24:	005b      	lsls	r3, r3, #1
 8013b26:	4413      	add	r3, r2
 8013b28:	00db      	lsls	r3, r3, #3
 8013b2a:	440b      	add	r3, r1
 8013b2c:	3314      	adds	r3, #20
 8013b2e:	781b      	ldrb	r3, [r3, #0]
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	d113      	bne.n	8013b5c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013b34:	490f      	ldr	r1, [pc, #60]	@ (8013b74 <etharp_tmr+0x14c>)
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	4413      	add	r3, r2
 8013b3e:	00db      	lsls	r3, r3, #3
 8013b40:	440b      	add	r3, r1
 8013b42:	3308      	adds	r3, #8
 8013b44:	6818      	ldr	r0, [r3, #0]
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	4613      	mov	r3, r2
 8013b4a:	005b      	lsls	r3, r3, #1
 8013b4c:	4413      	add	r3, r2
 8013b4e:	00db      	lsls	r3, r3, #3
 8013b50:	4a08      	ldr	r2, [pc, #32]	@ (8013b74 <etharp_tmr+0x14c>)
 8013b52:	4413      	add	r3, r2
 8013b54:	3304      	adds	r3, #4
 8013b56:	4619      	mov	r1, r3
 8013b58:	f000 fe6e 	bl	8014838 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	3301      	adds	r3, #1
 8013b60:	607b      	str	r3, [r7, #4]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b09      	cmp	r3, #9
 8013b66:	f77f af65 	ble.w	8013a34 <etharp_tmr+0xc>
      }
    }
  }
}
 8013b6a:	bf00      	nop
 8013b6c:	bf00      	nop
 8013b6e:	3708      	adds	r7, #8
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	2000887c 	.word	0x2000887c

08013b78 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b08a      	sub	sp, #40	@ 0x28
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	60f8      	str	r0, [r7, #12]
 8013b80:	460b      	mov	r3, r1
 8013b82:	607a      	str	r2, [r7, #4]
 8013b84:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013b86:	230a      	movs	r3, #10
 8013b88:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013b8a:	230a      	movs	r3, #10
 8013b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013b8e:	230a      	movs	r3, #10
 8013b90:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013b92:	2300      	movs	r3, #0
 8013b94:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013b96:	230a      	movs	r3, #10
 8013b98:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	83bb      	strh	r3, [r7, #28]
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	837b      	strh	r3, [r7, #26]
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	843b      	strh	r3, [r7, #32]
 8013baa:	e0ae      	b.n	8013d0a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bb0:	49a6      	ldr	r1, [pc, #664]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	005b      	lsls	r3, r3, #1
 8013bb6:	4413      	add	r3, r2
 8013bb8:	00db      	lsls	r3, r3, #3
 8013bba:	440b      	add	r3, r1
 8013bbc:	3314      	adds	r3, #20
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013bc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013bc6:	2b0a      	cmp	r3, #10
 8013bc8:	d105      	bne.n	8013bd6 <etharp_find_entry+0x5e>
 8013bca:	7dfb      	ldrb	r3, [r7, #23]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d102      	bne.n	8013bd6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013bd0:	8c3b      	ldrh	r3, [r7, #32]
 8013bd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013bd4:	e095      	b.n	8013d02 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013bd6:	7dfb      	ldrb	r3, [r7, #23]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f000 8092 	beq.w	8013d02 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013bde:	7dfb      	ldrb	r3, [r7, #23]
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	d009      	beq.n	8013bf8 <etharp_find_entry+0x80>
 8013be4:	7dfb      	ldrb	r3, [r7, #23]
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d806      	bhi.n	8013bf8 <etharp_find_entry+0x80>
 8013bea:	4b99      	ldr	r3, [pc, #612]	@ (8013e50 <etharp_find_entry+0x2d8>)
 8013bec:	f240 1223 	movw	r2, #291	@ 0x123
 8013bf0:	4998      	ldr	r1, [pc, #608]	@ (8013e54 <etharp_find_entry+0x2dc>)
 8013bf2:	4899      	ldr	r0, [pc, #612]	@ (8013e58 <etharp_find_entry+0x2e0>)
 8013bf4:	f003 f90c 	bl	8016e10 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d020      	beq.n	8013c40 <etharp_find_entry+0xc8>
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	6819      	ldr	r1, [r3, #0]
 8013c02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c06:	4891      	ldr	r0, [pc, #580]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013c08:	4613      	mov	r3, r2
 8013c0a:	005b      	lsls	r3, r3, #1
 8013c0c:	4413      	add	r3, r2
 8013c0e:	00db      	lsls	r3, r3, #3
 8013c10:	4403      	add	r3, r0
 8013c12:	3304      	adds	r3, #4
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	4299      	cmp	r1, r3
 8013c18:	d112      	bne.n	8013c40 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d00c      	beq.n	8013c3a <etharp_find_entry+0xc2>
 8013c20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c24:	4989      	ldr	r1, [pc, #548]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013c26:	4613      	mov	r3, r2
 8013c28:	005b      	lsls	r3, r3, #1
 8013c2a:	4413      	add	r3, r2
 8013c2c:	00db      	lsls	r3, r3, #3
 8013c2e:	440b      	add	r3, r1
 8013c30:	3308      	adds	r3, #8
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d102      	bne.n	8013c40 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013c3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013c3e:	e100      	b.n	8013e42 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013c40:	7dfb      	ldrb	r3, [r7, #23]
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d140      	bne.n	8013cc8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013c46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c4a:	4980      	ldr	r1, [pc, #512]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013c4c:	4613      	mov	r3, r2
 8013c4e:	005b      	lsls	r3, r3, #1
 8013c50:	4413      	add	r3, r2
 8013c52:	00db      	lsls	r3, r3, #3
 8013c54:	440b      	add	r3, r1
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d01a      	beq.n	8013c92 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013c5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c60:	497a      	ldr	r1, [pc, #488]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013c62:	4613      	mov	r3, r2
 8013c64:	005b      	lsls	r3, r3, #1
 8013c66:	4413      	add	r3, r2
 8013c68:	00db      	lsls	r3, r3, #3
 8013c6a:	440b      	add	r3, r1
 8013c6c:	3312      	adds	r3, #18
 8013c6e:	881b      	ldrh	r3, [r3, #0]
 8013c70:	8bba      	ldrh	r2, [r7, #28]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d845      	bhi.n	8013d02 <etharp_find_entry+0x18a>
            old_queue = i;
 8013c76:	8c3b      	ldrh	r3, [r7, #32]
 8013c78:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c7e:	4973      	ldr	r1, [pc, #460]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013c80:	4613      	mov	r3, r2
 8013c82:	005b      	lsls	r3, r3, #1
 8013c84:	4413      	add	r3, r2
 8013c86:	00db      	lsls	r3, r3, #3
 8013c88:	440b      	add	r3, r1
 8013c8a:	3312      	adds	r3, #18
 8013c8c:	881b      	ldrh	r3, [r3, #0]
 8013c8e:	83bb      	strh	r3, [r7, #28]
 8013c90:	e037      	b.n	8013d02 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013c92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c96:	496d      	ldr	r1, [pc, #436]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013c98:	4613      	mov	r3, r2
 8013c9a:	005b      	lsls	r3, r3, #1
 8013c9c:	4413      	add	r3, r2
 8013c9e:	00db      	lsls	r3, r3, #3
 8013ca0:	440b      	add	r3, r1
 8013ca2:	3312      	adds	r3, #18
 8013ca4:	881b      	ldrh	r3, [r3, #0]
 8013ca6:	8b7a      	ldrh	r2, [r7, #26]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d82a      	bhi.n	8013d02 <etharp_find_entry+0x18a>
            old_pending = i;
 8013cac:	8c3b      	ldrh	r3, [r7, #32]
 8013cae:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8013cb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cb4:	4965      	ldr	r1, [pc, #404]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013cb6:	4613      	mov	r3, r2
 8013cb8:	005b      	lsls	r3, r3, #1
 8013cba:	4413      	add	r3, r2
 8013cbc:	00db      	lsls	r3, r3, #3
 8013cbe:	440b      	add	r3, r1
 8013cc0:	3312      	adds	r3, #18
 8013cc2:	881b      	ldrh	r3, [r3, #0]
 8013cc4:	837b      	strh	r3, [r7, #26]
 8013cc6:	e01c      	b.n	8013d02 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013cc8:	7dfb      	ldrb	r3, [r7, #23]
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d919      	bls.n	8013d02 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cd2:	495e      	ldr	r1, [pc, #376]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	4413      	add	r3, r2
 8013cda:	00db      	lsls	r3, r3, #3
 8013cdc:	440b      	add	r3, r1
 8013cde:	3312      	adds	r3, #18
 8013ce0:	881b      	ldrh	r3, [r3, #0]
 8013ce2:	8b3a      	ldrh	r2, [r7, #24]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d80c      	bhi.n	8013d02 <etharp_find_entry+0x18a>
            old_stable = i;
 8013ce8:	8c3b      	ldrh	r3, [r7, #32]
 8013cea:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013cec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cf0:	4956      	ldr	r1, [pc, #344]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013cf2:	4613      	mov	r3, r2
 8013cf4:	005b      	lsls	r3, r3, #1
 8013cf6:	4413      	add	r3, r2
 8013cf8:	00db      	lsls	r3, r3, #3
 8013cfa:	440b      	add	r3, r1
 8013cfc:	3312      	adds	r3, #18
 8013cfe:	881b      	ldrh	r3, [r3, #0]
 8013d00:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d02:	8c3b      	ldrh	r3, [r7, #32]
 8013d04:	3301      	adds	r3, #1
 8013d06:	b29b      	uxth	r3, r3
 8013d08:	843b      	strh	r3, [r7, #32]
 8013d0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d0e:	2b09      	cmp	r3, #9
 8013d10:	f77f af4c 	ble.w	8013bac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013d14:	7afb      	ldrb	r3, [r7, #11]
 8013d16:	f003 0302 	and.w	r3, r3, #2
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d108      	bne.n	8013d30 <etharp_find_entry+0x1b8>
 8013d1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013d22:	2b0a      	cmp	r3, #10
 8013d24:	d107      	bne.n	8013d36 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013d26:	7afb      	ldrb	r3, [r7, #11]
 8013d28:	f003 0301 	and.w	r3, r3, #1
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d102      	bne.n	8013d36 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013d30:	f04f 33ff 	mov.w	r3, #4294967295
 8013d34:	e085      	b.n	8013e42 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013d36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013d3a:	2b09      	cmp	r3, #9
 8013d3c:	dc02      	bgt.n	8013d44 <etharp_find_entry+0x1cc>
    i = empty;
 8013d3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d40:	843b      	strh	r3, [r7, #32]
 8013d42:	e039      	b.n	8013db8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013d44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013d48:	2b09      	cmp	r3, #9
 8013d4a:	dc14      	bgt.n	8013d76 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013d4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d4e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013d50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d54:	493d      	ldr	r1, [pc, #244]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013d56:	4613      	mov	r3, r2
 8013d58:	005b      	lsls	r3, r3, #1
 8013d5a:	4413      	add	r3, r2
 8013d5c:	00db      	lsls	r3, r3, #3
 8013d5e:	440b      	add	r3, r1
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d018      	beq.n	8013d98 <etharp_find_entry+0x220>
 8013d66:	4b3a      	ldr	r3, [pc, #232]	@ (8013e50 <etharp_find_entry+0x2d8>)
 8013d68:	f240 126d 	movw	r2, #365	@ 0x16d
 8013d6c:	493b      	ldr	r1, [pc, #236]	@ (8013e5c <etharp_find_entry+0x2e4>)
 8013d6e:	483a      	ldr	r0, [pc, #232]	@ (8013e58 <etharp_find_entry+0x2e0>)
 8013d70:	f003 f84e 	bl	8016e10 <iprintf>
 8013d74:	e010      	b.n	8013d98 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013d76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013d7a:	2b09      	cmp	r3, #9
 8013d7c:	dc02      	bgt.n	8013d84 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013d7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013d80:	843b      	strh	r3, [r7, #32]
 8013d82:	e009      	b.n	8013d98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013d84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013d88:	2b09      	cmp	r3, #9
 8013d8a:	dc02      	bgt.n	8013d92 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013d8c:	8bfb      	ldrh	r3, [r7, #30]
 8013d8e:	843b      	strh	r3, [r7, #32]
 8013d90:	e002      	b.n	8013d98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013d92:	f04f 33ff 	mov.w	r3, #4294967295
 8013d96:	e054      	b.n	8013e42 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013d98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d9c:	2b09      	cmp	r3, #9
 8013d9e:	dd06      	ble.n	8013dae <etharp_find_entry+0x236>
 8013da0:	4b2b      	ldr	r3, [pc, #172]	@ (8013e50 <etharp_find_entry+0x2d8>)
 8013da2:	f240 127f 	movw	r2, #383	@ 0x17f
 8013da6:	492e      	ldr	r1, [pc, #184]	@ (8013e60 <etharp_find_entry+0x2e8>)
 8013da8:	482b      	ldr	r0, [pc, #172]	@ (8013e58 <etharp_find_entry+0x2e0>)
 8013daa:	f003 f831 	bl	8016e10 <iprintf>
    etharp_free_entry(i);
 8013dae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7ff fe06 	bl	80139c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013db8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013dbc:	2b09      	cmp	r3, #9
 8013dbe:	dd06      	ble.n	8013dce <etharp_find_entry+0x256>
 8013dc0:	4b23      	ldr	r3, [pc, #140]	@ (8013e50 <etharp_find_entry+0x2d8>)
 8013dc2:	f240 1283 	movw	r2, #387	@ 0x183
 8013dc6:	4926      	ldr	r1, [pc, #152]	@ (8013e60 <etharp_find_entry+0x2e8>)
 8013dc8:	4823      	ldr	r0, [pc, #140]	@ (8013e58 <etharp_find_entry+0x2e0>)
 8013dca:	f003 f821 	bl	8016e10 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013dce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dd2:	491e      	ldr	r1, [pc, #120]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013dd4:	4613      	mov	r3, r2
 8013dd6:	005b      	lsls	r3, r3, #1
 8013dd8:	4413      	add	r3, r2
 8013dda:	00db      	lsls	r3, r3, #3
 8013ddc:	440b      	add	r3, r1
 8013dde:	3314      	adds	r3, #20
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d006      	beq.n	8013df4 <etharp_find_entry+0x27c>
 8013de6:	4b1a      	ldr	r3, [pc, #104]	@ (8013e50 <etharp_find_entry+0x2d8>)
 8013de8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013dec:	491d      	ldr	r1, [pc, #116]	@ (8013e64 <etharp_find_entry+0x2ec>)
 8013dee:	481a      	ldr	r0, [pc, #104]	@ (8013e58 <etharp_find_entry+0x2e0>)
 8013df0:	f003 f80e 	bl	8016e10 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d00b      	beq.n	8013e12 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013dfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	6819      	ldr	r1, [r3, #0]
 8013e02:	4812      	ldr	r0, [pc, #72]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013e04:	4613      	mov	r3, r2
 8013e06:	005b      	lsls	r3, r3, #1
 8013e08:	4413      	add	r3, r2
 8013e0a:	00db      	lsls	r3, r3, #3
 8013e0c:	4403      	add	r3, r0
 8013e0e:	3304      	adds	r3, #4
 8013e10:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013e12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e16:	490d      	ldr	r1, [pc, #52]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013e18:	4613      	mov	r3, r2
 8013e1a:	005b      	lsls	r3, r3, #1
 8013e1c:	4413      	add	r3, r2
 8013e1e:	00db      	lsls	r3, r3, #3
 8013e20:	440b      	add	r3, r1
 8013e22:	3312      	adds	r3, #18
 8013e24:	2200      	movs	r2, #0
 8013e26:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013e28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e2c:	4907      	ldr	r1, [pc, #28]	@ (8013e4c <etharp_find_entry+0x2d4>)
 8013e2e:	4613      	mov	r3, r2
 8013e30:	005b      	lsls	r3, r3, #1
 8013e32:	4413      	add	r3, r2
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	440b      	add	r3, r1
 8013e38:	3308      	adds	r3, #8
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013e3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3728      	adds	r7, #40	@ 0x28
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	2000887c 	.word	0x2000887c
 8013e50:	08019f54 	.word	0x08019f54
 8013e54:	08019f8c 	.word	0x08019f8c
 8013e58:	08019fcc 	.word	0x08019fcc
 8013e5c:	08019ff4 	.word	0x08019ff4
 8013e60:	0801a00c 	.word	0x0801a00c
 8013e64:	0801a020 	.word	0x0801a020

08013e68 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b088      	sub	sp, #32
 8013e6c:	af02      	add	r7, sp, #8
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
 8013e74:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013e7c:	2b06      	cmp	r3, #6
 8013e7e:	d006      	beq.n	8013e8e <etharp_update_arp_entry+0x26>
 8013e80:	4b48      	ldr	r3, [pc, #288]	@ (8013fa4 <etharp_update_arp_entry+0x13c>)
 8013e82:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013e86:	4948      	ldr	r1, [pc, #288]	@ (8013fa8 <etharp_update_arp_entry+0x140>)
 8013e88:	4848      	ldr	r0, [pc, #288]	@ (8013fac <etharp_update_arp_entry+0x144>)
 8013e8a:	f002 ffc1 	bl	8016e10 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d012      	beq.n	8013eba <etharp_update_arp_entry+0x52>
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d00e      	beq.n	8013eba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	68f9      	ldr	r1, [r7, #12]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f001 f8fe 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 8013ea8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d105      	bne.n	8013eba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013eb6:	2be0      	cmp	r3, #224	@ 0xe0
 8013eb8:	d102      	bne.n	8013ec0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013eba:	f06f 030f 	mvn.w	r3, #15
 8013ebe:	e06c      	b.n	8013f9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013ec0:	78fb      	ldrb	r3, [r7, #3]
 8013ec2:	68fa      	ldr	r2, [r7, #12]
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	68b8      	ldr	r0, [r7, #8]
 8013ec8:	f7ff fe56 	bl	8013b78 <etharp_find_entry>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013ed0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	da02      	bge.n	8013ede <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013ed8:	8afb      	ldrh	r3, [r7, #22]
 8013eda:	b25b      	sxtb	r3, r3
 8013edc:	e05d      	b.n	8013f9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013ede:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ee2:	4933      	ldr	r1, [pc, #204]	@ (8013fb0 <etharp_update_arp_entry+0x148>)
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	005b      	lsls	r3, r3, #1
 8013ee8:	4413      	add	r3, r2
 8013eea:	00db      	lsls	r3, r3, #3
 8013eec:	440b      	add	r3, r1
 8013eee:	3314      	adds	r3, #20
 8013ef0:	2202      	movs	r2, #2
 8013ef2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013ef4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ef8:	492d      	ldr	r1, [pc, #180]	@ (8013fb0 <etharp_update_arp_entry+0x148>)
 8013efa:	4613      	mov	r3, r2
 8013efc:	005b      	lsls	r3, r3, #1
 8013efe:	4413      	add	r3, r2
 8013f00:	00db      	lsls	r3, r3, #3
 8013f02:	440b      	add	r3, r1
 8013f04:	3308      	adds	r3, #8
 8013f06:	68fa      	ldr	r2, [r7, #12]
 8013f08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013f0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f0e:	4613      	mov	r3, r2
 8013f10:	005b      	lsls	r3, r3, #1
 8013f12:	4413      	add	r3, r2
 8013f14:	00db      	lsls	r3, r3, #3
 8013f16:	3308      	adds	r3, #8
 8013f18:	4a25      	ldr	r2, [pc, #148]	@ (8013fb0 <etharp_update_arp_entry+0x148>)
 8013f1a:	4413      	add	r3, r2
 8013f1c:	3304      	adds	r3, #4
 8013f1e:	2206      	movs	r2, #6
 8013f20:	6879      	ldr	r1, [r7, #4]
 8013f22:	4618      	mov	r0, r3
 8013f24:	f003 f84f 	bl	8016fc6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013f28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f2c:	4920      	ldr	r1, [pc, #128]	@ (8013fb0 <etharp_update_arp_entry+0x148>)
 8013f2e:	4613      	mov	r3, r2
 8013f30:	005b      	lsls	r3, r3, #1
 8013f32:	4413      	add	r3, r2
 8013f34:	00db      	lsls	r3, r3, #3
 8013f36:	440b      	add	r3, r1
 8013f38:	3312      	adds	r3, #18
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013f3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f42:	491b      	ldr	r1, [pc, #108]	@ (8013fb0 <etharp_update_arp_entry+0x148>)
 8013f44:	4613      	mov	r3, r2
 8013f46:	005b      	lsls	r3, r3, #1
 8013f48:	4413      	add	r3, r2
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	440b      	add	r3, r1
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d021      	beq.n	8013f98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013f54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f58:	4915      	ldr	r1, [pc, #84]	@ (8013fb0 <etharp_update_arp_entry+0x148>)
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	4413      	add	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	440b      	add	r3, r1
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013f68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f6c:	4910      	ldr	r1, [pc, #64]	@ (8013fb0 <etharp_update_arp_entry+0x148>)
 8013f6e:	4613      	mov	r3, r2
 8013f70:	005b      	lsls	r3, r3, #1
 8013f72:	4413      	add	r3, r2
 8013f74:	00db      	lsls	r3, r3, #3
 8013f76:	440b      	add	r3, r1
 8013f78:	2200      	movs	r2, #0
 8013f7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013f82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013f86:	9300      	str	r3, [sp, #0]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6939      	ldr	r1, [r7, #16]
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f001 ff97 	bl	8015ec0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013f92:	6938      	ldr	r0, [r7, #16]
 8013f94:	f7f9 fb2c 	bl	800d5f0 <pbuf_free>
  }
  return ERR_OK;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3718      	adds	r7, #24
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	08019f54 	.word	0x08019f54
 8013fa8:	0801a04c 	.word	0x0801a04c
 8013fac:	08019fcc 	.word	0x08019fcc
 8013fb0:	2000887c 	.word	0x2000887c

08013fb4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	60fb      	str	r3, [r7, #12]
 8013fc0:	e01e      	b.n	8014000 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013fc2:	4913      	ldr	r1, [pc, #76]	@ (8014010 <etharp_cleanup_netif+0x5c>)
 8013fc4:	68fa      	ldr	r2, [r7, #12]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	005b      	lsls	r3, r3, #1
 8013fca:	4413      	add	r3, r2
 8013fcc:	00db      	lsls	r3, r3, #3
 8013fce:	440b      	add	r3, r1
 8013fd0:	3314      	adds	r3, #20
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013fd6:	7afb      	ldrb	r3, [r7, #11]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00e      	beq.n	8013ffa <etharp_cleanup_netif+0x46>
 8013fdc:	490c      	ldr	r1, [pc, #48]	@ (8014010 <etharp_cleanup_netif+0x5c>)
 8013fde:	68fa      	ldr	r2, [r7, #12]
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	005b      	lsls	r3, r3, #1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	00db      	lsls	r3, r3, #3
 8013fe8:	440b      	add	r3, r1
 8013fea:	3308      	adds	r3, #8
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d102      	bne.n	8013ffa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f7ff fce5 	bl	80139c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	60fb      	str	r3, [r7, #12]
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2b09      	cmp	r3, #9
 8014004:	dddd      	ble.n	8013fc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014006:	bf00      	nop
 8014008:	bf00      	nop
 801400a:	3710      	adds	r7, #16
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	2000887c 	.word	0x2000887c

08014014 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014014:	b5b0      	push	{r4, r5, r7, lr}
 8014016:	b08a      	sub	sp, #40	@ 0x28
 8014018:	af04      	add	r7, sp, #16
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d107      	bne.n	8014034 <etharp_input+0x20>
 8014024:	4b3d      	ldr	r3, [pc, #244]	@ (801411c <etharp_input+0x108>)
 8014026:	f240 228a 	movw	r2, #650	@ 0x28a
 801402a:	493d      	ldr	r1, [pc, #244]	@ (8014120 <etharp_input+0x10c>)
 801402c:	483d      	ldr	r0, [pc, #244]	@ (8014124 <etharp_input+0x110>)
 801402e:	f002 feef 	bl	8016e10 <iprintf>
 8014032:	e06f      	b.n	8014114 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	685b      	ldr	r3, [r3, #4]
 8014038:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	881b      	ldrh	r3, [r3, #0]
 801403e:	b29b      	uxth	r3, r3
 8014040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014044:	d10c      	bne.n	8014060 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801404a:	2b06      	cmp	r3, #6
 801404c:	d108      	bne.n	8014060 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014052:	2b04      	cmp	r3, #4
 8014054:	d104      	bne.n	8014060 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	885b      	ldrh	r3, [r3, #2]
 801405a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801405c:	2b08      	cmp	r3, #8
 801405e:	d003      	beq.n	8014068 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f7f9 fac5 	bl	800d5f0 <pbuf_free>
    return;
 8014066:	e055      	b.n	8014114 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	330e      	adds	r3, #14
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	3318      	adds	r3, #24
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	3304      	adds	r3, #4
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d102      	bne.n	8014088 <etharp_input+0x74>
    for_us = 0;
 8014082:	2300      	movs	r3, #0
 8014084:	75fb      	strb	r3, [r7, #23]
 8014086:	e009      	b.n	801409c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014088:	68ba      	ldr	r2, [r7, #8]
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	3304      	adds	r3, #4
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	429a      	cmp	r2, r3
 8014092:	bf0c      	ite	eq
 8014094:	2301      	moveq	r3, #1
 8014096:	2300      	movne	r3, #0
 8014098:	b2db      	uxtb	r3, r3
 801409a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	f103 0208 	add.w	r2, r3, #8
 80140a2:	7dfb      	ldrb	r3, [r7, #23]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d001      	beq.n	80140ac <etharp_input+0x98>
 80140a8:	2301      	movs	r3, #1
 80140aa:	e000      	b.n	80140ae <etharp_input+0x9a>
 80140ac:	2302      	movs	r3, #2
 80140ae:	f107 010c 	add.w	r1, r7, #12
 80140b2:	6838      	ldr	r0, [r7, #0]
 80140b4:	f7ff fed8 	bl	8013e68 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	88db      	ldrh	r3, [r3, #6]
 80140bc:	b29b      	uxth	r3, r3
 80140be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80140c2:	d003      	beq.n	80140cc <etharp_input+0xb8>
 80140c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140c8:	d01e      	beq.n	8014108 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80140ca:	e020      	b.n	801410e <etharp_input+0xfa>
      if (for_us) {
 80140cc:	7dfb      	ldrb	r3, [r7, #23]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d01c      	beq.n	801410c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80140e8:	693a      	ldr	r2, [r7, #16]
 80140ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80140ec:	2102      	movs	r1, #2
 80140ee:	9103      	str	r1, [sp, #12]
 80140f0:	f107 010c 	add.w	r1, r7, #12
 80140f4:	9102      	str	r1, [sp, #8]
 80140f6:	9201      	str	r2, [sp, #4]
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	462b      	mov	r3, r5
 80140fc:	4622      	mov	r2, r4
 80140fe:	4601      	mov	r1, r0
 8014100:	6838      	ldr	r0, [r7, #0]
 8014102:	f000 faeb 	bl	80146dc <etharp_raw>
      break;
 8014106:	e001      	b.n	801410c <etharp_input+0xf8>
      break;
 8014108:	bf00      	nop
 801410a:	e000      	b.n	801410e <etharp_input+0xfa>
      break;
 801410c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f7f9 fa6e 	bl	800d5f0 <pbuf_free>
}
 8014114:	3718      	adds	r7, #24
 8014116:	46bd      	mov	sp, r7
 8014118:	bdb0      	pop	{r4, r5, r7, pc}
 801411a:	bf00      	nop
 801411c:	08019f54 	.word	0x08019f54
 8014120:	0801a0a4 	.word	0x0801a0a4
 8014124:	08019fcc 	.word	0x08019fcc

08014128 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af02      	add	r7, sp, #8
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	4613      	mov	r3, r2
 8014134:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014136:	79fa      	ldrb	r2, [r7, #7]
 8014138:	4944      	ldr	r1, [pc, #272]	@ (801424c <etharp_output_to_arp_index+0x124>)
 801413a:	4613      	mov	r3, r2
 801413c:	005b      	lsls	r3, r3, #1
 801413e:	4413      	add	r3, r2
 8014140:	00db      	lsls	r3, r3, #3
 8014142:	440b      	add	r3, r1
 8014144:	3314      	adds	r3, #20
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	2b01      	cmp	r3, #1
 801414a:	d806      	bhi.n	801415a <etharp_output_to_arp_index+0x32>
 801414c:	4b40      	ldr	r3, [pc, #256]	@ (8014250 <etharp_output_to_arp_index+0x128>)
 801414e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014152:	4940      	ldr	r1, [pc, #256]	@ (8014254 <etharp_output_to_arp_index+0x12c>)
 8014154:	4840      	ldr	r0, [pc, #256]	@ (8014258 <etharp_output_to_arp_index+0x130>)
 8014156:	f002 fe5b 	bl	8016e10 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801415a:	79fa      	ldrb	r2, [r7, #7]
 801415c:	493b      	ldr	r1, [pc, #236]	@ (801424c <etharp_output_to_arp_index+0x124>)
 801415e:	4613      	mov	r3, r2
 8014160:	005b      	lsls	r3, r3, #1
 8014162:	4413      	add	r3, r2
 8014164:	00db      	lsls	r3, r3, #3
 8014166:	440b      	add	r3, r1
 8014168:	3314      	adds	r3, #20
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	2b02      	cmp	r3, #2
 801416e:	d153      	bne.n	8014218 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014170:	79fa      	ldrb	r2, [r7, #7]
 8014172:	4936      	ldr	r1, [pc, #216]	@ (801424c <etharp_output_to_arp_index+0x124>)
 8014174:	4613      	mov	r3, r2
 8014176:	005b      	lsls	r3, r3, #1
 8014178:	4413      	add	r3, r2
 801417a:	00db      	lsls	r3, r3, #3
 801417c:	440b      	add	r3, r1
 801417e:	3312      	adds	r3, #18
 8014180:	881b      	ldrh	r3, [r3, #0]
 8014182:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014186:	d919      	bls.n	80141bc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014188:	79fa      	ldrb	r2, [r7, #7]
 801418a:	4613      	mov	r3, r2
 801418c:	005b      	lsls	r3, r3, #1
 801418e:	4413      	add	r3, r2
 8014190:	00db      	lsls	r3, r3, #3
 8014192:	4a2e      	ldr	r2, [pc, #184]	@ (801424c <etharp_output_to_arp_index+0x124>)
 8014194:	4413      	add	r3, r2
 8014196:	3304      	adds	r3, #4
 8014198:	4619      	mov	r1, r3
 801419a:	68f8      	ldr	r0, [r7, #12]
 801419c:	f000 fb4c 	bl	8014838 <etharp_request>
 80141a0:	4603      	mov	r3, r0
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d138      	bne.n	8014218 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80141a6:	79fa      	ldrb	r2, [r7, #7]
 80141a8:	4928      	ldr	r1, [pc, #160]	@ (801424c <etharp_output_to_arp_index+0x124>)
 80141aa:	4613      	mov	r3, r2
 80141ac:	005b      	lsls	r3, r3, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	00db      	lsls	r3, r3, #3
 80141b2:	440b      	add	r3, r1
 80141b4:	3314      	adds	r3, #20
 80141b6:	2203      	movs	r2, #3
 80141b8:	701a      	strb	r2, [r3, #0]
 80141ba:	e02d      	b.n	8014218 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80141bc:	79fa      	ldrb	r2, [r7, #7]
 80141be:	4923      	ldr	r1, [pc, #140]	@ (801424c <etharp_output_to_arp_index+0x124>)
 80141c0:	4613      	mov	r3, r2
 80141c2:	005b      	lsls	r3, r3, #1
 80141c4:	4413      	add	r3, r2
 80141c6:	00db      	lsls	r3, r3, #3
 80141c8:	440b      	add	r3, r1
 80141ca:	3312      	adds	r3, #18
 80141cc:	881b      	ldrh	r3, [r3, #0]
 80141ce:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80141d2:	d321      	bcc.n	8014218 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80141d4:	79fa      	ldrb	r2, [r7, #7]
 80141d6:	4613      	mov	r3, r2
 80141d8:	005b      	lsls	r3, r3, #1
 80141da:	4413      	add	r3, r2
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	4a1b      	ldr	r2, [pc, #108]	@ (801424c <etharp_output_to_arp_index+0x124>)
 80141e0:	4413      	add	r3, r2
 80141e2:	1d19      	adds	r1, r3, #4
 80141e4:	79fa      	ldrb	r2, [r7, #7]
 80141e6:	4613      	mov	r3, r2
 80141e8:	005b      	lsls	r3, r3, #1
 80141ea:	4413      	add	r3, r2
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	3308      	adds	r3, #8
 80141f0:	4a16      	ldr	r2, [pc, #88]	@ (801424c <etharp_output_to_arp_index+0x124>)
 80141f2:	4413      	add	r3, r2
 80141f4:	3304      	adds	r3, #4
 80141f6:	461a      	mov	r2, r3
 80141f8:	68f8      	ldr	r0, [r7, #12]
 80141fa:	f000 fafb 	bl	80147f4 <etharp_request_dst>
 80141fe:	4603      	mov	r3, r0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d109      	bne.n	8014218 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014204:	79fa      	ldrb	r2, [r7, #7]
 8014206:	4911      	ldr	r1, [pc, #68]	@ (801424c <etharp_output_to_arp_index+0x124>)
 8014208:	4613      	mov	r3, r2
 801420a:	005b      	lsls	r3, r3, #1
 801420c:	4413      	add	r3, r2
 801420e:	00db      	lsls	r3, r3, #3
 8014210:	440b      	add	r3, r1
 8014212:	3314      	adds	r3, #20
 8014214:	2203      	movs	r2, #3
 8014216:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801421e:	79fa      	ldrb	r2, [r7, #7]
 8014220:	4613      	mov	r3, r2
 8014222:	005b      	lsls	r3, r3, #1
 8014224:	4413      	add	r3, r2
 8014226:	00db      	lsls	r3, r3, #3
 8014228:	3308      	adds	r3, #8
 801422a:	4a08      	ldr	r2, [pc, #32]	@ (801424c <etharp_output_to_arp_index+0x124>)
 801422c:	4413      	add	r3, r2
 801422e:	3304      	adds	r3, #4
 8014230:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014234:	9200      	str	r2, [sp, #0]
 8014236:	460a      	mov	r2, r1
 8014238:	68b9      	ldr	r1, [r7, #8]
 801423a:	68f8      	ldr	r0, [r7, #12]
 801423c:	f001 fe40 	bl	8015ec0 <ethernet_output>
 8014240:	4603      	mov	r3, r0
}
 8014242:	4618      	mov	r0, r3
 8014244:	3710      	adds	r7, #16
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	2000887c 	.word	0x2000887c
 8014250:	08019f54 	.word	0x08019f54
 8014254:	0801a0c4 	.word	0x0801a0c4
 8014258:	08019fcc 	.word	0x08019fcc

0801425c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b08a      	sub	sp, #40	@ 0x28
 8014260:	af02      	add	r7, sp, #8
 8014262:	60f8      	str	r0, [r7, #12]
 8014264:	60b9      	str	r1, [r7, #8]
 8014266:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d106      	bne.n	8014280 <etharp_output+0x24>
 8014272:	4b73      	ldr	r3, [pc, #460]	@ (8014440 <etharp_output+0x1e4>)
 8014274:	f240 321e 	movw	r2, #798	@ 0x31e
 8014278:	4972      	ldr	r1, [pc, #456]	@ (8014444 <etharp_output+0x1e8>)
 801427a:	4873      	ldr	r0, [pc, #460]	@ (8014448 <etharp_output+0x1ec>)
 801427c:	f002 fdc8 	bl	8016e10 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d106      	bne.n	8014294 <etharp_output+0x38>
 8014286:	4b6e      	ldr	r3, [pc, #440]	@ (8014440 <etharp_output+0x1e4>)
 8014288:	f240 321f 	movw	r2, #799	@ 0x31f
 801428c:	496f      	ldr	r1, [pc, #444]	@ (801444c <etharp_output+0x1f0>)
 801428e:	486e      	ldr	r0, [pc, #440]	@ (8014448 <etharp_output+0x1ec>)
 8014290:	f002 fdbe 	bl	8016e10 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d106      	bne.n	80142a8 <etharp_output+0x4c>
 801429a:	4b69      	ldr	r3, [pc, #420]	@ (8014440 <etharp_output+0x1e4>)
 801429c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80142a0:	496b      	ldr	r1, [pc, #428]	@ (8014450 <etharp_output+0x1f4>)
 80142a2:	4869      	ldr	r0, [pc, #420]	@ (8014448 <etharp_output+0x1ec>)
 80142a4:	f002 fdb4 	bl	8016e10 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	68f9      	ldr	r1, [r7, #12]
 80142ae:	4618      	mov	r0, r3
 80142b0:	f000 fef8 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d002      	beq.n	80142c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80142ba:	4b66      	ldr	r3, [pc, #408]	@ (8014454 <etharp_output+0x1f8>)
 80142bc:	61fb      	str	r3, [r7, #28]
 80142be:	e0af      	b.n	8014420 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80142c8:	2be0      	cmp	r3, #224	@ 0xe0
 80142ca:	d118      	bne.n	80142fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80142cc:	2301      	movs	r3, #1
 80142ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80142d0:	2300      	movs	r3, #0
 80142d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80142d4:	235e      	movs	r3, #94	@ 0x5e
 80142d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	3301      	adds	r3, #1
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	3302      	adds	r3, #2
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	3303      	adds	r3, #3
 80142f2:	781b      	ldrb	r3, [r3, #0]
 80142f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80142f6:	f107 0310 	add.w	r3, r7, #16
 80142fa:	61fb      	str	r3, [r7, #28]
 80142fc:	e090      	b.n	8014420 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681a      	ldr	r2, [r3, #0]
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	3304      	adds	r3, #4
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	405a      	eors	r2, r3
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	3308      	adds	r3, #8
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4013      	ands	r3, r2
 8014312:	2b00      	cmp	r3, #0
 8014314:	d012      	beq.n	801433c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801431c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014320:	4293      	cmp	r3, r2
 8014322:	d00b      	beq.n	801433c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	330c      	adds	r3, #12
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d003      	beq.n	8014336 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	330c      	adds	r3, #12
 8014332:	61bb      	str	r3, [r7, #24]
 8014334:	e002      	b.n	801433c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014336:	f06f 0303 	mvn.w	r3, #3
 801433a:	e07d      	b.n	8014438 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801433c:	4b46      	ldr	r3, [pc, #280]	@ (8014458 <etharp_output+0x1fc>)
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	4619      	mov	r1, r3
 8014342:	4a46      	ldr	r2, [pc, #280]	@ (801445c <etharp_output+0x200>)
 8014344:	460b      	mov	r3, r1
 8014346:	005b      	lsls	r3, r3, #1
 8014348:	440b      	add	r3, r1
 801434a:	00db      	lsls	r3, r3, #3
 801434c:	4413      	add	r3, r2
 801434e:	3314      	adds	r3, #20
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2b01      	cmp	r3, #1
 8014354:	d925      	bls.n	80143a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014356:	4b40      	ldr	r3, [pc, #256]	@ (8014458 <etharp_output+0x1fc>)
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	4619      	mov	r1, r3
 801435c:	4a3f      	ldr	r2, [pc, #252]	@ (801445c <etharp_output+0x200>)
 801435e:	460b      	mov	r3, r1
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	440b      	add	r3, r1
 8014364:	00db      	lsls	r3, r3, #3
 8014366:	4413      	add	r3, r2
 8014368:	3308      	adds	r3, #8
 801436a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801436c:	68fa      	ldr	r2, [r7, #12]
 801436e:	429a      	cmp	r2, r3
 8014370:	d117      	bne.n	80143a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014372:	69bb      	ldr	r3, [r7, #24]
 8014374:	681a      	ldr	r2, [r3, #0]
 8014376:	4b38      	ldr	r3, [pc, #224]	@ (8014458 <etharp_output+0x1fc>)
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	4618      	mov	r0, r3
 801437c:	4937      	ldr	r1, [pc, #220]	@ (801445c <etharp_output+0x200>)
 801437e:	4603      	mov	r3, r0
 8014380:	005b      	lsls	r3, r3, #1
 8014382:	4403      	add	r3, r0
 8014384:	00db      	lsls	r3, r3, #3
 8014386:	440b      	add	r3, r1
 8014388:	3304      	adds	r3, #4
 801438a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801438c:	429a      	cmp	r2, r3
 801438e:	d108      	bne.n	80143a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014390:	4b31      	ldr	r3, [pc, #196]	@ (8014458 <etharp_output+0x1fc>)
 8014392:	781b      	ldrb	r3, [r3, #0]
 8014394:	461a      	mov	r2, r3
 8014396:	68b9      	ldr	r1, [r7, #8]
 8014398:	68f8      	ldr	r0, [r7, #12]
 801439a:	f7ff fec5 	bl	8014128 <etharp_output_to_arp_index>
 801439e:	4603      	mov	r3, r0
 80143a0:	e04a      	b.n	8014438 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80143a2:	2300      	movs	r3, #0
 80143a4:	75fb      	strb	r3, [r7, #23]
 80143a6:	e031      	b.n	801440c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80143a8:	7dfa      	ldrb	r2, [r7, #23]
 80143aa:	492c      	ldr	r1, [pc, #176]	@ (801445c <etharp_output+0x200>)
 80143ac:	4613      	mov	r3, r2
 80143ae:	005b      	lsls	r3, r3, #1
 80143b0:	4413      	add	r3, r2
 80143b2:	00db      	lsls	r3, r3, #3
 80143b4:	440b      	add	r3, r1
 80143b6:	3314      	adds	r3, #20
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d923      	bls.n	8014406 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80143be:	7dfa      	ldrb	r2, [r7, #23]
 80143c0:	4926      	ldr	r1, [pc, #152]	@ (801445c <etharp_output+0x200>)
 80143c2:	4613      	mov	r3, r2
 80143c4:	005b      	lsls	r3, r3, #1
 80143c6:	4413      	add	r3, r2
 80143c8:	00db      	lsls	r3, r3, #3
 80143ca:	440b      	add	r3, r1
 80143cc:	3308      	adds	r3, #8
 80143ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80143d0:	68fa      	ldr	r2, [r7, #12]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d117      	bne.n	8014406 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	6819      	ldr	r1, [r3, #0]
 80143da:	7dfa      	ldrb	r2, [r7, #23]
 80143dc:	481f      	ldr	r0, [pc, #124]	@ (801445c <etharp_output+0x200>)
 80143de:	4613      	mov	r3, r2
 80143e0:	005b      	lsls	r3, r3, #1
 80143e2:	4413      	add	r3, r2
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	4403      	add	r3, r0
 80143e8:	3304      	adds	r3, #4
 80143ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80143ec:	4299      	cmp	r1, r3
 80143ee:	d10a      	bne.n	8014406 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80143f0:	4a19      	ldr	r2, [pc, #100]	@ (8014458 <etharp_output+0x1fc>)
 80143f2:	7dfb      	ldrb	r3, [r7, #23]
 80143f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80143f6:	7dfb      	ldrb	r3, [r7, #23]
 80143f8:	461a      	mov	r2, r3
 80143fa:	68b9      	ldr	r1, [r7, #8]
 80143fc:	68f8      	ldr	r0, [r7, #12]
 80143fe:	f7ff fe93 	bl	8014128 <etharp_output_to_arp_index>
 8014402:	4603      	mov	r3, r0
 8014404:	e018      	b.n	8014438 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014406:	7dfb      	ldrb	r3, [r7, #23]
 8014408:	3301      	adds	r3, #1
 801440a:	75fb      	strb	r3, [r7, #23]
 801440c:	7dfb      	ldrb	r3, [r7, #23]
 801440e:	2b09      	cmp	r3, #9
 8014410:	d9ca      	bls.n	80143a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014412:	68ba      	ldr	r2, [r7, #8]
 8014414:	69b9      	ldr	r1, [r7, #24]
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	f000 f822 	bl	8014460 <etharp_query>
 801441c:	4603      	mov	r3, r0
 801441e:	e00b      	b.n	8014438 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014426:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801442a:	9300      	str	r3, [sp, #0]
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	68b9      	ldr	r1, [r7, #8]
 8014430:	68f8      	ldr	r0, [r7, #12]
 8014432:	f001 fd45 	bl	8015ec0 <ethernet_output>
 8014436:	4603      	mov	r3, r0
}
 8014438:	4618      	mov	r0, r3
 801443a:	3720      	adds	r7, #32
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}
 8014440:	08019f54 	.word	0x08019f54
 8014444:	0801a0a4 	.word	0x0801a0a4
 8014448:	08019fcc 	.word	0x08019fcc
 801444c:	0801a0f4 	.word	0x0801a0f4
 8014450:	0801a094 	.word	0x0801a094
 8014454:	0801a718 	.word	0x0801a718
 8014458:	2000896c 	.word	0x2000896c
 801445c:	2000887c 	.word	0x2000887c

08014460 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b08c      	sub	sp, #48	@ 0x30
 8014464:	af02      	add	r7, sp, #8
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	3326      	adds	r3, #38	@ 0x26
 8014470:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014472:	23ff      	movs	r3, #255	@ 0xff
 8014474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014478:	2300      	movs	r3, #0
 801447a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	68f9      	ldr	r1, [r7, #12]
 8014482:	4618      	mov	r0, r3
 8014484:	f000 fe0e 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d10c      	bne.n	80144a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014496:	2be0      	cmp	r3, #224	@ 0xe0
 8014498:	d006      	beq.n	80144a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d003      	beq.n	80144a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d102      	bne.n	80144ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80144a8:	f06f 030f 	mvn.w	r3, #15
 80144ac:	e101      	b.n	80146b2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	2101      	movs	r1, #1
 80144b2:	68b8      	ldr	r0, [r7, #8]
 80144b4:	f7ff fb60 	bl	8013b78 <etharp_find_entry>
 80144b8:	4603      	mov	r3, r0
 80144ba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80144bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	da02      	bge.n	80144ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80144c4:	8a7b      	ldrh	r3, [r7, #18]
 80144c6:	b25b      	sxtb	r3, r3
 80144c8:	e0f3      	b.n	80146b2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80144ca:	8a7b      	ldrh	r3, [r7, #18]
 80144cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80144ce:	d906      	bls.n	80144de <etharp_query+0x7e>
 80144d0:	4b7a      	ldr	r3, [pc, #488]	@ (80146bc <etharp_query+0x25c>)
 80144d2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80144d6:	497a      	ldr	r1, [pc, #488]	@ (80146c0 <etharp_query+0x260>)
 80144d8:	487a      	ldr	r0, [pc, #488]	@ (80146c4 <etharp_query+0x264>)
 80144da:	f002 fc99 	bl	8016e10 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80144de:	8a7b      	ldrh	r3, [r7, #18]
 80144e0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80144e2:	7c7a      	ldrb	r2, [r7, #17]
 80144e4:	4978      	ldr	r1, [pc, #480]	@ (80146c8 <etharp_query+0x268>)
 80144e6:	4613      	mov	r3, r2
 80144e8:	005b      	lsls	r3, r3, #1
 80144ea:	4413      	add	r3, r2
 80144ec:	00db      	lsls	r3, r3, #3
 80144ee:	440b      	add	r3, r1
 80144f0:	3314      	adds	r3, #20
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d115      	bne.n	8014524 <etharp_query+0xc4>
    is_new_entry = 1;
 80144f8:	2301      	movs	r3, #1
 80144fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80144fc:	7c7a      	ldrb	r2, [r7, #17]
 80144fe:	4972      	ldr	r1, [pc, #456]	@ (80146c8 <etharp_query+0x268>)
 8014500:	4613      	mov	r3, r2
 8014502:	005b      	lsls	r3, r3, #1
 8014504:	4413      	add	r3, r2
 8014506:	00db      	lsls	r3, r3, #3
 8014508:	440b      	add	r3, r1
 801450a:	3314      	adds	r3, #20
 801450c:	2201      	movs	r2, #1
 801450e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014510:	7c7a      	ldrb	r2, [r7, #17]
 8014512:	496d      	ldr	r1, [pc, #436]	@ (80146c8 <etharp_query+0x268>)
 8014514:	4613      	mov	r3, r2
 8014516:	005b      	lsls	r3, r3, #1
 8014518:	4413      	add	r3, r2
 801451a:	00db      	lsls	r3, r3, #3
 801451c:	440b      	add	r3, r1
 801451e:	3308      	adds	r3, #8
 8014520:	68fa      	ldr	r2, [r7, #12]
 8014522:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014524:	7c7a      	ldrb	r2, [r7, #17]
 8014526:	4968      	ldr	r1, [pc, #416]	@ (80146c8 <etharp_query+0x268>)
 8014528:	4613      	mov	r3, r2
 801452a:	005b      	lsls	r3, r3, #1
 801452c:	4413      	add	r3, r2
 801452e:	00db      	lsls	r3, r3, #3
 8014530:	440b      	add	r3, r1
 8014532:	3314      	adds	r3, #20
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	2b01      	cmp	r3, #1
 8014538:	d011      	beq.n	801455e <etharp_query+0xfe>
 801453a:	7c7a      	ldrb	r2, [r7, #17]
 801453c:	4962      	ldr	r1, [pc, #392]	@ (80146c8 <etharp_query+0x268>)
 801453e:	4613      	mov	r3, r2
 8014540:	005b      	lsls	r3, r3, #1
 8014542:	4413      	add	r3, r2
 8014544:	00db      	lsls	r3, r3, #3
 8014546:	440b      	add	r3, r1
 8014548:	3314      	adds	r3, #20
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	2b01      	cmp	r3, #1
 801454e:	d806      	bhi.n	801455e <etharp_query+0xfe>
 8014550:	4b5a      	ldr	r3, [pc, #360]	@ (80146bc <etharp_query+0x25c>)
 8014552:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014556:	495d      	ldr	r1, [pc, #372]	@ (80146cc <etharp_query+0x26c>)
 8014558:	485a      	ldr	r0, [pc, #360]	@ (80146c4 <etharp_query+0x264>)
 801455a:	f002 fc59 	bl	8016e10 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801455e:	6a3b      	ldr	r3, [r7, #32]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d102      	bne.n	801456a <etharp_query+0x10a>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d10c      	bne.n	8014584 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801456a:	68b9      	ldr	r1, [r7, #8]
 801456c:	68f8      	ldr	r0, [r7, #12]
 801456e:	f000 f963 	bl	8014838 <etharp_request>
 8014572:	4603      	mov	r3, r0
 8014574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d102      	bne.n	8014584 <etharp_query+0x124>
      return result;
 801457e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014582:	e096      	b.n	80146b2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d106      	bne.n	8014598 <etharp_query+0x138>
 801458a:	4b4c      	ldr	r3, [pc, #304]	@ (80146bc <etharp_query+0x25c>)
 801458c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014590:	494f      	ldr	r1, [pc, #316]	@ (80146d0 <etharp_query+0x270>)
 8014592:	484c      	ldr	r0, [pc, #304]	@ (80146c4 <etharp_query+0x264>)
 8014594:	f002 fc3c 	bl	8016e10 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014598:	7c7a      	ldrb	r2, [r7, #17]
 801459a:	494b      	ldr	r1, [pc, #300]	@ (80146c8 <etharp_query+0x268>)
 801459c:	4613      	mov	r3, r2
 801459e:	005b      	lsls	r3, r3, #1
 80145a0:	4413      	add	r3, r2
 80145a2:	00db      	lsls	r3, r3, #3
 80145a4:	440b      	add	r3, r1
 80145a6:	3314      	adds	r3, #20
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	2b01      	cmp	r3, #1
 80145ac:	d917      	bls.n	80145de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80145ae:	4a49      	ldr	r2, [pc, #292]	@ (80146d4 <etharp_query+0x274>)
 80145b0:	7c7b      	ldrb	r3, [r7, #17]
 80145b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80145b4:	7c7a      	ldrb	r2, [r7, #17]
 80145b6:	4613      	mov	r3, r2
 80145b8:	005b      	lsls	r3, r3, #1
 80145ba:	4413      	add	r3, r2
 80145bc:	00db      	lsls	r3, r3, #3
 80145be:	3308      	adds	r3, #8
 80145c0:	4a41      	ldr	r2, [pc, #260]	@ (80146c8 <etharp_query+0x268>)
 80145c2:	4413      	add	r3, r2
 80145c4:	3304      	adds	r3, #4
 80145c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80145ca:	9200      	str	r2, [sp, #0]
 80145cc:	697a      	ldr	r2, [r7, #20]
 80145ce:	6879      	ldr	r1, [r7, #4]
 80145d0:	68f8      	ldr	r0, [r7, #12]
 80145d2:	f001 fc75 	bl	8015ec0 <ethernet_output>
 80145d6:	4603      	mov	r3, r0
 80145d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80145dc:	e067      	b.n	80146ae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80145de:	7c7a      	ldrb	r2, [r7, #17]
 80145e0:	4939      	ldr	r1, [pc, #228]	@ (80146c8 <etharp_query+0x268>)
 80145e2:	4613      	mov	r3, r2
 80145e4:	005b      	lsls	r3, r3, #1
 80145e6:	4413      	add	r3, r2
 80145e8:	00db      	lsls	r3, r3, #3
 80145ea:	440b      	add	r3, r1
 80145ec:	3314      	adds	r3, #20
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d15c      	bne.n	80146ae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80145f4:	2300      	movs	r3, #0
 80145f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80145fc:	e01c      	b.n	8014638 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80145fe:	69fb      	ldr	r3, [r7, #28]
 8014600:	895a      	ldrh	r2, [r3, #10]
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	891b      	ldrh	r3, [r3, #8]
 8014606:	429a      	cmp	r2, r3
 8014608:	d10a      	bne.n	8014620 <etharp_query+0x1c0>
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d006      	beq.n	8014620 <etharp_query+0x1c0>
 8014612:	4b2a      	ldr	r3, [pc, #168]	@ (80146bc <etharp_query+0x25c>)
 8014614:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014618:	492f      	ldr	r1, [pc, #188]	@ (80146d8 <etharp_query+0x278>)
 801461a:	482a      	ldr	r0, [pc, #168]	@ (80146c4 <etharp_query+0x264>)
 801461c:	f002 fbf8 	bl	8016e10 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	7b1b      	ldrb	r3, [r3, #12]
 8014624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014628:	2b00      	cmp	r3, #0
 801462a:	d002      	beq.n	8014632 <etharp_query+0x1d2>
        copy_needed = 1;
 801462c:	2301      	movs	r3, #1
 801462e:	61bb      	str	r3, [r7, #24]
        break;
 8014630:	e005      	b.n	801463e <etharp_query+0x1de>
      }
      p = p->next;
 8014632:	69fb      	ldr	r3, [r7, #28]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d1df      	bne.n	80145fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d007      	beq.n	8014654 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801464a:	200e      	movs	r0, #14
 801464c:	f7f9 fa3c 	bl	800dac8 <pbuf_clone>
 8014650:	61f8      	str	r0, [r7, #28]
 8014652:	e004      	b.n	801465e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014658:	69f8      	ldr	r0, [r7, #28]
 801465a:	f7f9 f869 	bl	800d730 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801465e:	69fb      	ldr	r3, [r7, #28]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d021      	beq.n	80146a8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014664:	7c7a      	ldrb	r2, [r7, #17]
 8014666:	4918      	ldr	r1, [pc, #96]	@ (80146c8 <etharp_query+0x268>)
 8014668:	4613      	mov	r3, r2
 801466a:	005b      	lsls	r3, r3, #1
 801466c:	4413      	add	r3, r2
 801466e:	00db      	lsls	r3, r3, #3
 8014670:	440b      	add	r3, r1
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d00a      	beq.n	801468e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014678:	7c7a      	ldrb	r2, [r7, #17]
 801467a:	4913      	ldr	r1, [pc, #76]	@ (80146c8 <etharp_query+0x268>)
 801467c:	4613      	mov	r3, r2
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	4413      	add	r3, r2
 8014682:	00db      	lsls	r3, r3, #3
 8014684:	440b      	add	r3, r1
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	4618      	mov	r0, r3
 801468a:	f7f8 ffb1 	bl	800d5f0 <pbuf_free>
      }
      arp_table[i].q = p;
 801468e:	7c7a      	ldrb	r2, [r7, #17]
 8014690:	490d      	ldr	r1, [pc, #52]	@ (80146c8 <etharp_query+0x268>)
 8014692:	4613      	mov	r3, r2
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	4413      	add	r3, r2
 8014698:	00db      	lsls	r3, r3, #3
 801469a:	440b      	add	r3, r1
 801469c:	69fa      	ldr	r2, [r7, #28]
 801469e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80146a0:	2300      	movs	r3, #0
 80146a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80146a6:	e002      	b.n	80146ae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80146a8:	23ff      	movs	r3, #255	@ 0xff
 80146aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80146ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3728      	adds	r7, #40	@ 0x28
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	08019f54 	.word	0x08019f54
 80146c0:	0801a100 	.word	0x0801a100
 80146c4:	08019fcc 	.word	0x08019fcc
 80146c8:	2000887c 	.word	0x2000887c
 80146cc:	0801a110 	.word	0x0801a110
 80146d0:	0801a0f4 	.word	0x0801a0f4
 80146d4:	2000896c 	.word	0x2000896c
 80146d8:	0801a138 	.word	0x0801a138

080146dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b08a      	sub	sp, #40	@ 0x28
 80146e0:	af02      	add	r7, sp, #8
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	60b9      	str	r1, [r7, #8]
 80146e6:	607a      	str	r2, [r7, #4]
 80146e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80146ea:	2300      	movs	r3, #0
 80146ec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d106      	bne.n	8014702 <etharp_raw+0x26>
 80146f4:	4b3a      	ldr	r3, [pc, #232]	@ (80147e0 <etharp_raw+0x104>)
 80146f6:	f240 4257 	movw	r2, #1111	@ 0x457
 80146fa:	493a      	ldr	r1, [pc, #232]	@ (80147e4 <etharp_raw+0x108>)
 80146fc:	483a      	ldr	r0, [pc, #232]	@ (80147e8 <etharp_raw+0x10c>)
 80146fe:	f002 fb87 	bl	8016e10 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014702:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014706:	211c      	movs	r1, #28
 8014708:	200e      	movs	r0, #14
 801470a:	f7f8 fc8d 	bl	800d028 <pbuf_alloc>
 801470e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d102      	bne.n	801471c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014716:	f04f 33ff 	mov.w	r3, #4294967295
 801471a:	e05d      	b.n	80147d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801471c:	69bb      	ldr	r3, [r7, #24]
 801471e:	895b      	ldrh	r3, [r3, #10]
 8014720:	2b1b      	cmp	r3, #27
 8014722:	d806      	bhi.n	8014732 <etharp_raw+0x56>
 8014724:	4b2e      	ldr	r3, [pc, #184]	@ (80147e0 <etharp_raw+0x104>)
 8014726:	f240 4262 	movw	r2, #1122	@ 0x462
 801472a:	4930      	ldr	r1, [pc, #192]	@ (80147ec <etharp_raw+0x110>)
 801472c:	482e      	ldr	r0, [pc, #184]	@ (80147e8 <etharp_raw+0x10c>)
 801472e:	f002 fb6f 	bl	8016e10 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014732:	69bb      	ldr	r3, [r7, #24]
 8014734:	685b      	ldr	r3, [r3, #4]
 8014736:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014738:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801473a:	4618      	mov	r0, r3
 801473c:	f7f7 fbfe 	bl	800bf3c <lwip_htons>
 8014740:	4603      	mov	r3, r0
 8014742:	461a      	mov	r2, r3
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801474e:	2b06      	cmp	r3, #6
 8014750:	d006      	beq.n	8014760 <etharp_raw+0x84>
 8014752:	4b23      	ldr	r3, [pc, #140]	@ (80147e0 <etharp_raw+0x104>)
 8014754:	f240 4269 	movw	r2, #1129	@ 0x469
 8014758:	4925      	ldr	r1, [pc, #148]	@ (80147f0 <etharp_raw+0x114>)
 801475a:	4823      	ldr	r0, [pc, #140]	@ (80147e8 <etharp_raw+0x10c>)
 801475c:	f002 fb58 	bl	8016e10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014760:	697b      	ldr	r3, [r7, #20]
 8014762:	3308      	adds	r3, #8
 8014764:	2206      	movs	r2, #6
 8014766:	6839      	ldr	r1, [r7, #0]
 8014768:	4618      	mov	r0, r3
 801476a:	f002 fc2c 	bl	8016fc6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	3312      	adds	r3, #18
 8014772:	2206      	movs	r2, #6
 8014774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014776:	4618      	mov	r0, r3
 8014778:	f002 fc25 	bl	8016fc6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	330e      	adds	r3, #14
 8014780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014782:	6812      	ldr	r2, [r2, #0]
 8014784:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	3318      	adds	r3, #24
 801478a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801478c:	6812      	ldr	r2, [r2, #0]
 801478e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	2200      	movs	r2, #0
 8014794:	701a      	strb	r2, [r3, #0]
 8014796:	2200      	movs	r2, #0
 8014798:	f042 0201 	orr.w	r2, r2, #1
 801479c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	2200      	movs	r2, #0
 80147a2:	f042 0208 	orr.w	r2, r2, #8
 80147a6:	709a      	strb	r2, [r3, #2]
 80147a8:	2200      	movs	r2, #0
 80147aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	2206      	movs	r2, #6
 80147b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	2204      	movs	r2, #4
 80147b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80147b8:	f640 0306 	movw	r3, #2054	@ 0x806
 80147bc:	9300      	str	r3, [sp, #0]
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	69b9      	ldr	r1, [r7, #24]
 80147c4:	68f8      	ldr	r0, [r7, #12]
 80147c6:	f001 fb7b 	bl	8015ec0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80147ca:	69b8      	ldr	r0, [r7, #24]
 80147cc:	f7f8 ff10 	bl	800d5f0 <pbuf_free>
  p = NULL;
 80147d0:	2300      	movs	r3, #0
 80147d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80147d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3720      	adds	r7, #32
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}
 80147e0:	08019f54 	.word	0x08019f54
 80147e4:	0801a0a4 	.word	0x0801a0a4
 80147e8:	08019fcc 	.word	0x08019fcc
 80147ec:	0801a154 	.word	0x0801a154
 80147f0:	0801a188 	.word	0x0801a188

080147f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b088      	sub	sp, #32
 80147f8:	af04      	add	r7, sp, #16
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014810:	2201      	movs	r2, #1
 8014812:	9203      	str	r2, [sp, #12]
 8014814:	68ba      	ldr	r2, [r7, #8]
 8014816:	9202      	str	r2, [sp, #8]
 8014818:	4a06      	ldr	r2, [pc, #24]	@ (8014834 <etharp_request_dst+0x40>)
 801481a:	9201      	str	r2, [sp, #4]
 801481c:	9300      	str	r3, [sp, #0]
 801481e:	4603      	mov	r3, r0
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	68f8      	ldr	r0, [r7, #12]
 8014824:	f7ff ff5a 	bl	80146dc <etharp_raw>
 8014828:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801482a:	4618      	mov	r0, r3
 801482c:	3710      	adds	r7, #16
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}
 8014832:	bf00      	nop
 8014834:	0801a720 	.word	0x0801a720

08014838 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014842:	4a05      	ldr	r2, [pc, #20]	@ (8014858 <etharp_request+0x20>)
 8014844:	6839      	ldr	r1, [r7, #0]
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f7ff ffd4 	bl	80147f4 <etharp_request_dst>
 801484c:	4603      	mov	r3, r0
}
 801484e:	4618      	mov	r0, r3
 8014850:	3708      	adds	r7, #8
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	0801a718 	.word	0x0801a718

0801485c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b08e      	sub	sp, #56	@ 0x38
 8014860:	af04      	add	r7, sp, #16
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014866:	4b79      	ldr	r3, [pc, #484]	@ (8014a4c <icmp_input+0x1f0>)
 8014868:	689b      	ldr	r3, [r3, #8]
 801486a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	f003 030f 	and.w	r3, r3, #15
 8014874:	b2db      	uxtb	r3, r3
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	b2db      	uxtb	r3, r3
 801487a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801487c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801487e:	2b13      	cmp	r3, #19
 8014880:	f240 80cd 	bls.w	8014a1e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	895b      	ldrh	r3, [r3, #10]
 8014888:	2b03      	cmp	r3, #3
 801488a:	f240 80ca 	bls.w	8014a22 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014898:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801489c:	2b00      	cmp	r3, #0
 801489e:	f000 80b7 	beq.w	8014a10 <icmp_input+0x1b4>
 80148a2:	2b08      	cmp	r3, #8
 80148a4:	f040 80b7 	bne.w	8014a16 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80148a8:	4b69      	ldr	r3, [pc, #420]	@ (8014a50 <icmp_input+0x1f4>)
 80148aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80148ac:	4b67      	ldr	r3, [pc, #412]	@ (8014a4c <icmp_input+0x1f0>)
 80148ae:	695b      	ldr	r3, [r3, #20]
 80148b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80148b4:	2be0      	cmp	r3, #224	@ 0xe0
 80148b6:	f000 80bb 	beq.w	8014a30 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80148ba:	4b64      	ldr	r3, [pc, #400]	@ (8014a4c <icmp_input+0x1f0>)
 80148bc:	695b      	ldr	r3, [r3, #20]
 80148be:	4a63      	ldr	r2, [pc, #396]	@ (8014a4c <icmp_input+0x1f0>)
 80148c0:	6812      	ldr	r2, [r2, #0]
 80148c2:	4611      	mov	r1, r2
 80148c4:	4618      	mov	r0, r3
 80148c6:	f000 fbed 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f040 80b1 	bne.w	8014a34 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	891b      	ldrh	r3, [r3, #8]
 80148d6:	2b07      	cmp	r3, #7
 80148d8:	f240 80a5 	bls.w	8014a26 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80148dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148de:	330e      	adds	r3, #14
 80148e0:	4619      	mov	r1, r3
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7f8 fdee 	bl	800d4c4 <pbuf_add_header>
 80148e8:	4603      	mov	r3, r0
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d04b      	beq.n	8014986 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	891a      	ldrh	r2, [r3, #8]
 80148f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148f4:	4413      	add	r3, r2
 80148f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	891b      	ldrh	r3, [r3, #8]
 80148fc:	8b7a      	ldrh	r2, [r7, #26]
 80148fe:	429a      	cmp	r2, r3
 8014900:	f0c0 809a 	bcc.w	8014a38 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014904:	8b7b      	ldrh	r3, [r7, #26]
 8014906:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801490a:	4619      	mov	r1, r3
 801490c:	200e      	movs	r0, #14
 801490e:	f7f8 fb8b 	bl	800d028 <pbuf_alloc>
 8014912:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	2b00      	cmp	r3, #0
 8014918:	f000 8090 	beq.w	8014a3c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	895b      	ldrh	r3, [r3, #10]
 8014920:	461a      	mov	r2, r3
 8014922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014924:	3308      	adds	r3, #8
 8014926:	429a      	cmp	r2, r3
 8014928:	d203      	bcs.n	8014932 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801492a:	6978      	ldr	r0, [r7, #20]
 801492c:	f7f8 fe60 	bl	800d5f0 <pbuf_free>
          goto icmperr;
 8014930:	e085      	b.n	8014a3e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	685b      	ldr	r3, [r3, #4]
 8014936:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801493a:	4618      	mov	r0, r3
 801493c:	f002 fb43 	bl	8016fc6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014940:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014942:	4619      	mov	r1, r3
 8014944:	6978      	ldr	r0, [r7, #20]
 8014946:	f7f8 fdcd 	bl	800d4e4 <pbuf_remove_header>
 801494a:	4603      	mov	r3, r0
 801494c:	2b00      	cmp	r3, #0
 801494e:	d009      	beq.n	8014964 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014950:	4b40      	ldr	r3, [pc, #256]	@ (8014a54 <icmp_input+0x1f8>)
 8014952:	22b6      	movs	r2, #182	@ 0xb6
 8014954:	4940      	ldr	r1, [pc, #256]	@ (8014a58 <icmp_input+0x1fc>)
 8014956:	4841      	ldr	r0, [pc, #260]	@ (8014a5c <icmp_input+0x200>)
 8014958:	f002 fa5a 	bl	8016e10 <iprintf>
          pbuf_free(r);
 801495c:	6978      	ldr	r0, [r7, #20]
 801495e:	f7f8 fe47 	bl	800d5f0 <pbuf_free>
          goto icmperr;
 8014962:	e06c      	b.n	8014a3e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014964:	6879      	ldr	r1, [r7, #4]
 8014966:	6978      	ldr	r0, [r7, #20]
 8014968:	f7f8 ff6a 	bl	800d840 <pbuf_copy>
 801496c:	4603      	mov	r3, r0
 801496e:	2b00      	cmp	r3, #0
 8014970:	d003      	beq.n	801497a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014972:	6978      	ldr	r0, [r7, #20]
 8014974:	f7f8 fe3c 	bl	800d5f0 <pbuf_free>
          goto icmperr;
 8014978:	e061      	b.n	8014a3e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f7f8 fe38 	bl	800d5f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	607b      	str	r3, [r7, #4]
 8014984:	e00f      	b.n	80149a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014986:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014988:	330e      	adds	r3, #14
 801498a:	4619      	mov	r1, r3
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f7f8 fda9 	bl	800d4e4 <pbuf_remove_header>
 8014992:	4603      	mov	r3, r0
 8014994:	2b00      	cmp	r3, #0
 8014996:	d006      	beq.n	80149a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014998:	4b2e      	ldr	r3, [pc, #184]	@ (8014a54 <icmp_input+0x1f8>)
 801499a:	22c7      	movs	r2, #199	@ 0xc7
 801499c:	4930      	ldr	r1, [pc, #192]	@ (8014a60 <icmp_input+0x204>)
 801499e:	482f      	ldr	r0, [pc, #188]	@ (8014a5c <icmp_input+0x200>)
 80149a0:	f002 fa36 	bl	8016e10 <iprintf>
          goto icmperr;
 80149a4:	e04b      	b.n	8014a3e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80149ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80149ae:	4619      	mov	r1, r3
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f7f8 fd87 	bl	800d4c4 <pbuf_add_header>
 80149b6:	4603      	mov	r3, r0
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d12b      	bne.n	8014a14 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80149c2:	69fb      	ldr	r3, [r7, #28]
 80149c4:	681a      	ldr	r2, [r3, #0]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80149ca:	4b20      	ldr	r3, [pc, #128]	@ (8014a4c <icmp_input+0x1f0>)
 80149cc:	691a      	ldr	r2, [r3, #16]
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	2200      	movs	r2, #0
 80149d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	2200      	movs	r2, #0
 80149dc:	709a      	strb	r2, [r3, #2]
 80149de:	2200      	movs	r2, #0
 80149e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	22ff      	movs	r2, #255	@ 0xff
 80149e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2200      	movs	r2, #0
 80149ec:	729a      	strb	r2, [r3, #10]
 80149ee:	2200      	movs	r2, #0
 80149f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	9302      	str	r3, [sp, #8]
 80149f6:	2301      	movs	r3, #1
 80149f8:	9301      	str	r3, [sp, #4]
 80149fa:	2300      	movs	r3, #0
 80149fc:	9300      	str	r3, [sp, #0]
 80149fe:	23ff      	movs	r3, #255	@ 0xff
 8014a00:	2200      	movs	r2, #0
 8014a02:	69f9      	ldr	r1, [r7, #28]
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 fa75 	bl	8014ef4 <ip4_output_if>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014a0e:	e001      	b.n	8014a14 <icmp_input+0x1b8>
      break;
 8014a10:	bf00      	nop
 8014a12:	e000      	b.n	8014a16 <icmp_input+0x1ba>
      break;
 8014a14:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f7f8 fdea 	bl	800d5f0 <pbuf_free>
  return;
 8014a1c:	e013      	b.n	8014a46 <icmp_input+0x1ea>
    goto lenerr;
 8014a1e:	bf00      	nop
 8014a20:	e002      	b.n	8014a28 <icmp_input+0x1cc>
    goto lenerr;
 8014a22:	bf00      	nop
 8014a24:	e000      	b.n	8014a28 <icmp_input+0x1cc>
        goto lenerr;
 8014a26:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7f8 fde1 	bl	800d5f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014a2e:	e00a      	b.n	8014a46 <icmp_input+0x1ea>
        goto icmperr;
 8014a30:	bf00      	nop
 8014a32:	e004      	b.n	8014a3e <icmp_input+0x1e2>
        goto icmperr;
 8014a34:	bf00      	nop
 8014a36:	e002      	b.n	8014a3e <icmp_input+0x1e2>
          goto icmperr;
 8014a38:	bf00      	nop
 8014a3a:	e000      	b.n	8014a3e <icmp_input+0x1e2>
          goto icmperr;
 8014a3c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f7f8 fdd6 	bl	800d5f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014a44:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014a46:	3728      	adds	r7, #40	@ 0x28
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	20005900 	.word	0x20005900
 8014a50:	20005914 	.word	0x20005914
 8014a54:	0801a1cc 	.word	0x0801a1cc
 8014a58:	0801a204 	.word	0x0801a204
 8014a5c:	0801a23c 	.word	0x0801a23c
 8014a60:	0801a264 	.word	0x0801a264

08014a64 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	460b      	mov	r3, r1
 8014a6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014a70:	78fb      	ldrb	r3, [r7, #3]
 8014a72:	461a      	mov	r2, r3
 8014a74:	2103      	movs	r1, #3
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f000 f814 	bl	8014aa4 <icmp_send_response>
}
 8014a7c:	bf00      	nop
 8014a7e:	3708      	adds	r7, #8
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}

08014a84 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
 8014a8c:	460b      	mov	r3, r1
 8014a8e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014a90:	78fb      	ldrb	r3, [r7, #3]
 8014a92:	461a      	mov	r2, r3
 8014a94:	210b      	movs	r1, #11
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f000 f804 	bl	8014aa4 <icmp_send_response>
}
 8014a9c:	bf00      	nop
 8014a9e:	3708      	adds	r7, #8
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}

08014aa4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b08c      	sub	sp, #48	@ 0x30
 8014aa8:	af04      	add	r7, sp, #16
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	460b      	mov	r3, r1
 8014aae:	70fb      	strb	r3, [r7, #3]
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014ab4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014ab8:	2124      	movs	r1, #36	@ 0x24
 8014aba:	2022      	movs	r0, #34	@ 0x22
 8014abc:	f7f8 fab4 	bl	800d028 <pbuf_alloc>
 8014ac0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d04c      	beq.n	8014b62 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	895b      	ldrh	r3, [r3, #10]
 8014acc:	2b23      	cmp	r3, #35	@ 0x23
 8014ace:	d806      	bhi.n	8014ade <icmp_send_response+0x3a>
 8014ad0:	4b26      	ldr	r3, [pc, #152]	@ (8014b6c <icmp_send_response+0xc8>)
 8014ad2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014ad6:	4926      	ldr	r1, [pc, #152]	@ (8014b70 <icmp_send_response+0xcc>)
 8014ad8:	4826      	ldr	r0, [pc, #152]	@ (8014b74 <icmp_send_response+0xd0>)
 8014ada:	f002 f999 	bl	8016e10 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	685b      	ldr	r3, [r3, #4]
 8014ae2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	78fa      	ldrb	r2, [r7, #3]
 8014aee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	78ba      	ldrb	r2, [r7, #2]
 8014af4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	2200      	movs	r2, #0
 8014afa:	711a      	strb	r2, [r3, #4]
 8014afc:	2200      	movs	r2, #0
 8014afe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	2200      	movs	r2, #0
 8014b04:	719a      	strb	r2, [r3, #6]
 8014b06:	2200      	movs	r2, #0
 8014b08:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014b0a:	69fb      	ldr	r3, [r7, #28]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	f103 0008 	add.w	r0, r3, #8
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	221c      	movs	r2, #28
 8014b18:	4619      	mov	r1, r3
 8014b1a:	f002 fa54 	bl	8016fc6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014b1e:	69bb      	ldr	r3, [r7, #24]
 8014b20:	68db      	ldr	r3, [r3, #12]
 8014b22:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014b24:	f107 030c 	add.w	r3, r7, #12
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f000 f825 	bl	8014b78 <ip4_route>
 8014b2e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014b30:	693b      	ldr	r3, [r7, #16]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d011      	beq.n	8014b5a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	709a      	strb	r2, [r3, #2]
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014b40:	f107 020c 	add.w	r2, r7, #12
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	9302      	str	r3, [sp, #8]
 8014b48:	2301      	movs	r3, #1
 8014b4a:	9301      	str	r3, [sp, #4]
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	9300      	str	r3, [sp, #0]
 8014b50:	23ff      	movs	r3, #255	@ 0xff
 8014b52:	2100      	movs	r1, #0
 8014b54:	69f8      	ldr	r0, [r7, #28]
 8014b56:	f000 f9cd 	bl	8014ef4 <ip4_output_if>
  }
  pbuf_free(q);
 8014b5a:	69f8      	ldr	r0, [r7, #28]
 8014b5c:	f7f8 fd48 	bl	800d5f0 <pbuf_free>
 8014b60:	e000      	b.n	8014b64 <icmp_send_response+0xc0>
    return;
 8014b62:	bf00      	nop
}
 8014b64:	3720      	adds	r7, #32
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	0801a1cc 	.word	0x0801a1cc
 8014b70:	0801a298 	.word	0x0801a298
 8014b74:	0801a23c 	.word	0x0801a23c

08014b78 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014b78:	b480      	push	{r7}
 8014b7a:	b085      	sub	sp, #20
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014b80:	4b33      	ldr	r3, [pc, #204]	@ (8014c50 <ip4_route+0xd8>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	60fb      	str	r3, [r7, #12]
 8014b86:	e036      	b.n	8014bf6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b8e:	f003 0301 	and.w	r3, r3, #1
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d02b      	beq.n	8014bf0 <ip4_route+0x78>
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b9e:	089b      	lsrs	r3, r3, #2
 8014ba0:	f003 0301 	and.w	r3, r3, #1
 8014ba4:	b2db      	uxtb	r3, r3
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d022      	beq.n	8014bf0 <ip4_route+0x78>
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	3304      	adds	r3, #4
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d01d      	beq.n	8014bf0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	3304      	adds	r3, #4
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	405a      	eors	r2, r3
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	3308      	adds	r3, #8
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	4013      	ands	r3, r2
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d101      	bne.n	8014bd0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	e038      	b.n	8014c42 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014bd6:	f003 0302 	and.w	r3, r3, #2
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d108      	bne.n	8014bf0 <ip4_route+0x78>
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	330c      	adds	r3, #12
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d101      	bne.n	8014bf0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	e028      	b.n	8014c42 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	60fb      	str	r3, [r7, #12]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d1c5      	bne.n	8014b88 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014bfc:	4b15      	ldr	r3, [pc, #84]	@ (8014c54 <ip4_route+0xdc>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d01a      	beq.n	8014c3a <ip4_route+0xc2>
 8014c04:	4b13      	ldr	r3, [pc, #76]	@ (8014c54 <ip4_route+0xdc>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c0c:	f003 0301 	and.w	r3, r3, #1
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d012      	beq.n	8014c3a <ip4_route+0xc2>
 8014c14:	4b0f      	ldr	r3, [pc, #60]	@ (8014c54 <ip4_route+0xdc>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c1c:	f003 0304 	and.w	r3, r3, #4
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d00a      	beq.n	8014c3a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014c24:	4b0b      	ldr	r3, [pc, #44]	@ (8014c54 <ip4_route+0xdc>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	3304      	adds	r3, #4
 8014c2a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d004      	beq.n	8014c3a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	b2db      	uxtb	r3, r3
 8014c36:	2b7f      	cmp	r3, #127	@ 0x7f
 8014c38:	d101      	bne.n	8014c3e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	e001      	b.n	8014c42 <ip4_route+0xca>
  }

  return netif_default;
 8014c3e:	4b05      	ldr	r3, [pc, #20]	@ (8014c54 <ip4_route+0xdc>)
 8014c40:	681b      	ldr	r3, [r3, #0]
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3714      	adds	r7, #20
 8014c46:	46bd      	mov	sp, r7
 8014c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4c:	4770      	bx	lr
 8014c4e:	bf00      	nop
 8014c50:	20008810 	.word	0x20008810
 8014c54:	20008814 	.word	0x20008814

08014c58 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c66:	f003 0301 	and.w	r3, r3, #1
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d016      	beq.n	8014c9e <ip4_input_accept+0x46>
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	3304      	adds	r3, #4
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d011      	beq.n	8014c9e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8014ca8 <ip4_input_accept+0x50>)
 8014c7c:	695a      	ldr	r2, [r3, #20]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	3304      	adds	r3, #4
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d008      	beq.n	8014c9a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014c88:	4b07      	ldr	r3, [pc, #28]	@ (8014ca8 <ip4_input_accept+0x50>)
 8014c8a:	695b      	ldr	r3, [r3, #20]
 8014c8c:	6879      	ldr	r1, [r7, #4]
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f000 fa08 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 8014c94:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d001      	beq.n	8014c9e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	e000      	b.n	8014ca0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014c9e:	2300      	movs	r3, #0
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3708      	adds	r7, #8
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}
 8014ca8:	20005900 	.word	0x20005900

08014cac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b086      	sub	sp, #24
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	781b      	ldrb	r3, [r3, #0]
 8014cc0:	091b      	lsrs	r3, r3, #4
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	2b04      	cmp	r3, #4
 8014cc6:	d004      	beq.n	8014cd2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f7f8 fc91 	bl	800d5f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	e107      	b.n	8014ee2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014cd2:	697b      	ldr	r3, [r7, #20]
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	f003 030f 	and.w	r3, r3, #15
 8014cda:	b2db      	uxtb	r3, r3
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	885b      	ldrh	r3, [r3, #2]
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7f7 f927 	bl	800bf3c <lwip_htons>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	891b      	ldrh	r3, [r3, #8]
 8014cf6:	89ba      	ldrh	r2, [r7, #12]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d204      	bcs.n	8014d06 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014cfc:	89bb      	ldrh	r3, [r7, #12]
 8014cfe:	4619      	mov	r1, r3
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f7f8 faef 	bl	800d2e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	895b      	ldrh	r3, [r3, #10]
 8014d0a:	89fa      	ldrh	r2, [r7, #14]
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d807      	bhi.n	8014d20 <ip4_input+0x74>
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	891b      	ldrh	r3, [r3, #8]
 8014d14:	89ba      	ldrh	r2, [r7, #12]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d802      	bhi.n	8014d20 <ip4_input+0x74>
 8014d1a:	89fb      	ldrh	r3, [r7, #14]
 8014d1c:	2b13      	cmp	r3, #19
 8014d1e:	d804      	bhi.n	8014d2a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f7f8 fc65 	bl	800d5f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014d26:	2300      	movs	r3, #0
 8014d28:	e0db      	b.n	8014ee2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014d2a:	697b      	ldr	r3, [r7, #20]
 8014d2c:	691b      	ldr	r3, [r3, #16]
 8014d2e:	4a6f      	ldr	r2, [pc, #444]	@ (8014eec <ip4_input+0x240>)
 8014d30:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	4a6d      	ldr	r2, [pc, #436]	@ (8014eec <ip4_input+0x240>)
 8014d38:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8014eec <ip4_input+0x240>)
 8014d3c:	695b      	ldr	r3, [r3, #20]
 8014d3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014d42:	2be0      	cmp	r3, #224	@ 0xe0
 8014d44:	d112      	bne.n	8014d6c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d4c:	f003 0301 	and.w	r3, r3, #1
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d007      	beq.n	8014d66 <ip4_input+0xba>
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	3304      	adds	r3, #4
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d002      	beq.n	8014d66 <ip4_input+0xba>
      netif = inp;
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	613b      	str	r3, [r7, #16]
 8014d64:	e02a      	b.n	8014dbc <ip4_input+0x110>
    } else {
      netif = NULL;
 8014d66:	2300      	movs	r3, #0
 8014d68:	613b      	str	r3, [r7, #16]
 8014d6a:	e027      	b.n	8014dbc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014d6c:	6838      	ldr	r0, [r7, #0]
 8014d6e:	f7ff ff73 	bl	8014c58 <ip4_input_accept>
 8014d72:	4603      	mov	r3, r0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d002      	beq.n	8014d7e <ip4_input+0xd2>
      netif = inp;
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	613b      	str	r3, [r7, #16]
 8014d7c:	e01e      	b.n	8014dbc <ip4_input+0x110>
    } else {
      netif = NULL;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014d82:	4b5a      	ldr	r3, [pc, #360]	@ (8014eec <ip4_input+0x240>)
 8014d84:	695b      	ldr	r3, [r3, #20]
 8014d86:	b2db      	uxtb	r3, r3
 8014d88:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d8a:	d017      	beq.n	8014dbc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014d8c:	4b58      	ldr	r3, [pc, #352]	@ (8014ef0 <ip4_input+0x244>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	613b      	str	r3, [r7, #16]
 8014d92:	e00e      	b.n	8014db2 <ip4_input+0x106>
          if (netif == inp) {
 8014d94:	693a      	ldr	r2, [r7, #16]
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d006      	beq.n	8014daa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014d9c:	6938      	ldr	r0, [r7, #16]
 8014d9e:	f7ff ff5b 	bl	8014c58 <ip4_input_accept>
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d108      	bne.n	8014dba <ip4_input+0x10e>
 8014da8:	e000      	b.n	8014dac <ip4_input+0x100>
            continue;
 8014daa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	613b      	str	r3, [r7, #16]
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d1ed      	bne.n	8014d94 <ip4_input+0xe8>
 8014db8:	e000      	b.n	8014dbc <ip4_input+0x110>
            break;
 8014dba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8014eec <ip4_input+0x240>)
 8014dbe:	691b      	ldr	r3, [r3, #16]
 8014dc0:	6839      	ldr	r1, [r7, #0]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f000 f96e 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d105      	bne.n	8014dda <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014dce:	4b47      	ldr	r3, [pc, #284]	@ (8014eec <ip4_input+0x240>)
 8014dd0:	691b      	ldr	r3, [r3, #16]
 8014dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014dd6:	2be0      	cmp	r3, #224	@ 0xe0
 8014dd8:	d104      	bne.n	8014de4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f7f8 fc08 	bl	800d5f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014de0:	2300      	movs	r3, #0
 8014de2:	e07e      	b.n	8014ee2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d104      	bne.n	8014df4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f7f8 fc00 	bl	800d5f0 <pbuf_free>
    return ERR_OK;
 8014df0:	2300      	movs	r3, #0
 8014df2:	e076      	b.n	8014ee2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	88db      	ldrh	r3, [r3, #6]
 8014df8:	b29b      	uxth	r3, r3
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014e00:	4013      	ands	r3, r2
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d00b      	beq.n	8014e1e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f000 fc92 	bl	8015730 <ip4_reass>
 8014e0c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d101      	bne.n	8014e18 <ip4_input+0x16c>
      return ERR_OK;
 8014e14:	2300      	movs	r3, #0
 8014e16:	e064      	b.n	8014ee2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	685b      	ldr	r3, [r3, #4]
 8014e1c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014e1e:	4a33      	ldr	r2, [pc, #204]	@ (8014eec <ip4_input+0x240>)
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014e24:	4a31      	ldr	r2, [pc, #196]	@ (8014eec <ip4_input+0x240>)
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014e2a:	4a30      	ldr	r2, [pc, #192]	@ (8014eec <ip4_input+0x240>)
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	f003 030f 	and.w	r3, r3, #15
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	009b      	lsls	r3, r3, #2
 8014e3c:	b2db      	uxtb	r3, r3
 8014e3e:	461a      	mov	r2, r3
 8014e40:	4b2a      	ldr	r3, [pc, #168]	@ (8014eec <ip4_input+0x240>)
 8014e42:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014e44:	89fb      	ldrh	r3, [r7, #14]
 8014e46:	4619      	mov	r1, r3
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7f8 fb4b 	bl	800d4e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	7a5b      	ldrb	r3, [r3, #9]
 8014e52:	2b11      	cmp	r3, #17
 8014e54:	d006      	beq.n	8014e64 <ip4_input+0x1b8>
 8014e56:	2b11      	cmp	r3, #17
 8014e58:	dc13      	bgt.n	8014e82 <ip4_input+0x1d6>
 8014e5a:	2b01      	cmp	r3, #1
 8014e5c:	d00c      	beq.n	8014e78 <ip4_input+0x1cc>
 8014e5e:	2b06      	cmp	r3, #6
 8014e60:	d005      	beq.n	8014e6e <ip4_input+0x1c2>
 8014e62:	e00e      	b.n	8014e82 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014e64:	6839      	ldr	r1, [r7, #0]
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f7fe f9b0 	bl	80131cc <udp_input>
        break;
 8014e6c:	e026      	b.n	8014ebc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014e6e:	6839      	ldr	r1, [r7, #0]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7fa f9f7 	bl	800f264 <tcp_input>
        break;
 8014e76:	e021      	b.n	8014ebc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014e78:	6839      	ldr	r1, [r7, #0]
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f7ff fcee 	bl	801485c <icmp_input>
        break;
 8014e80:	e01c      	b.n	8014ebc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014e82:	4b1a      	ldr	r3, [pc, #104]	@ (8014eec <ip4_input+0x240>)
 8014e84:	695b      	ldr	r3, [r3, #20]
 8014e86:	6939      	ldr	r1, [r7, #16]
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f000 f90b 	bl	80150a4 <ip4_addr_isbroadcast_u32>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d10f      	bne.n	8014eb4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e94:	4b15      	ldr	r3, [pc, #84]	@ (8014eec <ip4_input+0x240>)
 8014e96:	695b      	ldr	r3, [r3, #20]
 8014e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014e9c:	2be0      	cmp	r3, #224	@ 0xe0
 8014e9e:	d009      	beq.n	8014eb4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014ea0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f7f8 fb8f 	bl	800d5ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014eac:	2102      	movs	r1, #2
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7ff fdd8 	bl	8014a64 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f7f8 fb9b 	bl	800d5f0 <pbuf_free>
        break;
 8014eba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8014eec <ip4_input+0x240>)
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8014eec <ip4_input+0x240>)
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014ec8:	4b08      	ldr	r3, [pc, #32]	@ (8014eec <ip4_input+0x240>)
 8014eca:	2200      	movs	r2, #0
 8014ecc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014ece:	4b07      	ldr	r3, [pc, #28]	@ (8014eec <ip4_input+0x240>)
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014ed4:	4b05      	ldr	r3, [pc, #20]	@ (8014eec <ip4_input+0x240>)
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014eda:	4b04      	ldr	r3, [pc, #16]	@ (8014eec <ip4_input+0x240>)
 8014edc:	2200      	movs	r2, #0
 8014ede:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014ee0:	2300      	movs	r3, #0
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3718      	adds	r7, #24
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	20005900 	.word	0x20005900
 8014ef0:	20008810 	.word	0x20008810

08014ef4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b08a      	sub	sp, #40	@ 0x28
 8014ef8:	af04      	add	r7, sp, #16
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	607a      	str	r2, [r7, #4]
 8014f00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d009      	beq.n	8014f20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d003      	beq.n	8014f1a <ip4_output_if+0x26>
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d102      	bne.n	8014f20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f1c:	3304      	adds	r3, #4
 8014f1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014f20:	78fa      	ldrb	r2, [r7, #3]
 8014f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f24:	9302      	str	r3, [sp, #8]
 8014f26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014f2a:	9301      	str	r3, [sp, #4]
 8014f2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f30:	9300      	str	r3, [sp, #0]
 8014f32:	4613      	mov	r3, r2
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	6979      	ldr	r1, [r7, #20]
 8014f38:	68f8      	ldr	r0, [r7, #12]
 8014f3a:	f000 f805 	bl	8014f48 <ip4_output_if_src>
 8014f3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3718      	adds	r7, #24
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b088      	sub	sp, #32
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
 8014f54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	7b9b      	ldrb	r3, [r3, #14]
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	d006      	beq.n	8014f6c <ip4_output_if_src+0x24>
 8014f5e:	4b4b      	ldr	r3, [pc, #300]	@ (801508c <ip4_output_if_src+0x144>)
 8014f60:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014f64:	494a      	ldr	r1, [pc, #296]	@ (8015090 <ip4_output_if_src+0x148>)
 8014f66:	484b      	ldr	r0, [pc, #300]	@ (8015094 <ip4_output_if_src+0x14c>)
 8014f68:	f001 ff52 	bl	8016e10 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d060      	beq.n	8015034 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014f72:	2314      	movs	r3, #20
 8014f74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014f76:	2114      	movs	r1, #20
 8014f78:	68f8      	ldr	r0, [r7, #12]
 8014f7a:	f7f8 faa3 	bl	800d4c4 <pbuf_add_header>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d002      	beq.n	8014f8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014f84:	f06f 0301 	mvn.w	r3, #1
 8014f88:	e07c      	b.n	8015084 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	895b      	ldrh	r3, [r3, #10]
 8014f94:	2b13      	cmp	r3, #19
 8014f96:	d806      	bhi.n	8014fa6 <ip4_output_if_src+0x5e>
 8014f98:	4b3c      	ldr	r3, [pc, #240]	@ (801508c <ip4_output_if_src+0x144>)
 8014f9a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014f9e:	493e      	ldr	r1, [pc, #248]	@ (8015098 <ip4_output_if_src+0x150>)
 8014fa0:	483c      	ldr	r0, [pc, #240]	@ (8015094 <ip4_output_if_src+0x14c>)
 8014fa2:	f001 ff35 	bl	8016e10 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	78fa      	ldrb	r2, [r7, #3]
 8014faa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014fac:	69fb      	ldr	r3, [r7, #28]
 8014fae:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014fb2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014fbc:	8b7b      	ldrh	r3, [r7, #26]
 8014fbe:	089b      	lsrs	r3, r3, #2
 8014fc0:	b29b      	uxth	r3, r3
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fc8:	b2da      	uxtb	r2, r3
 8014fca:	69fb      	ldr	r3, [r7, #28]
 8014fcc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014fce:	69fb      	ldr	r3, [r7, #28]
 8014fd0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014fd4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	891b      	ldrh	r3, [r3, #8]
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7f6 ffae 	bl	800bf3c <lwip_htons>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014fe8:	69fb      	ldr	r3, [r7, #28]
 8014fea:	2200      	movs	r2, #0
 8014fec:	719a      	strb	r2, [r3, #6]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014ff2:	4b2a      	ldr	r3, [pc, #168]	@ (801509c <ip4_output_if_src+0x154>)
 8014ff4:	881b      	ldrh	r3, [r3, #0]
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7f6 ffa0 	bl	800bf3c <lwip_htons>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	461a      	mov	r2, r3
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015004:	4b25      	ldr	r3, [pc, #148]	@ (801509c <ip4_output_if_src+0x154>)
 8015006:	881b      	ldrh	r3, [r3, #0]
 8015008:	3301      	adds	r3, #1
 801500a:	b29a      	uxth	r2, r3
 801500c:	4b23      	ldr	r3, [pc, #140]	@ (801509c <ip4_output_if_src+0x154>)
 801500e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d104      	bne.n	8015020 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015016:	4b22      	ldr	r3, [pc, #136]	@ (80150a0 <ip4_output_if_src+0x158>)
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	69fb      	ldr	r3, [r7, #28]
 801501c:	60da      	str	r2, [r3, #12]
 801501e:	e003      	b.n	8015028 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	681a      	ldr	r2, [r3, #0]
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015028:	69fb      	ldr	r3, [r7, #28]
 801502a:	2200      	movs	r2, #0
 801502c:	729a      	strb	r2, [r3, #10]
 801502e:	2200      	movs	r2, #0
 8015030:	72da      	strb	r2, [r3, #11]
 8015032:	e00f      	b.n	8015054 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	895b      	ldrh	r3, [r3, #10]
 8015038:	2b13      	cmp	r3, #19
 801503a:	d802      	bhi.n	8015042 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801503c:	f06f 0301 	mvn.w	r3, #1
 8015040:	e020      	b.n	8015084 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015048:	69fb      	ldr	r3, [r7, #28]
 801504a:	691b      	ldr	r3, [r3, #16]
 801504c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801504e:	f107 0314 	add.w	r3, r7, #20
 8015052:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015056:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015058:	2b00      	cmp	r3, #0
 801505a:	d00c      	beq.n	8015076 <ip4_output_if_src+0x12e>
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	891a      	ldrh	r2, [r3, #8]
 8015060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015062:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015064:	429a      	cmp	r2, r3
 8015066:	d906      	bls.n	8015076 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015068:	687a      	ldr	r2, [r7, #4]
 801506a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801506c:	68f8      	ldr	r0, [r7, #12]
 801506e:	f000 fd53 	bl	8015b18 <ip4_frag>
 8015072:	4603      	mov	r3, r0
 8015074:	e006      	b.n	8015084 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015078:	695b      	ldr	r3, [r3, #20]
 801507a:	687a      	ldr	r2, [r7, #4]
 801507c:	68f9      	ldr	r1, [r7, #12]
 801507e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015080:	4798      	blx	r3
 8015082:	4603      	mov	r3, r0
}
 8015084:	4618      	mov	r0, r3
 8015086:	3720      	adds	r7, #32
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	0801a2c4 	.word	0x0801a2c4
 8015090:	0801a2f8 	.word	0x0801a2f8
 8015094:	0801a304 	.word	0x0801a304
 8015098:	0801a32c 	.word	0x0801a32c
 801509c:	2000896e 	.word	0x2000896e
 80150a0:	0801a714 	.word	0x0801a714

080150a4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80150a4:	b480      	push	{r7}
 80150a6:	b085      	sub	sp, #20
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150b8:	d002      	beq.n	80150c0 <ip4_addr_isbroadcast_u32+0x1c>
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d101      	bne.n	80150c4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80150c0:	2301      	movs	r3, #1
 80150c2:	e02a      	b.n	801511a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150ca:	f003 0302 	and.w	r3, r3, #2
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d101      	bne.n	80150d6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80150d2:	2300      	movs	r3, #0
 80150d4:	e021      	b.n	801511a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	3304      	adds	r3, #4
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	429a      	cmp	r2, r3
 80150e0:	d101      	bne.n	80150e6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80150e2:	2300      	movs	r3, #0
 80150e4:	e019      	b.n	801511a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80150e6:	68fa      	ldr	r2, [r7, #12]
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	3304      	adds	r3, #4
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	405a      	eors	r2, r3
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	3308      	adds	r3, #8
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	4013      	ands	r3, r2
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d10d      	bne.n	8015118 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	3308      	adds	r3, #8
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	43da      	mvns	r2, r3
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	3308      	adds	r3, #8
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015110:	429a      	cmp	r2, r3
 8015112:	d101      	bne.n	8015118 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015114:	2301      	movs	r3, #1
 8015116:	e000      	b.n	801511a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015118:	2300      	movs	r3, #0
  }
}
 801511a:	4618      	mov	r0, r3
 801511c:	3714      	adds	r7, #20
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr
	...

08015128 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b084      	sub	sp, #16
 801512c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801512e:	2300      	movs	r3, #0
 8015130:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015132:	4b12      	ldr	r3, [pc, #72]	@ (801517c <ip_reass_tmr+0x54>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015138:	e018      	b.n	801516c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	7fdb      	ldrb	r3, [r3, #31]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d00b      	beq.n	801515a <ip_reass_tmr+0x32>
      r->timer--;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	7fdb      	ldrb	r3, [r3, #31]
 8015146:	3b01      	subs	r3, #1
 8015148:	b2da      	uxtb	r2, r3
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	60fb      	str	r3, [r7, #12]
 8015158:	e008      	b.n	801516c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015164:	68b9      	ldr	r1, [r7, #8]
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f000 f80a 	bl	8015180 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d1e3      	bne.n	801513a <ip_reass_tmr+0x12>
    }
  }
}
 8015172:	bf00      	nop
 8015174:	bf00      	nop
 8015176:	3710      	adds	r7, #16
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	20008970 	.word	0x20008970

08015180 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b088      	sub	sp, #32
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801518a:	2300      	movs	r3, #0
 801518c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801518e:	683a      	ldr	r2, [r7, #0]
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	429a      	cmp	r2, r3
 8015194:	d105      	bne.n	80151a2 <ip_reass_free_complete_datagram+0x22>
 8015196:	4b45      	ldr	r3, [pc, #276]	@ (80152ac <ip_reass_free_complete_datagram+0x12c>)
 8015198:	22ab      	movs	r2, #171	@ 0xab
 801519a:	4945      	ldr	r1, [pc, #276]	@ (80152b0 <ip_reass_free_complete_datagram+0x130>)
 801519c:	4845      	ldr	r0, [pc, #276]	@ (80152b4 <ip_reass_free_complete_datagram+0x134>)
 801519e:	f001 fe37 	bl	8016e10 <iprintf>
  if (prev != NULL) {
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d00a      	beq.n	80151be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d005      	beq.n	80151be <ip_reass_free_complete_datagram+0x3e>
 80151b2:	4b3e      	ldr	r3, [pc, #248]	@ (80152ac <ip_reass_free_complete_datagram+0x12c>)
 80151b4:	22ad      	movs	r2, #173	@ 0xad
 80151b6:	4940      	ldr	r1, [pc, #256]	@ (80152b8 <ip_reass_free_complete_datagram+0x138>)
 80151b8:	483e      	ldr	r0, [pc, #248]	@ (80152b4 <ip_reass_free_complete_datagram+0x134>)
 80151ba:	f001 fe29 	bl	8016e10 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	889b      	ldrh	r3, [r3, #4]
 80151ca:	b29b      	uxth	r3, r3
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d12a      	bne.n	8015226 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	681a      	ldr	r2, [r3, #0]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	6858      	ldr	r0, [r3, #4]
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	3308      	adds	r3, #8
 80151e6:	2214      	movs	r2, #20
 80151e8:	4619      	mov	r1, r3
 80151ea:	f001 feec 	bl	8016fc6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80151ee:	2101      	movs	r1, #1
 80151f0:	69b8      	ldr	r0, [r7, #24]
 80151f2:	f7ff fc47 	bl	8014a84 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80151f6:	69b8      	ldr	r0, [r7, #24]
 80151f8:	f7f8 fa82 	bl	800d700 <pbuf_clen>
 80151fc:	4603      	mov	r3, r0
 80151fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015200:	8bfa      	ldrh	r2, [r7, #30]
 8015202:	8a7b      	ldrh	r3, [r7, #18]
 8015204:	4413      	add	r3, r2
 8015206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801520a:	db05      	blt.n	8015218 <ip_reass_free_complete_datagram+0x98>
 801520c:	4b27      	ldr	r3, [pc, #156]	@ (80152ac <ip_reass_free_complete_datagram+0x12c>)
 801520e:	22bc      	movs	r2, #188	@ 0xbc
 8015210:	492a      	ldr	r1, [pc, #168]	@ (80152bc <ip_reass_free_complete_datagram+0x13c>)
 8015212:	4828      	ldr	r0, [pc, #160]	@ (80152b4 <ip_reass_free_complete_datagram+0x134>)
 8015214:	f001 fdfc 	bl	8016e10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015218:	8bfa      	ldrh	r2, [r7, #30]
 801521a:	8a7b      	ldrh	r3, [r7, #18]
 801521c:	4413      	add	r3, r2
 801521e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015220:	69b8      	ldr	r0, [r7, #24]
 8015222:	f7f8 f9e5 	bl	800d5f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	685b      	ldr	r3, [r3, #4]
 801522a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801522c:	e01f      	b.n	801526e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801522e:	69bb      	ldr	r3, [r7, #24]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801523e:	68f8      	ldr	r0, [r7, #12]
 8015240:	f7f8 fa5e 	bl	800d700 <pbuf_clen>
 8015244:	4603      	mov	r3, r0
 8015246:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015248:	8bfa      	ldrh	r2, [r7, #30]
 801524a:	8a7b      	ldrh	r3, [r7, #18]
 801524c:	4413      	add	r3, r2
 801524e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015252:	db05      	blt.n	8015260 <ip_reass_free_complete_datagram+0xe0>
 8015254:	4b15      	ldr	r3, [pc, #84]	@ (80152ac <ip_reass_free_complete_datagram+0x12c>)
 8015256:	22cc      	movs	r2, #204	@ 0xcc
 8015258:	4918      	ldr	r1, [pc, #96]	@ (80152bc <ip_reass_free_complete_datagram+0x13c>)
 801525a:	4816      	ldr	r0, [pc, #88]	@ (80152b4 <ip_reass_free_complete_datagram+0x134>)
 801525c:	f001 fdd8 	bl	8016e10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015260:	8bfa      	ldrh	r2, [r7, #30]
 8015262:	8a7b      	ldrh	r3, [r7, #18]
 8015264:	4413      	add	r3, r2
 8015266:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	f7f8 f9c1 	bl	800d5f0 <pbuf_free>
  while (p != NULL) {
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d1dc      	bne.n	801522e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015274:	6839      	ldr	r1, [r7, #0]
 8015276:	6878      	ldr	r0, [r7, #4]
 8015278:	f000 f8c2 	bl	8015400 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801527c:	4b10      	ldr	r3, [pc, #64]	@ (80152c0 <ip_reass_free_complete_datagram+0x140>)
 801527e:	881b      	ldrh	r3, [r3, #0]
 8015280:	8bfa      	ldrh	r2, [r7, #30]
 8015282:	429a      	cmp	r2, r3
 8015284:	d905      	bls.n	8015292 <ip_reass_free_complete_datagram+0x112>
 8015286:	4b09      	ldr	r3, [pc, #36]	@ (80152ac <ip_reass_free_complete_datagram+0x12c>)
 8015288:	22d2      	movs	r2, #210	@ 0xd2
 801528a:	490e      	ldr	r1, [pc, #56]	@ (80152c4 <ip_reass_free_complete_datagram+0x144>)
 801528c:	4809      	ldr	r0, [pc, #36]	@ (80152b4 <ip_reass_free_complete_datagram+0x134>)
 801528e:	f001 fdbf 	bl	8016e10 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015292:	4b0b      	ldr	r3, [pc, #44]	@ (80152c0 <ip_reass_free_complete_datagram+0x140>)
 8015294:	881a      	ldrh	r2, [r3, #0]
 8015296:	8bfb      	ldrh	r3, [r7, #30]
 8015298:	1ad3      	subs	r3, r2, r3
 801529a:	b29a      	uxth	r2, r3
 801529c:	4b08      	ldr	r3, [pc, #32]	@ (80152c0 <ip_reass_free_complete_datagram+0x140>)
 801529e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80152a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	3720      	adds	r7, #32
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	bf00      	nop
 80152ac:	0801a35c 	.word	0x0801a35c
 80152b0:	0801a398 	.word	0x0801a398
 80152b4:	0801a3a4 	.word	0x0801a3a4
 80152b8:	0801a3cc 	.word	0x0801a3cc
 80152bc:	0801a3e0 	.word	0x0801a3e0
 80152c0:	20008974 	.word	0x20008974
 80152c4:	0801a400 	.word	0x0801a400

080152c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b08a      	sub	sp, #40	@ 0x28
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80152d2:	2300      	movs	r3, #0
 80152d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80152d6:	2300      	movs	r3, #0
 80152d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80152da:	2300      	movs	r3, #0
 80152dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80152de:	2300      	movs	r3, #0
 80152e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80152e2:	2300      	movs	r3, #0
 80152e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80152e6:	4b28      	ldr	r3, [pc, #160]	@ (8015388 <ip_reass_remove_oldest_datagram+0xc0>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80152ec:	e030      	b.n	8015350 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80152ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f0:	695a      	ldr	r2, [r3, #20]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	68db      	ldr	r3, [r3, #12]
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d10c      	bne.n	8015314 <ip_reass_remove_oldest_datagram+0x4c>
 80152fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152fc:	699a      	ldr	r2, [r3, #24]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	691b      	ldr	r3, [r3, #16]
 8015302:	429a      	cmp	r2, r3
 8015304:	d106      	bne.n	8015314 <ip_reass_remove_oldest_datagram+0x4c>
 8015306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015308:	899a      	ldrh	r2, [r3, #12]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	889b      	ldrh	r3, [r3, #4]
 801530e:	b29b      	uxth	r3, r3
 8015310:	429a      	cmp	r2, r3
 8015312:	d014      	beq.n	801533e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	3301      	adds	r3, #1
 8015318:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801531a:	6a3b      	ldr	r3, [r7, #32]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d104      	bne.n	801532a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015322:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015324:	69fb      	ldr	r3, [r7, #28]
 8015326:	61bb      	str	r3, [r7, #24]
 8015328:	e009      	b.n	801533e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801532c:	7fda      	ldrb	r2, [r3, #31]
 801532e:	6a3b      	ldr	r3, [r7, #32]
 8015330:	7fdb      	ldrb	r3, [r3, #31]
 8015332:	429a      	cmp	r2, r3
 8015334:	d803      	bhi.n	801533e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015338:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801533a:	69fb      	ldr	r3, [r7, #28]
 801533c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d001      	beq.n	801534a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015348:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015352:	2b00      	cmp	r3, #0
 8015354:	d1cb      	bne.n	80152ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015356:	6a3b      	ldr	r3, [r7, #32]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d008      	beq.n	801536e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801535c:	69b9      	ldr	r1, [r7, #24]
 801535e:	6a38      	ldr	r0, [r7, #32]
 8015360:	f7ff ff0e 	bl	8015180 <ip_reass_free_complete_datagram>
 8015364:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015366:	697a      	ldr	r2, [r7, #20]
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	4413      	add	r3, r2
 801536c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801536e:	697a      	ldr	r2, [r7, #20]
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	429a      	cmp	r2, r3
 8015374:	da02      	bge.n	801537c <ip_reass_remove_oldest_datagram+0xb4>
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	2b01      	cmp	r3, #1
 801537a:	dcac      	bgt.n	80152d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801537c:	697b      	ldr	r3, [r7, #20]
}
 801537e:	4618      	mov	r0, r3
 8015380:	3728      	adds	r7, #40	@ 0x28
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}
 8015386:	bf00      	nop
 8015388:	20008970 	.word	0x20008970

0801538c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b084      	sub	sp, #16
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015396:	2004      	movs	r0, #4
 8015398:	f7f7 fa44 	bl	800c824 <memp_malloc>
 801539c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d110      	bne.n	80153c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80153a4:	6839      	ldr	r1, [r7, #0]
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f7ff ff8e 	bl	80152c8 <ip_reass_remove_oldest_datagram>
 80153ac:	4602      	mov	r2, r0
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	4293      	cmp	r3, r2
 80153b2:	dc03      	bgt.n	80153bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80153b4:	2004      	movs	r0, #4
 80153b6:	f7f7 fa35 	bl	800c824 <memp_malloc>
 80153ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d101      	bne.n	80153c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80153c2:	2300      	movs	r3, #0
 80153c4:	e016      	b.n	80153f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80153c6:	2220      	movs	r2, #32
 80153c8:	2100      	movs	r1, #0
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	f001 fd85 	bl	8016eda <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	220f      	movs	r2, #15
 80153d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80153d6:	4b09      	ldr	r3, [pc, #36]	@ (80153fc <ip_reass_enqueue_new_datagram+0x70>)
 80153d8:	681a      	ldr	r2, [r3, #0]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80153de:	4a07      	ldr	r2, [pc, #28]	@ (80153fc <ip_reass_enqueue_new_datagram+0x70>)
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	3308      	adds	r3, #8
 80153e8:	2214      	movs	r2, #20
 80153ea:	6879      	ldr	r1, [r7, #4]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f001 fdea 	bl	8016fc6 <memcpy>
  return ipr;
 80153f2:	68fb      	ldr	r3, [r7, #12]
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3710      	adds	r7, #16
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	20008970 	.word	0x20008970

08015400 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801540a:	4b10      	ldr	r3, [pc, #64]	@ (801544c <ip_reass_dequeue_datagram+0x4c>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	687a      	ldr	r2, [r7, #4]
 8015410:	429a      	cmp	r2, r3
 8015412:	d104      	bne.n	801541e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	4a0c      	ldr	r2, [pc, #48]	@ (801544c <ip_reass_dequeue_datagram+0x4c>)
 801541a:	6013      	str	r3, [r2, #0]
 801541c:	e00d      	b.n	801543a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d106      	bne.n	8015432 <ip_reass_dequeue_datagram+0x32>
 8015424:	4b0a      	ldr	r3, [pc, #40]	@ (8015450 <ip_reass_dequeue_datagram+0x50>)
 8015426:	f240 1245 	movw	r2, #325	@ 0x145
 801542a:	490a      	ldr	r1, [pc, #40]	@ (8015454 <ip_reass_dequeue_datagram+0x54>)
 801542c:	480a      	ldr	r0, [pc, #40]	@ (8015458 <ip_reass_dequeue_datagram+0x58>)
 801542e:	f001 fcef 	bl	8016e10 <iprintf>
    prev->next = ipr->next;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681a      	ldr	r2, [r3, #0]
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801543a:	6879      	ldr	r1, [r7, #4]
 801543c:	2004      	movs	r0, #4
 801543e:	f7f7 fa61 	bl	800c904 <memp_free>
}
 8015442:	bf00      	nop
 8015444:	3708      	adds	r7, #8
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	20008970 	.word	0x20008970
 8015450:	0801a35c 	.word	0x0801a35c
 8015454:	0801a424 	.word	0x0801a424
 8015458:	0801a3a4 	.word	0x0801a3a4

0801545c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b08c      	sub	sp, #48	@ 0x30
 8015460:	af00      	add	r7, sp, #0
 8015462:	60f8      	str	r0, [r7, #12]
 8015464:	60b9      	str	r1, [r7, #8]
 8015466:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015468:	2300      	movs	r3, #0
 801546a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801546c:	2301      	movs	r3, #1
 801546e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015476:	69fb      	ldr	r3, [r7, #28]
 8015478:	885b      	ldrh	r3, [r3, #2]
 801547a:	b29b      	uxth	r3, r3
 801547c:	4618      	mov	r0, r3
 801547e:	f7f6 fd5d 	bl	800bf3c <lwip_htons>
 8015482:	4603      	mov	r3, r0
 8015484:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	f003 030f 	and.w	r3, r3, #15
 801548e:	b2db      	uxtb	r3, r3
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015494:	7e7b      	ldrb	r3, [r7, #25]
 8015496:	b29b      	uxth	r3, r3
 8015498:	8b7a      	ldrh	r2, [r7, #26]
 801549a:	429a      	cmp	r2, r3
 801549c:	d202      	bcs.n	80154a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801549e:	f04f 33ff 	mov.w	r3, #4294967295
 80154a2:	e135      	b.n	8015710 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80154a4:	7e7b      	ldrb	r3, [r7, #25]
 80154a6:	b29b      	uxth	r3, r3
 80154a8:	8b7a      	ldrh	r2, [r7, #26]
 80154aa:	1ad3      	subs	r3, r2, r3
 80154ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	88db      	ldrh	r3, [r3, #6]
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7f6 fd41 	bl	800bf3c <lwip_htons>
 80154ba:	4603      	mov	r3, r0
 80154bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80154cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ce:	2200      	movs	r2, #0
 80154d0:	701a      	strb	r2, [r3, #0]
 80154d2:	2200      	movs	r2, #0
 80154d4:	705a      	strb	r2, [r3, #1]
 80154d6:	2200      	movs	r2, #0
 80154d8:	709a      	strb	r2, [r3, #2]
 80154da:	2200      	movs	r2, #0
 80154dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80154de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e0:	8afa      	ldrh	r2, [r7, #22]
 80154e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80154e4:	8afa      	ldrh	r2, [r7, #22]
 80154e6:	8b7b      	ldrh	r3, [r7, #26]
 80154e8:	4413      	add	r3, r2
 80154ea:	b29a      	uxth	r2, r3
 80154ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80154f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f2:	88db      	ldrh	r3, [r3, #6]
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	8afa      	ldrh	r2, [r7, #22]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d902      	bls.n	8015502 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80154fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015500:	e106      	b.n	8015710 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	627b      	str	r3, [r7, #36]	@ 0x24
 8015508:	e068      	b.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015512:	889b      	ldrh	r3, [r3, #4]
 8015514:	b29a      	uxth	r2, r3
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	889b      	ldrh	r3, [r3, #4]
 801551a:	b29b      	uxth	r3, r3
 801551c:	429a      	cmp	r2, r3
 801551e:	d235      	bcs.n	801558c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015524:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015528:	2b00      	cmp	r3, #0
 801552a:	d020      	beq.n	801556e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801552e:	889b      	ldrh	r3, [r3, #4]
 8015530:	b29a      	uxth	r2, r3
 8015532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015534:	88db      	ldrh	r3, [r3, #6]
 8015536:	b29b      	uxth	r3, r3
 8015538:	429a      	cmp	r2, r3
 801553a:	d307      	bcc.n	801554c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801553c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801553e:	88db      	ldrh	r3, [r3, #6]
 8015540:	b29a      	uxth	r2, r3
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	889b      	ldrh	r3, [r3, #4]
 8015546:	b29b      	uxth	r3, r3
 8015548:	429a      	cmp	r2, r3
 801554a:	d902      	bls.n	8015552 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801554c:	f04f 33ff 	mov.w	r3, #4294967295
 8015550:	e0de      	b.n	8015710 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015554:	68ba      	ldr	r2, [r7, #8]
 8015556:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801555a:	88db      	ldrh	r3, [r3, #6]
 801555c:	b29a      	uxth	r2, r3
 801555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015560:	889b      	ldrh	r3, [r3, #4]
 8015562:	b29b      	uxth	r3, r3
 8015564:	429a      	cmp	r2, r3
 8015566:	d03d      	beq.n	80155e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015568:	2300      	movs	r3, #0
 801556a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801556c:	e03a      	b.n	80155e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015570:	88db      	ldrh	r3, [r3, #6]
 8015572:	b29a      	uxth	r2, r3
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	889b      	ldrh	r3, [r3, #4]
 8015578:	b29b      	uxth	r3, r3
 801557a:	429a      	cmp	r2, r3
 801557c:	d902      	bls.n	8015584 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801557e:	f04f 33ff 	mov.w	r3, #4294967295
 8015582:	e0c5      	b.n	8015710 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	68ba      	ldr	r2, [r7, #8]
 8015588:	605a      	str	r2, [r3, #4]
      break;
 801558a:	e02b      	b.n	80155e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801558e:	889b      	ldrh	r3, [r3, #4]
 8015590:	b29a      	uxth	r2, r3
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	889b      	ldrh	r3, [r3, #4]
 8015596:	b29b      	uxth	r3, r3
 8015598:	429a      	cmp	r2, r3
 801559a:	d102      	bne.n	80155a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801559c:	f04f 33ff 	mov.w	r3, #4294967295
 80155a0:	e0b6      	b.n	8015710 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80155a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155a4:	889b      	ldrh	r3, [r3, #4]
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	693b      	ldr	r3, [r7, #16]
 80155aa:	88db      	ldrh	r3, [r3, #6]
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	429a      	cmp	r2, r3
 80155b0:	d202      	bcs.n	80155b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155b2:	f04f 33ff 	mov.w	r3, #4294967295
 80155b6:	e0ab      	b.n	8015710 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80155b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d009      	beq.n	80155d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80155be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155c0:	88db      	ldrh	r3, [r3, #6]
 80155c2:	b29a      	uxth	r2, r3
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	889b      	ldrh	r3, [r3, #4]
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	429a      	cmp	r2, r3
 80155cc:	d001      	beq.n	80155d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80155ce:	2300      	movs	r3, #0
 80155d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80155d8:	693b      	ldr	r3, [r7, #16]
 80155da:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80155dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d193      	bne.n	801550a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80155e2:	e000      	b.n	80155e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80155e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80155e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d12d      	bne.n	8015648 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80155ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d01c      	beq.n	801562c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80155f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155f4:	88db      	ldrh	r3, [r3, #6]
 80155f6:	b29a      	uxth	r2, r3
 80155f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155fa:	889b      	ldrh	r3, [r3, #4]
 80155fc:	b29b      	uxth	r3, r3
 80155fe:	429a      	cmp	r2, r3
 8015600:	d906      	bls.n	8015610 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015602:	4b45      	ldr	r3, [pc, #276]	@ (8015718 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015604:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015608:	4944      	ldr	r1, [pc, #272]	@ (801571c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801560a:	4845      	ldr	r0, [pc, #276]	@ (8015720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801560c:	f001 fc00 	bl	8016e10 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015612:	68ba      	ldr	r2, [r7, #8]
 8015614:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015618:	88db      	ldrh	r3, [r3, #6]
 801561a:	b29a      	uxth	r2, r3
 801561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801561e:	889b      	ldrh	r3, [r3, #4]
 8015620:	b29b      	uxth	r3, r3
 8015622:	429a      	cmp	r2, r3
 8015624:	d010      	beq.n	8015648 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015626:	2300      	movs	r3, #0
 8015628:	623b      	str	r3, [r7, #32]
 801562a:	e00d      	b.n	8015648 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	685b      	ldr	r3, [r3, #4]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d006      	beq.n	8015642 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015634:	4b38      	ldr	r3, [pc, #224]	@ (8015718 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015636:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801563a:	493a      	ldr	r1, [pc, #232]	@ (8015724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801563c:	4838      	ldr	r0, [pc, #224]	@ (8015720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801563e:	f001 fbe7 	bl	8016e10 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	68ba      	ldr	r2, [r7, #8]
 8015646:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d105      	bne.n	801565a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	7f9b      	ldrb	r3, [r3, #30]
 8015652:	f003 0301 	and.w	r3, r3, #1
 8015656:	2b00      	cmp	r3, #0
 8015658:	d059      	beq.n	801570e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801565a:	6a3b      	ldr	r3, [r7, #32]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d04f      	beq.n	8015700 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d006      	beq.n	8015676 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	685b      	ldr	r3, [r3, #4]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	889b      	ldrh	r3, [r3, #4]
 8015670:	b29b      	uxth	r3, r3
 8015672:	2b00      	cmp	r3, #0
 8015674:	d002      	beq.n	801567c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015676:	2300      	movs	r3, #0
 8015678:	623b      	str	r3, [r7, #32]
 801567a:	e041      	b.n	8015700 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801567e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015686:	e012      	b.n	80156ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801568a:	685b      	ldr	r3, [r3, #4]
 801568c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015690:	88db      	ldrh	r3, [r3, #6]
 8015692:	b29a      	uxth	r2, r3
 8015694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015696:	889b      	ldrh	r3, [r3, #4]
 8015698:	b29b      	uxth	r3, r3
 801569a:	429a      	cmp	r2, r3
 801569c:	d002      	beq.n	80156a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801569e:	2300      	movs	r3, #0
 80156a0:	623b      	str	r3, [r7, #32]
            break;
 80156a2:	e007      	b.n	80156b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80156a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80156a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80156ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d1e9      	bne.n	8015688 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80156b4:	6a3b      	ldr	r3, [r7, #32]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d022      	beq.n	8015700 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d106      	bne.n	80156d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80156c2:	4b15      	ldr	r3, [pc, #84]	@ (8015718 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80156c4:	f240 12df 	movw	r2, #479	@ 0x1df
 80156c8:	4917      	ldr	r1, [pc, #92]	@ (8015728 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80156ca:	4815      	ldr	r0, [pc, #84]	@ (8015720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80156cc:	f001 fba0 	bl	8016e10 <iprintf>
          LWIP_ASSERT("sanity check",
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	685b      	ldr	r3, [r3, #4]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80156d8:	429a      	cmp	r2, r3
 80156da:	d106      	bne.n	80156ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80156dc:	4b0e      	ldr	r3, [pc, #56]	@ (8015718 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80156de:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80156e2:	4911      	ldr	r1, [pc, #68]	@ (8015728 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80156e4:	480e      	ldr	r0, [pc, #56]	@ (8015720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80156e6:	f001 fb93 	bl	8016e10 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80156ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d006      	beq.n	8015700 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80156f2:	4b09      	ldr	r3, [pc, #36]	@ (8015718 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80156f4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80156f8:	490c      	ldr	r1, [pc, #48]	@ (801572c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80156fa:	4809      	ldr	r0, [pc, #36]	@ (8015720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80156fc:	f001 fb88 	bl	8016e10 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015700:	6a3b      	ldr	r3, [r7, #32]
 8015702:	2b00      	cmp	r3, #0
 8015704:	bf14      	ite	ne
 8015706:	2301      	movne	r3, #1
 8015708:	2300      	moveq	r3, #0
 801570a:	b2db      	uxtb	r3, r3
 801570c:	e000      	b.n	8015710 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801570e:	2300      	movs	r3, #0
}
 8015710:	4618      	mov	r0, r3
 8015712:	3730      	adds	r7, #48	@ 0x30
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}
 8015718:	0801a35c 	.word	0x0801a35c
 801571c:	0801a440 	.word	0x0801a440
 8015720:	0801a3a4 	.word	0x0801a3a4
 8015724:	0801a460 	.word	0x0801a460
 8015728:	0801a498 	.word	0x0801a498
 801572c:	0801a4a8 	.word	0x0801a4a8

08015730 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b08e      	sub	sp, #56	@ 0x38
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	685b      	ldr	r3, [r3, #4]
 801573c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	f003 030f 	and.w	r3, r3, #15
 8015746:	b2db      	uxtb	r3, r3
 8015748:	009b      	lsls	r3, r3, #2
 801574a:	b2db      	uxtb	r3, r3
 801574c:	2b14      	cmp	r3, #20
 801574e:	f040 8171 	bne.w	8015a34 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015754:	88db      	ldrh	r3, [r3, #6]
 8015756:	b29b      	uxth	r3, r3
 8015758:	4618      	mov	r0, r3
 801575a:	f7f6 fbef 	bl	800bf3c <lwip_htons>
 801575e:	4603      	mov	r3, r0
 8015760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015764:	b29b      	uxth	r3, r3
 8015766:	00db      	lsls	r3, r3, #3
 8015768:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801576c:	885b      	ldrh	r3, [r3, #2]
 801576e:	b29b      	uxth	r3, r3
 8015770:	4618      	mov	r0, r3
 8015772:	f7f6 fbe3 	bl	800bf3c <lwip_htons>
 8015776:	4603      	mov	r3, r0
 8015778:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	f003 030f 	and.w	r3, r3, #15
 8015782:	b2db      	uxtb	r3, r3
 8015784:	009b      	lsls	r3, r3, #2
 8015786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801578a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801578e:	b29b      	uxth	r3, r3
 8015790:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015792:	429a      	cmp	r2, r3
 8015794:	f0c0 8150 	bcc.w	8015a38 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015798:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801579c:	b29b      	uxth	r3, r3
 801579e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80157a0:	1ad3      	subs	r3, r2, r3
 80157a2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80157a4:	6878      	ldr	r0, [r7, #4]
 80157a6:	f7f7 ffab 	bl	800d700 <pbuf_clen>
 80157aa:	4603      	mov	r3, r0
 80157ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80157ae:	4b8c      	ldr	r3, [pc, #560]	@ (80159e0 <ip4_reass+0x2b0>)
 80157b0:	881b      	ldrh	r3, [r3, #0]
 80157b2:	461a      	mov	r2, r3
 80157b4:	8c3b      	ldrh	r3, [r7, #32]
 80157b6:	4413      	add	r3, r2
 80157b8:	2b0a      	cmp	r3, #10
 80157ba:	dd10      	ble.n	80157de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80157bc:	8c3b      	ldrh	r3, [r7, #32]
 80157be:	4619      	mov	r1, r3
 80157c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80157c2:	f7ff fd81 	bl	80152c8 <ip_reass_remove_oldest_datagram>
 80157c6:	4603      	mov	r3, r0
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	f000 8137 	beq.w	8015a3c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80157ce:	4b84      	ldr	r3, [pc, #528]	@ (80159e0 <ip4_reass+0x2b0>)
 80157d0:	881b      	ldrh	r3, [r3, #0]
 80157d2:	461a      	mov	r2, r3
 80157d4:	8c3b      	ldrh	r3, [r7, #32]
 80157d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80157d8:	2b0a      	cmp	r3, #10
 80157da:	f300 812f 	bgt.w	8015a3c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80157de:	4b81      	ldr	r3, [pc, #516]	@ (80159e4 <ip4_reass+0x2b4>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80157e4:	e015      	b.n	8015812 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80157e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157e8:	695a      	ldr	r2, [r3, #20]
 80157ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ec:	68db      	ldr	r3, [r3, #12]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d10c      	bne.n	801580c <ip4_reass+0xdc>
 80157f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157f4:	699a      	ldr	r2, [r3, #24]
 80157f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157f8:	691b      	ldr	r3, [r3, #16]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d106      	bne.n	801580c <ip4_reass+0xdc>
 80157fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015800:	899a      	ldrh	r2, [r3, #12]
 8015802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015804:	889b      	ldrh	r3, [r3, #4]
 8015806:	b29b      	uxth	r3, r3
 8015808:	429a      	cmp	r2, r3
 801580a:	d006      	beq.n	801581a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	633b      	str	r3, [r7, #48]	@ 0x30
 8015812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015814:	2b00      	cmp	r3, #0
 8015816:	d1e6      	bne.n	80157e6 <ip4_reass+0xb6>
 8015818:	e000      	b.n	801581c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801581a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801581e:	2b00      	cmp	r3, #0
 8015820:	d109      	bne.n	8015836 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015822:	8c3b      	ldrh	r3, [r7, #32]
 8015824:	4619      	mov	r1, r3
 8015826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015828:	f7ff fdb0 	bl	801538c <ip_reass_enqueue_new_datagram>
 801582c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015830:	2b00      	cmp	r3, #0
 8015832:	d11c      	bne.n	801586e <ip4_reass+0x13e>
      goto nullreturn;
 8015834:	e105      	b.n	8015a42 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015838:	88db      	ldrh	r3, [r3, #6]
 801583a:	b29b      	uxth	r3, r3
 801583c:	4618      	mov	r0, r3
 801583e:	f7f6 fb7d 	bl	800bf3c <lwip_htons>
 8015842:	4603      	mov	r3, r0
 8015844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015848:	2b00      	cmp	r3, #0
 801584a:	d110      	bne.n	801586e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801584e:	89db      	ldrh	r3, [r3, #14]
 8015850:	4618      	mov	r0, r3
 8015852:	f7f6 fb73 	bl	800bf3c <lwip_htons>
 8015856:	4603      	mov	r3, r0
 8015858:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801585c:	2b00      	cmp	r3, #0
 801585e:	d006      	beq.n	801586e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015862:	3308      	adds	r3, #8
 8015864:	2214      	movs	r2, #20
 8015866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015868:	4618      	mov	r0, r3
 801586a:	f001 fbac 	bl	8016fc6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801586e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015870:	88db      	ldrh	r3, [r3, #6]
 8015872:	b29b      	uxth	r3, r3
 8015874:	f003 0320 	and.w	r3, r3, #32
 8015878:	2b00      	cmp	r3, #0
 801587a:	bf0c      	ite	eq
 801587c:	2301      	moveq	r3, #1
 801587e:	2300      	movne	r3, #0
 8015880:	b2db      	uxtb	r3, r3
 8015882:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d00e      	beq.n	80158a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801588a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801588c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801588e:	4413      	add	r3, r2
 8015890:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015892:	8b7a      	ldrh	r2, [r7, #26]
 8015894:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015896:	429a      	cmp	r2, r3
 8015898:	f0c0 80a0 	bcc.w	80159dc <ip4_reass+0x2ac>
 801589c:	8b7b      	ldrh	r3, [r7, #26]
 801589e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80158a2:	4293      	cmp	r3, r2
 80158a4:	f200 809a 	bhi.w	80159dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80158a8:	69fa      	ldr	r2, [r7, #28]
 80158aa:	6879      	ldr	r1, [r7, #4]
 80158ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80158ae:	f7ff fdd5 	bl	801545c <ip_reass_chain_frag_into_datagram_and_validate>
 80158b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ba:	f000 809b 	beq.w	80159f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80158be:	4b48      	ldr	r3, [pc, #288]	@ (80159e0 <ip4_reass+0x2b0>)
 80158c0:	881a      	ldrh	r2, [r3, #0]
 80158c2:	8c3b      	ldrh	r3, [r7, #32]
 80158c4:	4413      	add	r3, r2
 80158c6:	b29a      	uxth	r2, r3
 80158c8:	4b45      	ldr	r3, [pc, #276]	@ (80159e0 <ip4_reass+0x2b0>)
 80158ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80158cc:	69fb      	ldr	r3, [r7, #28]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d00d      	beq.n	80158ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80158d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80158d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80158d6:	4413      	add	r3, r2
 80158d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80158da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158dc:	8a7a      	ldrh	r2, [r7, #18]
 80158de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80158e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158e2:	7f9b      	ldrb	r3, [r3, #30]
 80158e4:	f043 0301 	orr.w	r3, r3, #1
 80158e8:	b2da      	uxtb	r2, r3
 80158ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80158ee:	697b      	ldr	r3, [r7, #20]
 80158f0:	2b01      	cmp	r3, #1
 80158f2:	d171      	bne.n	80159d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80158f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158f6:	8b9b      	ldrh	r3, [r3, #28]
 80158f8:	3314      	adds	r3, #20
 80158fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80158fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	685b      	ldr	r3, [r3, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015908:	685b      	ldr	r3, [r3, #4]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015910:	3308      	adds	r3, #8
 8015912:	2214      	movs	r2, #20
 8015914:	4619      	mov	r1, r3
 8015916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015918:	f001 fb55 	bl	8016fc6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801591c:	8a3b      	ldrh	r3, [r7, #16]
 801591e:	4618      	mov	r0, r3
 8015920:	f7f6 fb0c 	bl	800bf3c <lwip_htons>
 8015924:	4603      	mov	r3, r0
 8015926:	461a      	mov	r2, r3
 8015928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801592a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801592e:	2200      	movs	r2, #0
 8015930:	719a      	strb	r2, [r3, #6]
 8015932:	2200      	movs	r2, #0
 8015934:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015938:	2200      	movs	r2, #0
 801593a:	729a      	strb	r2, [r3, #10]
 801593c:	2200      	movs	r2, #0
 801593e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015946:	e00d      	b.n	8015964 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801594e:	2114      	movs	r1, #20
 8015950:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015952:	f7f7 fdc7 	bl	800d4e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015956:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f7f7 ff0b 	bl	800d774 <pbuf_cat>
      r = iprh->next_pbuf;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015966:	2b00      	cmp	r3, #0
 8015968:	d1ee      	bne.n	8015948 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801596a:	4b1e      	ldr	r3, [pc, #120]	@ (80159e4 <ip4_reass+0x2b4>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015970:	429a      	cmp	r2, r3
 8015972:	d102      	bne.n	801597a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015974:	2300      	movs	r3, #0
 8015976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015978:	e010      	b.n	801599c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801597a:	4b1a      	ldr	r3, [pc, #104]	@ (80159e4 <ip4_reass+0x2b4>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015980:	e007      	b.n	8015992 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015988:	429a      	cmp	r2, r3
 801598a:	d006      	beq.n	801599a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801598c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015994:	2b00      	cmp	r3, #0
 8015996:	d1f4      	bne.n	8015982 <ip4_reass+0x252>
 8015998:	e000      	b.n	801599c <ip4_reass+0x26c>
          break;
 801599a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801599c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801599e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80159a0:	f7ff fd2e 	bl	8015400 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f7f7 feab 	bl	800d700 <pbuf_clen>
 80159aa:	4603      	mov	r3, r0
 80159ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80159ae:	4b0c      	ldr	r3, [pc, #48]	@ (80159e0 <ip4_reass+0x2b0>)
 80159b0:	881b      	ldrh	r3, [r3, #0]
 80159b2:	8c3a      	ldrh	r2, [r7, #32]
 80159b4:	429a      	cmp	r2, r3
 80159b6:	d906      	bls.n	80159c6 <ip4_reass+0x296>
 80159b8:	4b0b      	ldr	r3, [pc, #44]	@ (80159e8 <ip4_reass+0x2b8>)
 80159ba:	f240 229b 	movw	r2, #667	@ 0x29b
 80159be:	490b      	ldr	r1, [pc, #44]	@ (80159ec <ip4_reass+0x2bc>)
 80159c0:	480b      	ldr	r0, [pc, #44]	@ (80159f0 <ip4_reass+0x2c0>)
 80159c2:	f001 fa25 	bl	8016e10 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80159c6:	4b06      	ldr	r3, [pc, #24]	@ (80159e0 <ip4_reass+0x2b0>)
 80159c8:	881a      	ldrh	r2, [r3, #0]
 80159ca:	8c3b      	ldrh	r3, [r7, #32]
 80159cc:	1ad3      	subs	r3, r2, r3
 80159ce:	b29a      	uxth	r2, r3
 80159d0:	4b03      	ldr	r3, [pc, #12]	@ (80159e0 <ip4_reass+0x2b0>)
 80159d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	e038      	b.n	8015a4a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80159d8:	2300      	movs	r3, #0
 80159da:	e036      	b.n	8015a4a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80159dc:	bf00      	nop
 80159de:	e00a      	b.n	80159f6 <ip4_reass+0x2c6>
 80159e0:	20008974 	.word	0x20008974
 80159e4:	20008970 	.word	0x20008970
 80159e8:	0801a35c 	.word	0x0801a35c
 80159ec:	0801a4cc 	.word	0x0801a4cc
 80159f0:	0801a3a4 	.word	0x0801a3a4
    goto nullreturn_ipr;
 80159f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80159f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d106      	bne.n	8015a0a <ip4_reass+0x2da>
 80159fc:	4b15      	ldr	r3, [pc, #84]	@ (8015a54 <ip4_reass+0x324>)
 80159fe:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015a02:	4915      	ldr	r1, [pc, #84]	@ (8015a58 <ip4_reass+0x328>)
 8015a04:	4815      	ldr	r0, [pc, #84]	@ (8015a5c <ip4_reass+0x32c>)
 8015a06:	f001 fa03 	bl	8016e10 <iprintf>
  if (ipr->p == NULL) {
 8015a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d116      	bne.n	8015a40 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015a12:	4b13      	ldr	r3, [pc, #76]	@ (8015a60 <ip4_reass+0x330>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d006      	beq.n	8015a2a <ip4_reass+0x2fa>
 8015a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8015a54 <ip4_reass+0x324>)
 8015a1e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015a22:	4910      	ldr	r1, [pc, #64]	@ (8015a64 <ip4_reass+0x334>)
 8015a24:	480d      	ldr	r0, [pc, #52]	@ (8015a5c <ip4_reass+0x32c>)
 8015a26:	f001 f9f3 	bl	8016e10 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a2e:	f7ff fce7 	bl	8015400 <ip_reass_dequeue_datagram>
 8015a32:	e006      	b.n	8015a42 <ip4_reass+0x312>
    goto nullreturn;
 8015a34:	bf00      	nop
 8015a36:	e004      	b.n	8015a42 <ip4_reass+0x312>
    goto nullreturn;
 8015a38:	bf00      	nop
 8015a3a:	e002      	b.n	8015a42 <ip4_reass+0x312>
      goto nullreturn;
 8015a3c:	bf00      	nop
 8015a3e:	e000      	b.n	8015a42 <ip4_reass+0x312>
  }

nullreturn:
 8015a40:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f7f7 fdd4 	bl	800d5f0 <pbuf_free>
  return NULL;
 8015a48:	2300      	movs	r3, #0
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3738      	adds	r7, #56	@ 0x38
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	0801a35c 	.word	0x0801a35c
 8015a58:	0801a4e8 	.word	0x0801a4e8
 8015a5c:	0801a3a4 	.word	0x0801a3a4
 8015a60:	20008970 	.word	0x20008970
 8015a64:	0801a4f4 	.word	0x0801a4f4

08015a68 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015a6c:	2005      	movs	r0, #5
 8015a6e:	f7f6 fed9 	bl	800c824 <memp_malloc>
 8015a72:	4603      	mov	r3, r0
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d106      	bne.n	8015a94 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015a86:	4b07      	ldr	r3, [pc, #28]	@ (8015aa4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015a88:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015a8c:	4906      	ldr	r1, [pc, #24]	@ (8015aa8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015a8e:	4807      	ldr	r0, [pc, #28]	@ (8015aac <ip_frag_free_pbuf_custom_ref+0x34>)
 8015a90:	f001 f9be 	bl	8016e10 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015a94:	6879      	ldr	r1, [r7, #4]
 8015a96:	2005      	movs	r0, #5
 8015a98:	f7f6 ff34 	bl	800c904 <memp_free>
}
 8015a9c:	bf00      	nop
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	0801a35c 	.word	0x0801a35c
 8015aa8:	0801a514 	.word	0x0801a514
 8015aac:	0801a3a4 	.word	0x0801a3a4

08015ab0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b084      	sub	sp, #16
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d106      	bne.n	8015ad0 <ipfrag_free_pbuf_custom+0x20>
 8015ac2:	4b11      	ldr	r3, [pc, #68]	@ (8015b08 <ipfrag_free_pbuf_custom+0x58>)
 8015ac4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015ac8:	4910      	ldr	r1, [pc, #64]	@ (8015b0c <ipfrag_free_pbuf_custom+0x5c>)
 8015aca:	4811      	ldr	r0, [pc, #68]	@ (8015b10 <ipfrag_free_pbuf_custom+0x60>)
 8015acc:	f001 f9a0 	bl	8016e10 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015ad0:	68fa      	ldr	r2, [r7, #12]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d006      	beq.n	8015ae6 <ipfrag_free_pbuf_custom+0x36>
 8015ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8015b08 <ipfrag_free_pbuf_custom+0x58>)
 8015ada:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015ade:	490d      	ldr	r1, [pc, #52]	@ (8015b14 <ipfrag_free_pbuf_custom+0x64>)
 8015ae0:	480b      	ldr	r0, [pc, #44]	@ (8015b10 <ipfrag_free_pbuf_custom+0x60>)
 8015ae2:	f001 f995 	bl	8016e10 <iprintf>
  if (pcr->original != NULL) {
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	695b      	ldr	r3, [r3, #20]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d004      	beq.n	8015af8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	695b      	ldr	r3, [r3, #20]
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7f7 fd7c 	bl	800d5f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015af8:	68f8      	ldr	r0, [r7, #12]
 8015afa:	f7ff ffbd 	bl	8015a78 <ip_frag_free_pbuf_custom_ref>
}
 8015afe:	bf00      	nop
 8015b00:	3710      	adds	r7, #16
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	0801a35c 	.word	0x0801a35c
 8015b0c:	0801a520 	.word	0x0801a520
 8015b10:	0801a3a4 	.word	0x0801a3a4
 8015b14:	0801a52c 	.word	0x0801a52c

08015b18 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b094      	sub	sp, #80	@ 0x50
 8015b1c:	af02      	add	r7, sp, #8
 8015b1e:	60f8      	str	r0, [r7, #12]
 8015b20:	60b9      	str	r1, [r7, #8]
 8015b22:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015b24:	2300      	movs	r3, #0
 8015b26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015b2e:	3b14      	subs	r3, #20
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	da00      	bge.n	8015b36 <ip4_frag+0x1e>
 8015b34:	3307      	adds	r3, #7
 8015b36:	10db      	asrs	r3, r3, #3
 8015b38:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015b3a:	2314      	movs	r3, #20
 8015b3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b46:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	f003 030f 	and.w	r3, r3, #15
 8015b50:	b2db      	uxtb	r3, r3
 8015b52:	009b      	lsls	r3, r3, #2
 8015b54:	b2db      	uxtb	r3, r3
 8015b56:	2b14      	cmp	r3, #20
 8015b58:	d002      	beq.n	8015b60 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015b5a:	f06f 0305 	mvn.w	r3, #5
 8015b5e:	e110      	b.n	8015d82 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	895b      	ldrh	r3, [r3, #10]
 8015b64:	2b13      	cmp	r3, #19
 8015b66:	d809      	bhi.n	8015b7c <ip4_frag+0x64>
 8015b68:	4b88      	ldr	r3, [pc, #544]	@ (8015d8c <ip4_frag+0x274>)
 8015b6a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015b6e:	4988      	ldr	r1, [pc, #544]	@ (8015d90 <ip4_frag+0x278>)
 8015b70:	4888      	ldr	r0, [pc, #544]	@ (8015d94 <ip4_frag+0x27c>)
 8015b72:	f001 f94d 	bl	8016e10 <iprintf>
 8015b76:	f06f 0305 	mvn.w	r3, #5
 8015b7a:	e102      	b.n	8015d82 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b7e:	88db      	ldrh	r3, [r3, #6]
 8015b80:	b29b      	uxth	r3, r3
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7f6 f9da 	bl	800bf3c <lwip_htons>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015b8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015b8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b92:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015b96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	891b      	ldrh	r3, [r3, #8]
 8015ba2:	3b14      	subs	r3, #20
 8015ba4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015ba8:	e0e1      	b.n	8015d6e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015baa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015bac:	00db      	lsls	r3, r3, #3
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015bb4:	4293      	cmp	r3, r2
 8015bb6:	bf28      	it	cs
 8015bb8:	4613      	movcs	r3, r2
 8015bba:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015bbc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015bc0:	2114      	movs	r1, #20
 8015bc2:	200e      	movs	r0, #14
 8015bc4:	f7f7 fa30 	bl	800d028 <pbuf_alloc>
 8015bc8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8015bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	f000 80d5 	beq.w	8015d7c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bd4:	895b      	ldrh	r3, [r3, #10]
 8015bd6:	2b13      	cmp	r3, #19
 8015bd8:	d806      	bhi.n	8015be8 <ip4_frag+0xd0>
 8015bda:	4b6c      	ldr	r3, [pc, #432]	@ (8015d8c <ip4_frag+0x274>)
 8015bdc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8015be0:	496d      	ldr	r1, [pc, #436]	@ (8015d98 <ip4_frag+0x280>)
 8015be2:	486c      	ldr	r0, [pc, #432]	@ (8015d94 <ip4_frag+0x27c>)
 8015be4:	f001 f914 	bl	8016e10 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bea:	685b      	ldr	r3, [r3, #4]
 8015bec:	2214      	movs	r2, #20
 8015bee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f001 f9e8 	bl	8016fc6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8015bfc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015bfe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8015c02:	e064      	b.n	8015cce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	895a      	ldrh	r2, [r3, #10]
 8015c08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015c0a:	1ad3      	subs	r3, r2, r3
 8015c0c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	895b      	ldrh	r3, [r3, #10]
 8015c12:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d906      	bls.n	8015c26 <ip4_frag+0x10e>
 8015c18:	4b5c      	ldr	r3, [pc, #368]	@ (8015d8c <ip4_frag+0x274>)
 8015c1a:	f240 322d 	movw	r2, #813	@ 0x32d
 8015c1e:	495f      	ldr	r1, [pc, #380]	@ (8015d9c <ip4_frag+0x284>)
 8015c20:	485c      	ldr	r0, [pc, #368]	@ (8015d94 <ip4_frag+0x27c>)
 8015c22:	f001 f8f5 	bl	8016e10 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015c26:	8bfa      	ldrh	r2, [r7, #30]
 8015c28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	bf28      	it	cs
 8015c30:	4613      	movcs	r3, r2
 8015c32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015c36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d105      	bne.n	8015c4a <ip4_frag+0x132>
        poff = 0;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	60fb      	str	r3, [r7, #12]
        continue;
 8015c48:	e041      	b.n	8015cce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015c4a:	f7ff ff0d 	bl	8015a68 <ip_frag_alloc_pbuf_custom_ref>
 8015c4e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015c50:	69bb      	ldr	r3, [r7, #24]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d103      	bne.n	8015c5e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015c56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015c58:	f7f7 fcca 	bl	800d5f0 <pbuf_free>
        goto memerr;
 8015c5c:	e08f      	b.n	8015d7e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015c5e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015c64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015c66:	4413      	add	r3, r2
 8015c68:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015c6c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015c70:	9201      	str	r2, [sp, #4]
 8015c72:	9300      	str	r3, [sp, #0]
 8015c74:	4603      	mov	r3, r0
 8015c76:	2241      	movs	r2, #65	@ 0x41
 8015c78:	2000      	movs	r0, #0
 8015c7a:	f7f7 faff 	bl	800d27c <pbuf_alloced_custom>
 8015c7e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d106      	bne.n	8015c94 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015c86:	69b8      	ldr	r0, [r7, #24]
 8015c88:	f7ff fef6 	bl	8015a78 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015c8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015c8e:	f7f7 fcaf 	bl	800d5f0 <pbuf_free>
        goto memerr;
 8015c92:	e074      	b.n	8015d7e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015c94:	68f8      	ldr	r0, [r7, #12]
 8015c96:	f7f7 fd4b 	bl	800d730 <pbuf_ref>
      pcr->original = p;
 8015c9a:	69bb      	ldr	r3, [r7, #24]
 8015c9c:	68fa      	ldr	r2, [r7, #12]
 8015c9e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015ca0:	69bb      	ldr	r3, [r7, #24]
 8015ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8015da0 <ip4_frag+0x288>)
 8015ca4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015ca6:	6979      	ldr	r1, [r7, #20]
 8015ca8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015caa:	f7f7 fd63 	bl	800d774 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015cae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015cb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015cb6:	1ad3      	subs	r3, r2, r3
 8015cb8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015cbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d004      	beq.n	8015cce <ip4_frag+0x1b6>
        poff = 0;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015cce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d196      	bne.n	8015c04 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015cd6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015cd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015cdc:	4413      	add	r3, r2
 8015cde:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015ce4:	f1a3 0213 	sub.w	r2, r3, #19
 8015ce8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015cec:	429a      	cmp	r2, r3
 8015cee:	bfcc      	ite	gt
 8015cf0:	2301      	movgt	r3, #1
 8015cf2:	2300      	movle	r3, #0
 8015cf4:	b2db      	uxtb	r3, r3
 8015cf6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015cf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8015d02:	6a3b      	ldr	r3, [r7, #32]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d002      	beq.n	8015d0e <ip4_frag+0x1f6>
 8015d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d003      	beq.n	8015d16 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015d0e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015d10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015d14:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015d16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7f6 f90f 	bl	800bf3c <lwip_htons>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	461a      	mov	r2, r3
 8015d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d24:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015d26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015d28:	3314      	adds	r3, #20
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f6 f905 	bl	800bf3c <lwip_htons>
 8015d32:	4603      	mov	r3, r0
 8015d34:	461a      	mov	r2, r3
 8015d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d38:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	729a      	strb	r2, [r3, #10]
 8015d40:	2200      	movs	r2, #0
 8015d42:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	695b      	ldr	r3, [r3, #20]
 8015d48:	687a      	ldr	r2, [r7, #4]
 8015d4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015d4c:	68b8      	ldr	r0, [r7, #8]
 8015d4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015d50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015d52:	f7f7 fc4d 	bl	800d5f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015d56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015d5c:	1ad3      	subs	r3, r2, r3
 8015d5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015d62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015d66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015d68:	4413      	add	r3, r2
 8015d6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015d6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	f47f af19 	bne.w	8015baa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015d78:	2300      	movs	r3, #0
 8015d7a:	e002      	b.n	8015d82 <ip4_frag+0x26a>
      goto memerr;
 8015d7c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	3748      	adds	r7, #72	@ 0x48
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd80      	pop	{r7, pc}
 8015d8a:	bf00      	nop
 8015d8c:	0801a35c 	.word	0x0801a35c
 8015d90:	0801a538 	.word	0x0801a538
 8015d94:	0801a3a4 	.word	0x0801a3a4
 8015d98:	0801a554 	.word	0x0801a554
 8015d9c:	0801a574 	.word	0x0801a574
 8015da0:	08015ab1 	.word	0x08015ab1

08015da4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b086      	sub	sp, #24
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015dae:	230e      	movs	r3, #14
 8015db0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	895b      	ldrh	r3, [r3, #10]
 8015db6:	2b0e      	cmp	r3, #14
 8015db8:	d96e      	bls.n	8015e98 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	7bdb      	ldrb	r3, [r3, #15]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d106      	bne.n	8015dd0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015dc8:	3301      	adds	r3, #1
 8015dca:	b2da      	uxtb	r2, r3
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	7b1a      	ldrb	r2, [r3, #12]
 8015dda:	7b5b      	ldrb	r3, [r3, #13]
 8015ddc:	021b      	lsls	r3, r3, #8
 8015dde:	4313      	orrs	r3, r2
 8015de0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	f003 0301 	and.w	r3, r3, #1
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d023      	beq.n	8015e36 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	d10f      	bne.n	8015e16 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	785b      	ldrb	r3, [r3, #1]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d11b      	bne.n	8015e36 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e02:	2b5e      	cmp	r3, #94	@ 0x5e
 8015e04:	d117      	bne.n	8015e36 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7b5b      	ldrb	r3, [r3, #13]
 8015e0a:	f043 0310 	orr.w	r3, r3, #16
 8015e0e:	b2da      	uxtb	r2, r3
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	735a      	strb	r2, [r3, #13]
 8015e14:	e00f      	b.n	8015e36 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	2206      	movs	r2, #6
 8015e1a:	4928      	ldr	r1, [pc, #160]	@ (8015ebc <ethernet_input+0x118>)
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f001 f84c 	bl	8016eba <memcmp>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d106      	bne.n	8015e36 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	7b5b      	ldrb	r3, [r3, #13]
 8015e2c:	f043 0308 	orr.w	r3, r3, #8
 8015e30:	b2da      	uxtb	r2, r3
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015e36:	89fb      	ldrh	r3, [r7, #14]
 8015e38:	2b08      	cmp	r3, #8
 8015e3a:	d003      	beq.n	8015e44 <ethernet_input+0xa0>
 8015e3c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015e40:	d014      	beq.n	8015e6c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015e42:	e032      	b.n	8015eaa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015e4a:	f003 0308 	and.w	r3, r3, #8
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d024      	beq.n	8015e9c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015e52:	8afb      	ldrh	r3, [r7, #22]
 8015e54:	4619      	mov	r1, r3
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f7f7 fb44 	bl	800d4e4 <pbuf_remove_header>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d11e      	bne.n	8015ea0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015e62:	6839      	ldr	r1, [r7, #0]
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f7fe ff21 	bl	8014cac <ip4_input>
      break;
 8015e6a:	e013      	b.n	8015e94 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015e72:	f003 0308 	and.w	r3, r3, #8
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d014      	beq.n	8015ea4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015e7a:	8afb      	ldrh	r3, [r7, #22]
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f7f7 fb30 	bl	800d4e4 <pbuf_remove_header>
 8015e84:	4603      	mov	r3, r0
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d10e      	bne.n	8015ea8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015e8a:	6839      	ldr	r1, [r7, #0]
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f7fe f8c1 	bl	8014014 <etharp_input>
      break;
 8015e92:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015e94:	2300      	movs	r3, #0
 8015e96:	e00c      	b.n	8015eb2 <ethernet_input+0x10e>
    goto free_and_return;
 8015e98:	bf00      	nop
 8015e9a:	e006      	b.n	8015eaa <ethernet_input+0x106>
        goto free_and_return;
 8015e9c:	bf00      	nop
 8015e9e:	e004      	b.n	8015eaa <ethernet_input+0x106>
        goto free_and_return;
 8015ea0:	bf00      	nop
 8015ea2:	e002      	b.n	8015eaa <ethernet_input+0x106>
        goto free_and_return;
 8015ea4:	bf00      	nop
 8015ea6:	e000      	b.n	8015eaa <ethernet_input+0x106>
        goto free_and_return;
 8015ea8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f7f7 fba0 	bl	800d5f0 <pbuf_free>
  return ERR_OK;
 8015eb0:	2300      	movs	r3, #0
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	3718      	adds	r7, #24
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	0801a718 	.word	0x0801a718

08015ec0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b086      	sub	sp, #24
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
 8015ecc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015ece:	8c3b      	ldrh	r3, [r7, #32]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7f6 f833 	bl	800bf3c <lwip_htons>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015eda:	210e      	movs	r1, #14
 8015edc:	68b8      	ldr	r0, [r7, #8]
 8015ede:	f7f7 faf1 	bl	800d4c4 <pbuf_add_header>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d125      	bne.n	8015f34 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015eee:	693b      	ldr	r3, [r7, #16]
 8015ef0:	8afa      	ldrh	r2, [r7, #22]
 8015ef2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	2206      	movs	r2, #6
 8015ef8:	6839      	ldr	r1, [r7, #0]
 8015efa:	4618      	mov	r0, r3
 8015efc:	f001 f863 	bl	8016fc6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	3306      	adds	r3, #6
 8015f04:	2206      	movs	r2, #6
 8015f06:	6879      	ldr	r1, [r7, #4]
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f001 f85c 	bl	8016fc6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015f14:	2b06      	cmp	r3, #6
 8015f16:	d006      	beq.n	8015f26 <ethernet_output+0x66>
 8015f18:	4b0a      	ldr	r3, [pc, #40]	@ (8015f44 <ethernet_output+0x84>)
 8015f1a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015f1e:	490a      	ldr	r1, [pc, #40]	@ (8015f48 <ethernet_output+0x88>)
 8015f20:	480a      	ldr	r0, [pc, #40]	@ (8015f4c <ethernet_output+0x8c>)
 8015f22:	f000 ff75 	bl	8016e10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	699b      	ldr	r3, [r3, #24]
 8015f2a:	68b9      	ldr	r1, [r7, #8]
 8015f2c:	68f8      	ldr	r0, [r7, #12]
 8015f2e:	4798      	blx	r3
 8015f30:	4603      	mov	r3, r0
 8015f32:	e002      	b.n	8015f3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015f34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015f36:	f06f 0301 	mvn.w	r3, #1
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3718      	adds	r7, #24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	0801a584 	.word	0x0801a584
 8015f48:	0801a5bc 	.word	0x0801a5bc
 8015f4c:	0801a5f0 	.word	0x0801a5f0

08015f50 <udp_receive_callback>:
#include <string.h>

extern ip4_addr_t ipaddr;

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr, u16_t port){
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b088      	sub	sp, #32
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	607a      	str	r2, [r7, #4]
 8015f5c:	603b      	str	r3, [r7, #0]
	if (!p || !p ->payload){
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d003      	beq.n	8015f6c <udp_receive_callback+0x1c>
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d106      	bne.n	8015f7a <udp_receive_callback+0x2a>
		if (p) pbuf_free(p);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d06a      	beq.n	8016048 <udp_receive_callback+0xf8>
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f7f7 fb3c 	bl	800d5f0 <pbuf_free>
 8015f78:	e067      	b.n	801604a <udp_receive_callback+0xfa>
		return;
	}

	test_command_t *cmd = (test_command_t *)p->payload;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	685b      	ldr	r3, [r3, #4]
 8015f7e:	61fb      	str	r3, [r7, #28]
	    test_result_t result = {
	        .test_id = cmd->test_id,
 8015f80:	69fb      	ldr	r3, [r7, #28]
 8015f82:	681b      	ldr	r3, [r3, #0]
	    test_result_t result = {
 8015f84:	613b      	str	r3, [r7, #16]
 8015f86:	23ff      	movs	r3, #255	@ 0xff
 8015f88:	753b      	strb	r3, [r7, #20]
	        .result = TEST_FAILURE
	};

	if (cmd->peripheral & PERIPHERAL_TIMER){
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	791b      	ldrb	r3, [r3, #4]
 8015f8e:	f003 0301 	and.w	r3, r3, #1
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d004      	beq.n	8015fa0 <udp_receive_callback+0x50>
			result.result = test_timer(cmd);
 8015f96:	69f8      	ldr	r0, [r7, #28]
 8015f98:	f000 fca8 	bl	80168ec <test_timer>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	753b      	strb	r3, [r7, #20]
	}
	if (cmd->peripheral & PERIPHERAL_UART){
 8015fa0:	69fb      	ldr	r3, [r7, #28]
 8015fa2:	791b      	ldrb	r3, [r3, #4]
 8015fa4:	f003 0302 	and.w	r3, r3, #2
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d004      	beq.n	8015fb6 <udp_receive_callback+0x66>
		result.result = test_uart(cmd);
 8015fac:	69f8      	ldr	r0, [r7, #28]
 8015fae:	f000 fd53 	bl	8016a58 <test_uart>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	753b      	strb	r3, [r7, #20]
	}
	if (cmd->peripheral & PERIPHERAL_SPI){
 8015fb6:	69fb      	ldr	r3, [r7, #28]
 8015fb8:	791b      	ldrb	r3, [r3, #4]
 8015fba:	f003 0304 	and.w	r3, r3, #4
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d004      	beq.n	8015fcc <udp_receive_callback+0x7c>
			result.result = test_spi(cmd);
 8015fc2:	69f8      	ldr	r0, [r7, #28]
 8015fc4:	f000 fb24 	bl	8016610 <test_spi>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	753b      	strb	r3, [r7, #20]
	}
	if (cmd->peripheral & PERIPHERAL_I2C){
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	791b      	ldrb	r3, [r3, #4]
 8015fd0:	f003 0308 	and.w	r3, r3, #8
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d004      	beq.n	8015fe2 <udp_receive_callback+0x92>
			result.result = test_i2c(cmd);
 8015fd8:	69f8      	ldr	r0, [r7, #28]
 8015fda:	f000 f931 	bl	8016240 <test_i2c>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	753b      	strb	r3, [r7, #20]
	}
	if (cmd->peripheral & PERIPHERAL_ADC){
 8015fe2:	69fb      	ldr	r3, [r7, #28]
 8015fe4:	791b      	ldrb	r3, [r3, #4]
 8015fe6:	f003 0310 	and.w	r3, r3, #16
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d004      	beq.n	8015ff8 <udp_receive_callback+0xa8>
			result.result = test_adc(cmd);
 8015fee:	69f8      	ldr	r0, [r7, #28]
 8015ff0:	f000 f868 	bl	80160c4 <test_adc>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	753b      	strb	r3, [r7, #20]
	}
	if (cmd->peripheral & PING){
 8015ff8:	69fb      	ldr	r3, [r7, #28]
 8015ffa:	791b      	ldrb	r3, [r3, #4]
 8015ffc:	f003 0320 	and.w	r3, r3, #32
 8016000:	2b00      	cmp	r3, #0
 8016002:	d001      	beq.n	8016008 <udp_receive_callback+0xb8>
			result.result = TEST_SUCCESS;
 8016004:	2301      	movs	r3, #1
 8016006:	753b      	strb	r3, [r7, #20]
	}


	struct pbuf *resp = pbuf_alloc(PBUF_TRANSPORT, sizeof(result), PBUF_RAM);
 8016008:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801600c:	2105      	movs	r1, #5
 801600e:	2036      	movs	r0, #54	@ 0x36
 8016010:	f7f7 f80a 	bl	800d028 <pbuf_alloc>
 8016014:	61b8      	str	r0, [r7, #24]
	if (resp) {
 8016016:	69bb      	ldr	r3, [r7, #24]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d011      	beq.n	8016040 <udp_receive_callback+0xf0>
		memcpy(resp->payload, &result, sizeof(result));
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	461a      	mov	r2, r3
 8016022:	f107 0310 	add.w	r3, r7, #16
 8016026:	6818      	ldr	r0, [r3, #0]
 8016028:	6010      	str	r0, [r2, #0]
 801602a:	791b      	ldrb	r3, [r3, #4]
 801602c:	7113      	strb	r3, [r2, #4]
	    udp_sendto(pcb, resp, addr, port);
 801602e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016030:	683a      	ldr	r2, [r7, #0]
 8016032:	69b9      	ldr	r1, [r7, #24]
 8016034:	68b8      	ldr	r0, [r7, #8]
 8016036:	f7fd f9dd 	bl	80133f4 <udp_sendto>
	    pbuf_free(resp);
 801603a:	69b8      	ldr	r0, [r7, #24]
 801603c:	f7f7 fad8 	bl	800d5f0 <pbuf_free>
	}

	pbuf_free(p);
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f7f7 fad5 	bl	800d5f0 <pbuf_free>
 8016046:	e000      	b.n	801604a <udp_receive_callback+0xfa>
		return;
 8016048:	bf00      	nop
}
 801604a:	3720      	adds	r7, #32
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}

08016050 <udp_server_init>:

void udp_server_init(void){
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
	struct udp_pcb *pcb = udp_new();
 8016056:	f7fd fc6d 	bl	8013934 <udp_new>
 801605a:	6078      	str	r0, [r7, #4]
	err_t bind;
	bind = udp_bind(pcb, &ipaddr, PORT);
 801605c:	f242 3228 	movw	r2, #9000	@ 0x2328
 8016060:	490b      	ldr	r1, [pc, #44]	@ (8016090 <udp_server_init+0x40>)
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f7fd fb7c 	bl	8013760 <udp_bind>
 8016068:	4603      	mov	r3, r0
 801606a:	70fb      	strb	r3, [r7, #3]

	if (bind == ERR_OK)
 801606c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d105      	bne.n	8016080 <udp_server_init+0x30>
	{
		udp_recv(pcb, udp_receive_callback, NULL);
 8016074:	2200      	movs	r2, #0
 8016076:	4907      	ldr	r1, [pc, #28]	@ (8016094 <udp_server_init+0x44>)
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7fd fbf9 	bl	8013870 <udp_recv>
	{
		udp_remove(pcb);
	}


}
 801607e:	e002      	b.n	8016086 <udp_server_init+0x36>
		udp_remove(pcb);
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7fd fc15 	bl	80138b0 <udp_remove>
}
 8016086:	bf00      	nop
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	20000e54 	.word	0x20000e54
 8016094:	08015f51 	.word	0x08015f51

08016098 <HAL_ADC_ConvCpltCallback>:
extern ADC_HandleTypeDef hadc1;

static volatile uint8_t flag = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b082      	sub	sp, #8
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	4a06      	ldr	r2, [pc, #24]	@ (80160bc <HAL_ADC_ConvCpltCallback+0x24>)
 80160a4:	4293      	cmp	r3, r2
 80160a6:	d105      	bne.n	80160b4 <HAL_ADC_ConvCpltCallback+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80160a8:	4804      	ldr	r0, [pc, #16]	@ (80160bc <HAL_ADC_ConvCpltCallback+0x24>)
 80160aa:	f7ec fa85 	bl	80025b8 <HAL_ADC_Stop_DMA>
		flag = 1;
 80160ae:	4b04      	ldr	r3, [pc, #16]	@ (80160c0 <HAL_ADC_ConvCpltCallback+0x28>)
 80160b0:	2201      	movs	r2, #1
 80160b2:	701a      	strb	r2, [r3, #0]
	}
}
 80160b4:	bf00      	nop
 80160b6:	3708      	adds	r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	200001e4 	.word	0x200001e4
 80160c0:	20008976 	.word	0x20008976

080160c4 <test_adc>:


uint8_t test_adc(const test_command_t *cmd){
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b086      	sub	sp, #24
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]

	uint32_t expected_value = 4095;
 80160cc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80160d0:	613b      	str	r3, [r7, #16]
	uint32_t adc_value = 0;
 80160d2:	2300      	movs	r3, #0
 80160d4:	60bb      	str	r3, [r7, #8]

	for(uint8_t i = 0; i < cmd->iterations ; ++i){
 80160d6:	2300      	movs	r3, #0
 80160d8:	75fb      	strb	r3, [r7, #23]
 80160da:	e02b      	b.n	8016134 <test_adc+0x70>
		flag = 0;
 80160dc:	4b1a      	ldr	r3, [pc, #104]	@ (8016148 <test_adc+0x84>)
 80160de:	2200      	movs	r2, #0
 80160e0:	701a      	strb	r2, [r3, #0]
		if(HAL_ADC_Start_DMA(&hadc1, &adc_value, 1) != HAL_OK)
 80160e2:	f107 0308 	add.w	r3, r7, #8
 80160e6:	2201      	movs	r2, #1
 80160e8:	4619      	mov	r1, r3
 80160ea:	4818      	ldr	r0, [pc, #96]	@ (801614c <test_adc+0x88>)
 80160ec:	f7ec f966 	bl	80023bc <HAL_ADC_Start_DMA>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d001      	beq.n	80160fa <test_adc+0x36>
			 return TEST_FAILURE;
 80160f6:	23ff      	movs	r3, #255	@ 0xff
 80160f8:	e022      	b.n	8016140 <test_adc+0x7c>

		uint32_t t0 = HAL_GetTick();
 80160fa:	f7eb ffdb 	bl	80020b4 <HAL_GetTick>
 80160fe:	60f8      	str	r0, [r7, #12]
		while (!flag){
 8016100:	e009      	b.n	8016116 <test_adc+0x52>
			if (HAL_GetTick() - t0 > TIMEOUT){
 8016102:	f7eb ffd7 	bl	80020b4 <HAL_GetTick>
 8016106:	4602      	mov	r2, r0
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	1ad3      	subs	r3, r2, r3
 801610c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016110:	d901      	bls.n	8016116 <test_adc+0x52>
				return TEST_FAILURE;
 8016112:	23ff      	movs	r3, #255	@ 0xff
 8016114:	e014      	b.n	8016140 <test_adc+0x7c>
		while (!flag){
 8016116:	4b0c      	ldr	r3, [pc, #48]	@ (8016148 <test_adc+0x84>)
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	b2db      	uxtb	r3, r3
 801611c:	2b00      	cmp	r3, #0
 801611e:	d0f0      	beq.n	8016102 <test_adc+0x3e>
			}
		}

		if( expected_value - adc_value > 50)
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	693a      	ldr	r2, [r7, #16]
 8016124:	1ad3      	subs	r3, r2, r3
 8016126:	2b32      	cmp	r3, #50	@ 0x32
 8016128:	d901      	bls.n	801612e <test_adc+0x6a>
			return TEST_FAILURE;
 801612a:	23ff      	movs	r3, #255	@ 0xff
 801612c:	e008      	b.n	8016140 <test_adc+0x7c>
	for(uint8_t i = 0; i < cmd->iterations ; ++i){
 801612e:	7dfb      	ldrb	r3, [r7, #23]
 8016130:	3301      	adds	r3, #1
 8016132:	75fb      	strb	r3, [r7, #23]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	795b      	ldrb	r3, [r3, #5]
 8016138:	7dfa      	ldrb	r2, [r7, #23]
 801613a:	429a      	cmp	r2, r3
 801613c:	d3ce      	bcc.n	80160dc <test_adc+0x18>
	}
	return TEST_SUCCESS;
 801613e:	2301      	movs	r3, #1
}
 8016140:	4618      	mov	r0, r3
 8016142:	3718      	adds	r7, #24
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}
 8016148:	20008976 	.word	0x20008976
 801614c:	200001e4 	.word	0x200001e4

08016150 <wait_flag>:
extern I2C_HandleTypeDef hi2c4;

static volatile uint8_t i2c2_tx_done,  i2c2_rx_done,  i2c4_rx_done, i2c4_tx_done;

static uint8_t wait_flag(volatile uint8_t *flag, uint32_t timeout_ms)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b084      	sub	sp, #16
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	6039      	str	r1, [r7, #0]
    uint32_t t0 = HAL_GetTick();
 801615a:	f7eb ffab 	bl	80020b4 <HAL_GetTick>
 801615e:	60f8      	str	r0, [r7, #12]
    while (!(*flag))
 8016160:	e009      	b.n	8016176 <wait_flag+0x26>
    {
        if (HAL_GetTick() - t0 > timeout_ms){
 8016162:	f7eb ffa7 	bl	80020b4 <HAL_GetTick>
 8016166:	4602      	mov	r2, r0
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	683a      	ldr	r2, [r7, #0]
 801616e:	429a      	cmp	r2, r3
 8016170:	d201      	bcs.n	8016176 <wait_flag+0x26>
        	return 1;
 8016172:	2301      	movs	r3, #1
 8016174:	e008      	b.n	8016188 <wait_flag+0x38>
    while (!(*flag))
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	b2db      	uxtb	r3, r3
 801617c:	2b00      	cmp	r3, #0
 801617e:	d0f0      	beq.n	8016162 <wait_flag+0x12>
        }
    }
    *flag =0;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2200      	movs	r2, #0
 8016184:	701a      	strb	r2, [r3, #0]
    return 0;
 8016186:	2300      	movs	r3, #0
}
 8016188:	4618      	mov	r0, r3
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8016190:	b480      	push	{r7}
 8016192:	b083      	sub	sp, #12
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2){
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	4a06      	ldr	r2, [pc, #24]	@ (80161b4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 801619c:	4293      	cmp	r3, r2
 801619e:	d102      	bne.n	80161a6 <HAL_I2C_MasterTxCpltCallback+0x16>
		i2c2_tx_done = 1;
 80161a0:	4b05      	ldr	r3, [pc, #20]	@ (80161b8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80161a2:	2201      	movs	r2, #1
 80161a4:	701a      	strb	r2, [r3, #0]
	}
}
 80161a6:	bf00      	nop
 80161a8:	370c      	adds	r7, #12
 80161aa:	46bd      	mov	sp, r7
 80161ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b0:	4770      	bx	lr
 80161b2:	bf00      	nop
 80161b4:	200002e0 	.word	0x200002e0
 80161b8:	20008977 	.word	0x20008977

080161bc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80161bc:	b480      	push	{r7}
 80161be:	b083      	sub	sp, #12
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2){
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	4a06      	ldr	r2, [pc, #24]	@ (80161e0 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d102      	bne.n	80161d2 <HAL_I2C_MasterRxCpltCallback+0x16>
		i2c2_rx_done = 1;
 80161cc:	4b05      	ldr	r3, [pc, #20]	@ (80161e4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80161ce:	2201      	movs	r2, #1
 80161d0:	701a      	strb	r2, [r3, #0]
	}
}
 80161d2:	bf00      	nop
 80161d4:	370c      	adds	r7, #12
 80161d6:	46bd      	mov	sp, r7
 80161d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161dc:	4770      	bx	lr
 80161de:	bf00      	nop
 80161e0:	200002e0 	.word	0x200002e0
 80161e4:	20008978 	.word	0x20008978

080161e8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80161e8:	b480      	push	{r7}
 80161ea:	b083      	sub	sp, #12
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c4){
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	4a06      	ldr	r2, [pc, #24]	@ (801620c <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80161f4:	4293      	cmp	r3, r2
 80161f6:	d102      	bne.n	80161fe <HAL_I2C_SlaveRxCpltCallback+0x16>
		i2c4_rx_done = 1;
 80161f8:	4b05      	ldr	r3, [pc, #20]	@ (8016210 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80161fa:	2201      	movs	r2, #1
 80161fc:	701a      	strb	r2, [r3, #0]
	}
}
 80161fe:	bf00      	nop
 8016200:	370c      	adds	r7, #12
 8016202:	46bd      	mov	sp, r7
 8016204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016208:	4770      	bx	lr
 801620a:	bf00      	nop
 801620c:	20000334 	.word	0x20000334
 8016210:	20008979 	.word	0x20008979

08016214 <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8016214:	b480      	push	{r7}
 8016216:	b083      	sub	sp, #12
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c4){
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	4a06      	ldr	r2, [pc, #24]	@ (8016238 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8016220:	4293      	cmp	r3, r2
 8016222:	d102      	bne.n	801622a <HAL_I2C_SlaveTxCpltCallback+0x16>
		i2c4_tx_done = 1;
 8016224:	4b05      	ldr	r3, [pc, #20]	@ (801623c <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8016226:	2201      	movs	r2, #1
 8016228:	701a      	strb	r2, [r3, #0]
	}
}
 801622a:	bf00      	nop
 801622c:	370c      	adds	r7, #12
 801622e:	46bd      	mov	sp, r7
 8016230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	20000334 	.word	0x20000334
 801623c:	2000897a 	.word	0x2000897a

08016240 <test_i2c>:


uint8_t test_i2c(const test_command_t *cmd){
 8016240:	b580      	push	{r7, lr}
 8016242:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8016246:	af00      	add	r7, sp, #0
 8016248:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801624c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016250:	6018      	str	r0, [r3, #0]

	uint32_t slave_addr = hi2c4.Init.OwnAddress1;
 8016252:	4ba1      	ldr	r3, [pc, #644]	@ (80164d8 <test_i2c+0x298>)
 8016254:	689b      	ldr	r3, [r3, #8]
 8016256:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408

    uint8_t rxBuf4[MAX_PATTERN_LEN] = {};
 801625a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801625e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8016262:	4618      	mov	r0, r3
 8016264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016268:	461a      	mov	r2, r3
 801626a:	2100      	movs	r1, #0
 801626c:	f000 fe35 	bl	8016eda <memset>
    uint8_t rxBuf2[MAX_PATTERN_LEN] = {};
 8016270:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016274:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8016278:	4618      	mov	r0, r3
 801627a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801627e:	461a      	mov	r2, r3
 8016280:	2100      	movs	r1, #0
 8016282:	f000 fe2a 	bl	8016eda <memset>
    uint8_t txBuf4[MAX_PATTERN_LEN] = {};
 8016286:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801628a:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 801628e:	4618      	mov	r0, r3
 8016290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016294:	461a      	mov	r2, r3
 8016296:	2100      	movs	r1, #0
 8016298:	f000 fe1f 	bl	8016eda <memset>
    uint8_t txBuf2[MAX_PATTERN_LEN] = {};
 801629c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80162a0:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80162a4:	4618      	mov	r0, r3
 80162a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80162aa:	461a      	mov	r2, r3
 80162ac:	2100      	movs	r1, #0
 80162ae:	f000 fe14 	bl	8016eda <memset>

	for(uint8_t i = 0; i < cmd->iterations ; ++i){
 80162b2:	2300      	movs	r3, #0
 80162b4:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
 80162b8:	e0fd      	b.n	80164b6 <test_i2c+0x276>

        memset(rxBuf4, 0 ,sizeof(rxBuf4));
 80162ba:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80162be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80162c2:	2100      	movs	r1, #0
 80162c4:	4618      	mov	r0, r3
 80162c6:	f000 fe08 	bl	8016eda <memset>
        memset(rxBuf2, 0 ,sizeof(rxBuf2));
 80162ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80162ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80162d2:	2100      	movs	r1, #0
 80162d4:	4618      	mov	r0, r3
 80162d6:	f000 fe00 	bl	8016eda <memset>
        memset(txBuf4, 0 ,sizeof(txBuf4));
 80162da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80162de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80162e2:	2100      	movs	r1, #0
 80162e4:	4618      	mov	r0, r3
 80162e6:	f000 fdf8 	bl	8016eda <memset>
        memset(txBuf2, 0 ,sizeof(txBuf2));
 80162ea:	f107 0308 	add.w	r3, r7, #8
 80162ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80162f2:	2100      	movs	r1, #0
 80162f4:	4618      	mov	r0, r3
 80162f6:	f000 fdf0 	bl	8016eda <memset>

    	i2c2_tx_done = 0;
 80162fa:	4b78      	ldr	r3, [pc, #480]	@ (80164dc <test_i2c+0x29c>)
 80162fc:	2200      	movs	r2, #0
 80162fe:	701a      	strb	r2, [r3, #0]
    	i2c2_rx_done = 0;
 8016300:	4b77      	ldr	r3, [pc, #476]	@ (80164e0 <test_i2c+0x2a0>)
 8016302:	2200      	movs	r2, #0
 8016304:	701a      	strb	r2, [r3, #0]
    	i2c4_tx_done = 0;
 8016306:	4b77      	ldr	r3, [pc, #476]	@ (80164e4 <test_i2c+0x2a4>)
 8016308:	2200      	movs	r2, #0
 801630a:	701a      	strb	r2, [r3, #0]
    	i2c4_rx_done = 0;
 801630c:	4b76      	ldr	r3, [pc, #472]	@ (80164e8 <test_i2c+0x2a8>)
 801630e:	2200      	movs	r2, #0
 8016310:	701a      	strb	r2, [r3, #0]

        memcpy(txBuf2, cmd->pattern, cmd->pattern_len);
 8016312:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016316:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	1dd9      	adds	r1, r3, #7
 801631e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016322:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	799b      	ldrb	r3, [r3, #6]
 801632a:	461a      	mov	r2, r3
 801632c:	f107 0308 	add.w	r3, r7, #8
 8016330:	4618      	mov	r0, r3
 8016332:	f000 fe48 	bl	8016fc6 <memcpy>
        if (memcmp(cmd->pattern, txBuf2, cmd->pattern_len) != 0)
 8016336:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801633a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	1dd8      	adds	r0, r3, #7
 8016342:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016346:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	799b      	ldrb	r3, [r3, #6]
 801634e:	461a      	mov	r2, r3
 8016350:	f107 0308 	add.w	r3, r7, #8
 8016354:	4619      	mov	r1, r3
 8016356:	f000 fdb0 	bl	8016eba <memcmp>
 801635a:	4603      	mov	r3, r0
 801635c:	2b00      	cmp	r3, #0
 801635e:	d001      	beq.n	8016364 <test_i2c+0x124>
             return TEST_FAILURE;
 8016360:	23ff      	movs	r3, #255	@ 0xff
 8016362:	e0b4      	b.n	80164ce <test_i2c+0x28e>

        while (hi2c4.State != HAL_I2C_STATE_READY) {}
 8016364:	bf00      	nop
 8016366:	4b5c      	ldr	r3, [pc, #368]	@ (80164d8 <test_i2c+0x298>)
 8016368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801636c:	b2db      	uxtb	r3, r3
 801636e:	2b20      	cmp	r3, #32
 8016370:	d1f9      	bne.n	8016366 <test_i2c+0x126>
		if(HAL_I2C_Slave_Receive_IT(&hi2c4,rxBuf4,cmd->pattern_len) != HAL_OK)
 8016372:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016376:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	799b      	ldrb	r3, [r3, #6]
 801637e:	461a      	mov	r2, r3
 8016380:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8016384:	4619      	mov	r1, r3
 8016386:	4854      	ldr	r0, [pc, #336]	@ (80164d8 <test_i2c+0x298>)
 8016388:	f7ee ffbe 	bl	8005308 <HAL_I2C_Slave_Receive_IT>
 801638c:	4603      	mov	r3, r0
 801638e:	2b00      	cmp	r3, #0
 8016390:	d001      	beq.n	8016396 <test_i2c+0x156>
			return TEST_FAILURE;
 8016392:	23ff      	movs	r3, #255	@ 0xff
 8016394:	e09b      	b.n	80164ce <test_i2c+0x28e>

		HAL_Delay(1);
 8016396:	2001      	movs	r0, #1
 8016398:	f7eb fe98 	bl	80020cc <HAL_Delay>

		if(HAL_I2C_Master_Transmit_IT(&hi2c2, 4, txBuf2, cmd->pattern_len) != HAL_OK)
 801639c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80163a0:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	799b      	ldrb	r3, [r3, #6]
 80163a8:	f107 0208 	add.w	r2, r7, #8
 80163ac:	2104      	movs	r1, #4
 80163ae:	484f      	ldr	r0, [pc, #316]	@ (80164ec <test_i2c+0x2ac>)
 80163b0:	f7ee fe34 	bl	800501c <HAL_I2C_Master_Transmit_IT>
 80163b4:	4603      	mov	r3, r0
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d001      	beq.n	80163be <test_i2c+0x17e>
			return TEST_FAILURE;
 80163ba:	23ff      	movs	r3, #255	@ 0xff
 80163bc:	e087      	b.n	80164ce <test_i2c+0x28e>

		HAL_Delay(1);
 80163be:	2001      	movs	r0, #1
 80163c0:	f7eb fe84 	bl	80020cc <HAL_Delay>

		if (wait_flag(&i2c2_tx_done, TIMEOUT) || wait_flag(&i2c4_rx_done, TIMEOUT))
 80163c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80163c8:	4844      	ldr	r0, [pc, #272]	@ (80164dc <test_i2c+0x29c>)
 80163ca:	f7ff fec1 	bl	8016150 <wait_flag>
 80163ce:	4603      	mov	r3, r0
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d107      	bne.n	80163e4 <test_i2c+0x1a4>
 80163d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80163d8:	4843      	ldr	r0, [pc, #268]	@ (80164e8 <test_i2c+0x2a8>)
 80163da:	f7ff feb9 	bl	8016150 <wait_flag>
 80163de:	4603      	mov	r3, r0
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d001      	beq.n	80163e8 <test_i2c+0x1a8>
			return TEST_FAILURE;
 80163e4:	23ff      	movs	r3, #255	@ 0xff
 80163e6:	e072      	b.n	80164ce <test_i2c+0x28e>

		memcpy(txBuf4, rxBuf4, cmd->pattern_len);
 80163e8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80163ec:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	799b      	ldrb	r3, [r3, #6]
 80163f4:	461a      	mov	r2, r3
 80163f6:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 80163fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80163fe:	4618      	mov	r0, r3
 8016400:	f000 fde1 	bl	8016fc6 <memcpy>

		if(HAL_I2C_Master_Receive_IT(&hi2c2, slave_addr, rxBuf2, cmd->pattern_len) != HAL_OK)
 8016404:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8016408:	b299      	uxth	r1, r3
 801640a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801640e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	799b      	ldrb	r3, [r3, #6]
 8016416:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801641a:	4834      	ldr	r0, [pc, #208]	@ (80164ec <test_i2c+0x2ac>)
 801641c:	f7ee fe96 	bl	800514c <HAL_I2C_Master_Receive_IT>
 8016420:	4603      	mov	r3, r0
 8016422:	2b00      	cmp	r3, #0
 8016424:	d001      	beq.n	801642a <test_i2c+0x1ea>
			return TEST_FAILURE;
 8016426:	23ff      	movs	r3, #255	@ 0xff
 8016428:	e051      	b.n	80164ce <test_i2c+0x28e>

		HAL_Delay(1);
 801642a:	2001      	movs	r0, #1
 801642c:	f7eb fe4e 	bl	80020cc <HAL_Delay>


		if(HAL_I2C_Slave_Transmit_IT(&hi2c4, txBuf4, cmd->pattern_len) != HAL_OK)
 8016430:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016434:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	799b      	ldrb	r3, [r3, #6]
 801643c:	461a      	mov	r2, r3
 801643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016442:	4619      	mov	r1, r3
 8016444:	4824      	ldr	r0, [pc, #144]	@ (80164d8 <test_i2c+0x298>)
 8016446:	f7ee fef1 	bl	800522c <HAL_I2C_Slave_Transmit_IT>
 801644a:	4603      	mov	r3, r0
 801644c:	2b00      	cmp	r3, #0
 801644e:	d001      	beq.n	8016454 <test_i2c+0x214>
		 	return TEST_FAILURE;
 8016450:	23ff      	movs	r3, #255	@ 0xff
 8016452:	e03c      	b.n	80164ce <test_i2c+0x28e>

		HAL_Delay(1);
 8016454:	2001      	movs	r0, #1
 8016456:	f7eb fe39 	bl	80020cc <HAL_Delay>


		if (wait_flag(&i2c4_tx_done, TIMEOUT) || wait_flag(&i2c2_rx_done, TIMEOUT))
 801645a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801645e:	4821      	ldr	r0, [pc, #132]	@ (80164e4 <test_i2c+0x2a4>)
 8016460:	f7ff fe76 	bl	8016150 <wait_flag>
 8016464:	4603      	mov	r3, r0
 8016466:	2b00      	cmp	r3, #0
 8016468:	d107      	bne.n	801647a <test_i2c+0x23a>
 801646a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801646e:	481c      	ldr	r0, [pc, #112]	@ (80164e0 <test_i2c+0x2a0>)
 8016470:	f7ff fe6e 	bl	8016150 <wait_flag>
 8016474:	4603      	mov	r3, r0
 8016476:	2b00      	cmp	r3, #0
 8016478:	d001      	beq.n	801647e <test_i2c+0x23e>
		    return TEST_FAILURE;
 801647a:	23ff      	movs	r3, #255	@ 0xff
 801647c:	e027      	b.n	80164ce <test_i2c+0x28e>

		if (memcmp(cmd->pattern, rxBuf2, cmd->pattern_len) != 0)
 801647e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016482:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	1dd8      	adds	r0, r3, #7
 801648a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801648e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	799b      	ldrb	r3, [r3, #6]
 8016496:	461a      	mov	r2, r3
 8016498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801649c:	4619      	mov	r1, r3
 801649e:	f000 fd0c 	bl	8016eba <memcmp>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d001      	beq.n	80164ac <test_i2c+0x26c>
		    return TEST_FAILURE;
 80164a8:	23ff      	movs	r3, #255	@ 0xff
 80164aa:	e010      	b.n	80164ce <test_i2c+0x28e>
	for(uint8_t i = 0; i < cmd->iterations ; ++i){
 80164ac:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 80164b0:	3301      	adds	r3, #1
 80164b2:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
 80164b6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80164ba:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	795b      	ldrb	r3, [r3, #5]
 80164c2:	f897 240f 	ldrb.w	r2, [r7, #1039]	@ 0x40f
 80164c6:	429a      	cmp	r2, r3
 80164c8:	f4ff aef7 	bcc.w	80162ba <test_i2c+0x7a>
	}
	return TEST_SUCCESS;
 80164cc:	2301      	movs	r3, #1
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	20000334 	.word	0x20000334
 80164dc:	20008977 	.word	0x20008977
 80164e0:	20008978 	.word	0x20008978
 80164e4:	2000897a 	.word	0x2000897a
 80164e8:	20008979 	.word	0x20008979
 80164ec:	200002e0 	.word	0x200002e0

080164f0 <wait_flag>:
extern SPI_HandleTypeDef hspi2;

static volatile uint8_t spi1_tx_done,  spi1_rx_done,  spi2_rx_done, spi2_tx_done;

static uint8_t wait_flag(volatile uint8_t *flag, uint32_t timeout_ms)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b084      	sub	sp, #16
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
 80164f8:	6039      	str	r1, [r7, #0]
    uint32_t t0 = HAL_GetTick();
 80164fa:	f7eb fddb 	bl	80020b4 <HAL_GetTick>
 80164fe:	60f8      	str	r0, [r7, #12]
    while (!(*flag))
 8016500:	e009      	b.n	8016516 <wait_flag+0x26>
    {
        if (HAL_GetTick() - t0 > timeout_ms){
 8016502:	f7eb fdd7 	bl	80020b4 <HAL_GetTick>
 8016506:	4602      	mov	r2, r0
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	1ad3      	subs	r3, r2, r3
 801650c:	683a      	ldr	r2, [r7, #0]
 801650e:	429a      	cmp	r2, r3
 8016510:	d201      	bcs.n	8016516 <wait_flag+0x26>
        	return 1;
 8016512:	2301      	movs	r3, #1
 8016514:	e008      	b.n	8016528 <wait_flag+0x38>
    while (!(*flag))
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	b2db      	uxtb	r3, r3
 801651c:	2b00      	cmp	r3, #0
 801651e:	d0f0      	beq.n	8016502 <wait_flag+0x12>
        }
    }
    *flag =0;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2200      	movs	r2, #0
 8016524:	701a      	strb	r2, [r3, #0]
    return 0;
 8016526:	2300      	movs	r3, #0
}
 8016528:	4618      	mov	r0, r3
 801652a:	3710      	adds	r7, #16
 801652c:	46bd      	mov	sp, r7
 801652e:	bd80      	pop	{r7, pc}

08016530 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1){
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	4a0a      	ldr	r2, [pc, #40]	@ (8016564 <HAL_SPI_TxCpltCallback+0x34>)
 801653c:	4293      	cmp	r3, r2
 801653e:	d103      	bne.n	8016548 <HAL_SPI_TxCpltCallback+0x18>
    	spi1_tx_done = 1;
 8016540:	4b09      	ldr	r3, [pc, #36]	@ (8016568 <HAL_SPI_TxCpltCallback+0x38>)
 8016542:	2201      	movs	r2, #1
 8016544:	701a      	strb	r2, [r3, #0]
    }
    else if (hspi == &hspi2){
    	spi2_tx_done = 1;
    }
}
 8016546:	e006      	b.n	8016556 <HAL_SPI_TxCpltCallback+0x26>
    else if (hspi == &hspi2){
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	4a08      	ldr	r2, [pc, #32]	@ (801656c <HAL_SPI_TxCpltCallback+0x3c>)
 801654c:	4293      	cmp	r3, r2
 801654e:	d102      	bne.n	8016556 <HAL_SPI_TxCpltCallback+0x26>
    	spi2_tx_done = 1;
 8016550:	4b07      	ldr	r3, [pc, #28]	@ (8016570 <HAL_SPI_TxCpltCallback+0x40>)
 8016552:	2201      	movs	r2, #1
 8016554:	701a      	strb	r2, [r3, #0]
}
 8016556:	bf00      	nop
 8016558:	370c      	adds	r7, #12
 801655a:	46bd      	mov	sp, r7
 801655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016560:	4770      	bx	lr
 8016562:	bf00      	nop
 8016564:	20000388 	.word	0x20000388
 8016568:	2000897b 	.word	0x2000897b
 801656c:	200003ec 	.word	0x200003ec
 8016570:	2000897e 	.word	0x2000897e

08016574 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8016574:	b480      	push	{r7}
 8016576:	b083      	sub	sp, #12
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1){
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	4a0a      	ldr	r2, [pc, #40]	@ (80165a8 <HAL_SPI_RxCpltCallback+0x34>)
 8016580:	4293      	cmp	r3, r2
 8016582:	d103      	bne.n	801658c <HAL_SPI_RxCpltCallback+0x18>
		spi1_rx_done = 1;
 8016584:	4b09      	ldr	r3, [pc, #36]	@ (80165ac <HAL_SPI_RxCpltCallback+0x38>)
 8016586:	2201      	movs	r2, #1
 8016588:	701a      	strb	r2, [r3, #0]
	}
	else if (hspi == &hspi2){
		spi2_rx_done = 1;
	}
}
 801658a:	e006      	b.n	801659a <HAL_SPI_RxCpltCallback+0x26>
	else if (hspi == &hspi2){
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	4a08      	ldr	r2, [pc, #32]	@ (80165b0 <HAL_SPI_RxCpltCallback+0x3c>)
 8016590:	4293      	cmp	r3, r2
 8016592:	d102      	bne.n	801659a <HAL_SPI_RxCpltCallback+0x26>
		spi2_rx_done = 1;
 8016594:	4b07      	ldr	r3, [pc, #28]	@ (80165b4 <HAL_SPI_RxCpltCallback+0x40>)
 8016596:	2201      	movs	r2, #1
 8016598:	701a      	strb	r2, [r3, #0]
}
 801659a:	bf00      	nop
 801659c:	370c      	adds	r7, #12
 801659e:	46bd      	mov	sp, r7
 80165a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a4:	4770      	bx	lr
 80165a6:	bf00      	nop
 80165a8:	20000388 	.word	0x20000388
 80165ac:	2000897c 	.word	0x2000897c
 80165b0:	200003ec 	.word	0x200003ec
 80165b4:	2000897d 	.word	0x2000897d

080165b8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80165b8:	b480      	push	{r7}
 80165ba:	b083      	sub	sp, #12
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	4a0d      	ldr	r2, [pc, #52]	@ (80165f8 <HAL_SPI_TxRxCpltCallback+0x40>)
 80165c4:	4293      	cmp	r3, r2
 80165c6:	d106      	bne.n	80165d6 <HAL_SPI_TxRxCpltCallback+0x1e>
        spi1_tx_done = 1;
 80165c8:	4b0c      	ldr	r3, [pc, #48]	@ (80165fc <HAL_SPI_TxRxCpltCallback+0x44>)
 80165ca:	2201      	movs	r2, #1
 80165cc:	701a      	strb	r2, [r3, #0]
        spi1_rx_done = 1;
 80165ce:	4b0c      	ldr	r3, [pc, #48]	@ (8016600 <HAL_SPI_TxRxCpltCallback+0x48>)
 80165d0:	2201      	movs	r2, #1
 80165d2:	701a      	strb	r2, [r3, #0]
    }
	else if (hspi == &hspi2){
		spi2_tx_done = 1;
		spi2_rx_done = 1;
	}
}
 80165d4:	e009      	b.n	80165ea <HAL_SPI_TxRxCpltCallback+0x32>
	else if (hspi == &hspi2){
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	4a0a      	ldr	r2, [pc, #40]	@ (8016604 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80165da:	4293      	cmp	r3, r2
 80165dc:	d105      	bne.n	80165ea <HAL_SPI_TxRxCpltCallback+0x32>
		spi2_tx_done = 1;
 80165de:	4b0a      	ldr	r3, [pc, #40]	@ (8016608 <HAL_SPI_TxRxCpltCallback+0x50>)
 80165e0:	2201      	movs	r2, #1
 80165e2:	701a      	strb	r2, [r3, #0]
		spi2_rx_done = 1;
 80165e4:	4b09      	ldr	r3, [pc, #36]	@ (801660c <HAL_SPI_TxRxCpltCallback+0x54>)
 80165e6:	2201      	movs	r2, #1
 80165e8:	701a      	strb	r2, [r3, #0]
}
 80165ea:	bf00      	nop
 80165ec:	370c      	adds	r7, #12
 80165ee:	46bd      	mov	sp, r7
 80165f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f4:	4770      	bx	lr
 80165f6:	bf00      	nop
 80165f8:	20000388 	.word	0x20000388
 80165fc:	2000897b 	.word	0x2000897b
 8016600:	2000897c 	.word	0x2000897c
 8016604:	200003ec 	.word	0x200003ec
 8016608:	2000897e 	.word	0x2000897e
 801660c:	2000897d 	.word	0x2000897d

08016610 <test_spi>:

uint8_t test_spi(const test_command_t *cmd){
 8016610:	b580      	push	{r7, lr}
 8016612:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8016616:	af00      	add	r7, sp, #0
 8016618:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801661c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016620:	6018      	str	r0, [r3, #0]
    uint8_t rxBuf1[MAX_PATTERN_LEN] = {};
 8016622:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801662a:	4618      	mov	r0, r3
 801662c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016630:	461a      	mov	r2, r3
 8016632:	2100      	movs	r1, #0
 8016634:	f000 fc51 	bl	8016eda <memset>
    uint8_t rxBuf2[MAX_PATTERN_LEN] = {};
 8016638:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801663c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8016640:	4618      	mov	r0, r3
 8016642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016646:	461a      	mov	r2, r3
 8016648:	2100      	movs	r1, #0
 801664a:	f000 fc46 	bl	8016eda <memset>
    uint8_t txBuf1[MAX_PATTERN_LEN] = {};
 801664e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016652:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016656:	4618      	mov	r0, r3
 8016658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801665c:	461a      	mov	r2, r3
 801665e:	2100      	movs	r1, #0
 8016660:	f000 fc3b 	bl	8016eda <memset>
    uint8_t txBuf2[MAX_PATTERN_LEN] = {};
 8016664:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016668:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 801666c:	4618      	mov	r0, r3
 801666e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016672:	461a      	mov	r2, r3
 8016674:	2100      	movs	r1, #0
 8016676:	f000 fc30 	bl	8016eda <memset>


    for(uint8_t i = 0; i < cmd->iterations ; ++i){
 801667a:	2300      	movs	r3, #0
 801667c:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
 8016680:	e0fd      	b.n	801687e <test_spi+0x26e>

        memset(rxBuf1, 0 ,sizeof(rxBuf1));
 8016682:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8016686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801668a:	2100      	movs	r1, #0
 801668c:	4618      	mov	r0, r3
 801668e:	f000 fc24 	bl	8016eda <memset>
        memset(rxBuf2, 0 ,sizeof(rxBuf2));
 8016692:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8016696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801669a:	2100      	movs	r1, #0
 801669c:	4618      	mov	r0, r3
 801669e:	f000 fc1c 	bl	8016eda <memset>
        memset(txBuf1, 0 ,sizeof(txBuf1));
 80166a2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80166a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80166aa:	2100      	movs	r1, #0
 80166ac:	4618      	mov	r0, r3
 80166ae:	f000 fc14 	bl	8016eda <memset>
        memset(txBuf2, 0 ,sizeof(txBuf2));
 80166b2:	f107 030c 	add.w	r3, r7, #12
 80166b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80166ba:	2100      	movs	r1, #0
 80166bc:	4618      	mov	r0, r3
 80166be:	f000 fc0c 	bl	8016eda <memset>
    	spi1_tx_done = 0;
 80166c2:	4b77      	ldr	r3, [pc, #476]	@ (80168a0 <test_spi+0x290>)
 80166c4:	2200      	movs	r2, #0
 80166c6:	701a      	strb	r2, [r3, #0]
    	spi1_rx_done = 0;
 80166c8:	4b76      	ldr	r3, [pc, #472]	@ (80168a4 <test_spi+0x294>)
 80166ca:	2200      	movs	r2, #0
 80166cc:	701a      	strb	r2, [r3, #0]
    	spi2_tx_done = 0;
 80166ce:	4b76      	ldr	r3, [pc, #472]	@ (80168a8 <test_spi+0x298>)
 80166d0:	2200      	movs	r2, #0
 80166d2:	701a      	strb	r2, [r3, #0]
    	spi2_rx_done = 0;
 80166d4:	4b75      	ldr	r3, [pc, #468]	@ (80168ac <test_spi+0x29c>)
 80166d6:	2200      	movs	r2, #0
 80166d8:	701a      	strb	r2, [r3, #0]

        memcpy(txBuf1, cmd->pattern, cmd->pattern_len);
 80166da:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80166de:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	1dd9      	adds	r1, r3, #7
 80166e6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80166ea:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	799b      	ldrb	r3, [r3, #6]
 80166f2:	461a      	mov	r2, r3
 80166f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80166f8:	4618      	mov	r0, r3
 80166fa:	f000 fc64 	bl	8016fc6 <memcpy>
        if (memcmp(cmd->pattern, txBuf1, cmd->pattern_len) != 0)
 80166fe:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016702:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	1dd8      	adds	r0, r3, #7
 801670a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801670e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	799b      	ldrb	r3, [r3, #6]
 8016716:	461a      	mov	r2, r3
 8016718:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801671c:	4619      	mov	r1, r3
 801671e:	f000 fbcc 	bl	8016eba <memcmp>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d001      	beq.n	801672c <test_spi+0x11c>
             return TEST_FAILURE;
 8016728:	23ff      	movs	r3, #255	@ 0xff
 801672a:	e0b4      	b.n	8016896 <test_spi+0x286>

    	while (hspi2.State != HAL_SPI_STATE_READY) {}
 801672c:	bf00      	nop
 801672e:	4b60      	ldr	r3, [pc, #384]	@ (80168b0 <test_spi+0x2a0>)
 8016730:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8016734:	b2db      	uxtb	r3, r3
 8016736:	2b01      	cmp	r3, #1
 8016738:	d1f9      	bne.n	801672e <test_spi+0x11e>
        if (HAL_SPI_Receive_DMA(&hspi2, rxBuf2, cmd->pattern_len) != HAL_OK)
 801673a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801673e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	799b      	ldrb	r3, [r3, #6]
 8016746:	461a      	mov	r2, r3
 8016748:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 801674c:	4619      	mov	r1, r3
 801674e:	4858      	ldr	r0, [pc, #352]	@ (80168b0 <test_spi+0x2a0>)
 8016750:	f7f1 fe48 	bl	80083e4 <HAL_SPI_Receive_DMA>
 8016754:	4603      	mov	r3, r0
 8016756:	2b00      	cmp	r3, #0
 8016758:	d001      	beq.n	801675e <test_spi+0x14e>
             return TEST_FAILURE;
 801675a:	23ff      	movs	r3, #255	@ 0xff
 801675c:	e09b      	b.n	8016896 <test_spi+0x286>

        HAL_Delay(1);
 801675e:	2001      	movs	r0, #1
 8016760:	f7eb fcb4 	bl	80020cc <HAL_Delay>

        if (HAL_SPI_Transmit_DMA(&hspi1, txBuf1, cmd->pattern_len) != HAL_OK)
 8016764:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016768:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	799b      	ldrb	r3, [r3, #6]
 8016770:	461a      	mov	r2, r3
 8016772:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8016776:	4619      	mov	r1, r3
 8016778:	484e      	ldr	r0, [pc, #312]	@ (80168b4 <test_spi+0x2a4>)
 801677a:	f7f1 fd45 	bl	8008208 <HAL_SPI_Transmit_DMA>
 801677e:	4603      	mov	r3, r0
 8016780:	2b00      	cmp	r3, #0
 8016782:	d001      	beq.n	8016788 <test_spi+0x178>
             return TEST_FAILURE;
 8016784:	23ff      	movs	r3, #255	@ 0xff
 8016786:	e086      	b.n	8016896 <test_spi+0x286>

        HAL_Delay(1);
 8016788:	2001      	movs	r0, #1
 801678a:	f7eb fc9f 	bl	80020cc <HAL_Delay>

        memcpy(txBuf2, rxBuf2, cmd->pattern_len);
 801678e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016792:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	799b      	ldrb	r3, [r3, #6]
 801679a:	461a      	mov	r2, r3
 801679c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80167a0:	f107 030c 	add.w	r3, r7, #12
 80167a4:	4618      	mov	r0, r3
 80167a6:	f000 fc0e 	bl	8016fc6 <memcpy>

        if (wait_flag(&spi1_tx_done, TIMEOUT) || wait_flag(&spi2_rx_done, TIMEOUT))
 80167aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80167ae:	483c      	ldr	r0, [pc, #240]	@ (80168a0 <test_spi+0x290>)
 80167b0:	f7ff fe9e 	bl	80164f0 <wait_flag>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d107      	bne.n	80167ca <test_spi+0x1ba>
 80167ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80167be:	483b      	ldr	r0, [pc, #236]	@ (80168ac <test_spi+0x29c>)
 80167c0:	f7ff fe96 	bl	80164f0 <wait_flag>
 80167c4:	4603      	mov	r3, r0
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d001      	beq.n	80167ce <test_spi+0x1be>
             return TEST_FAILURE;
 80167ca:	23ff      	movs	r3, #255	@ 0xff
 80167cc:	e063      	b.n	8016896 <test_spi+0x286>

        if (HAL_SPI_TransmitReceive_DMA(&hspi2, txBuf2,rxBuf2, cmd->pattern_len) != HAL_OK)
 80167ce:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80167d2:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	799b      	ldrb	r3, [r3, #6]
 80167da:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 80167de:	f107 010c 	add.w	r1, r7, #12
 80167e2:	4833      	ldr	r0, [pc, #204]	@ (80168b0 <test_spi+0x2a0>)
 80167e4:	f7f1 ff1e 	bl	8008624 <HAL_SPI_TransmitReceive_DMA>
 80167e8:	4603      	mov	r3, r0
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d001      	beq.n	80167f2 <test_spi+0x1e2>
             return TEST_FAILURE;
 80167ee:	23ff      	movs	r3, #255	@ 0xff
 80167f0:	e051      	b.n	8016896 <test_spi+0x286>

        HAL_Delay(1);
 80167f2:	2001      	movs	r0, #1
 80167f4:	f7eb fc6a 	bl	80020cc <HAL_Delay>

        if (HAL_SPI_TransmitReceive_DMA(&hspi1, txBuf1,rxBuf1, cmd->pattern_len) != HAL_OK)
 80167f8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80167fc:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	799b      	ldrb	r3, [r3, #6]
 8016804:	f507 7243 	add.w	r2, r7, #780	@ 0x30c
 8016808:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 801680c:	4829      	ldr	r0, [pc, #164]	@ (80168b4 <test_spi+0x2a4>)
 801680e:	f7f1 ff09 	bl	8008624 <HAL_SPI_TransmitReceive_DMA>
 8016812:	4603      	mov	r3, r0
 8016814:	2b00      	cmp	r3, #0
 8016816:	d001      	beq.n	801681c <test_spi+0x20c>
             return TEST_FAILURE;
 8016818:	23ff      	movs	r3, #255	@ 0xff
 801681a:	e03c      	b.n	8016896 <test_spi+0x286>

        HAL_Delay(1);
 801681c:	2001      	movs	r0, #1
 801681e:	f7eb fc55 	bl	80020cc <HAL_Delay>

        if (wait_flag(&spi2_tx_done, TIMEOUT) || wait_flag(&spi1_rx_done, TIMEOUT))
 8016822:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016826:	4820      	ldr	r0, [pc, #128]	@ (80168a8 <test_spi+0x298>)
 8016828:	f7ff fe62 	bl	80164f0 <wait_flag>
 801682c:	4603      	mov	r3, r0
 801682e:	2b00      	cmp	r3, #0
 8016830:	d107      	bne.n	8016842 <test_spi+0x232>
 8016832:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016836:	481b      	ldr	r0, [pc, #108]	@ (80168a4 <test_spi+0x294>)
 8016838:	f7ff fe5a 	bl	80164f0 <wait_flag>
 801683c:	4603      	mov	r3, r0
 801683e:	2b00      	cmp	r3, #0
 8016840:	d001      	beq.n	8016846 <test_spi+0x236>
             return TEST_FAILURE;
 8016842:	23ff      	movs	r3, #255	@ 0xff
 8016844:	e027      	b.n	8016896 <test_spi+0x286>
        if (memcmp(cmd->pattern, rxBuf1, cmd->pattern_len) != 0)
 8016846:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 801684a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	1dd8      	adds	r0, r3, #7
 8016852:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016856:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	799b      	ldrb	r3, [r3, #6]
 801685e:	461a      	mov	r2, r3
 8016860:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8016864:	4619      	mov	r1, r3
 8016866:	f000 fb28 	bl	8016eba <memcmp>
 801686a:	4603      	mov	r3, r0
 801686c:	2b00      	cmp	r3, #0
 801686e:	d001      	beq.n	8016874 <test_spi+0x264>
             return TEST_FAILURE;
 8016870:	23ff      	movs	r3, #255	@ 0xff
 8016872:	e010      	b.n	8016896 <test_spi+0x286>
    for(uint8_t i = 0; i < cmd->iterations ; ++i){
 8016874:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8016878:	3301      	adds	r3, #1
 801687a:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
 801687e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8016882:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	795b      	ldrb	r3, [r3, #5]
 801688a:	f897 240f 	ldrb.w	r2, [r7, #1039]	@ 0x40f
 801688e:	429a      	cmp	r2, r3
 8016890:	f4ff aef7 	bcc.w	8016682 <test_spi+0x72>
    }
    return TEST_SUCCESS;
 8016894:	2301      	movs	r3, #1
}
 8016896:	4618      	mov	r0, r3
 8016898:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	2000897b 	.word	0x2000897b
 80168a4:	2000897c 	.word	0x2000897c
 80168a8:	2000897e 	.word	0x2000897e
 80168ac:	2000897d 	.word	0x2000897d
 80168b0:	200003ec 	.word	0x200003ec
 80168b4:	20000388 	.word	0x20000388

080168b8 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim6;

static volatile uint8_t flag = 0;
uint32_t start_time;

void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	4a06      	ldr	r2, [pc, #24]	@ (80168e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80168c6:	4293      	cmp	r3, r2
 80168c8:	d105      	bne.n	80168d6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		flag =1;
 80168ca:	4b06      	ldr	r3, [pc, #24]	@ (80168e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80168cc:	2201      	movs	r2, #1
 80168ce:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 80168d0:	4805      	ldr	r0, [pc, #20]	@ (80168e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80168d2:	f7f2 fd7b 	bl	80093cc <HAL_TIM_Base_Stop_IT>
	}
}
 80168d6:	bf00      	nop
 80168d8:	3708      	adds	r7, #8
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}
 80168de:	bf00      	nop
 80168e0:	40001000 	.word	0x40001000
 80168e4:	2000897f 	.word	0x2000897f
 80168e8:	200005d4 	.word	0x200005d4

080168ec <test_timer>:


uint8_t test_timer(const test_command_t *cmd){
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b084      	sub	sp, #16
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < cmd->iterations ; ++i){
 80168f4:	2300      	movs	r3, #0
 80168f6:	73fb      	strb	r3, [r7, #15]
 80168f8:	e03a      	b.n	8016970 <test_timer+0x84>
		flag = 0;
 80168fa:	4b22      	ldr	r3, [pc, #136]	@ (8016984 <test_timer+0x98>)
 80168fc:	2200      	movs	r2, #0
 80168fe:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8016900:	4b21      	ldr	r3, [pc, #132]	@ (8016988 <test_timer+0x9c>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	2200      	movs	r2, #0
 8016906:	625a      	str	r2, [r3, #36]	@ 0x24
		if(HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8016908:	481f      	ldr	r0, [pc, #124]	@ (8016988 <test_timer+0x9c>)
 801690a:	f7f2 fce7 	bl	80092dc <HAL_TIM_Base_Start_IT>
 801690e:	4603      	mov	r3, r0
 8016910:	2b00      	cmp	r3, #0
 8016912:	d001      	beq.n	8016918 <test_timer+0x2c>
			return TEST_FAILURE;
 8016914:	23ff      	movs	r3, #255	@ 0xff
 8016916:	e031      	b.n	801697c <test_timer+0x90>

		start_time = HAL_GetTick();
 8016918:	f7eb fbcc 	bl	80020b4 <HAL_GetTick>
 801691c:	4603      	mov	r3, r0
 801691e:	4a1b      	ldr	r2, [pc, #108]	@ (801698c <test_timer+0xa0>)
 8016920:	6013      	str	r3, [r2, #0]

		while (!flag){
 8016922:	e00b      	b.n	801693c <test_timer+0x50>
			if (HAL_GetTick() - start_time > 1010)
 8016924:	f7eb fbc6 	bl	80020b4 <HAL_GetTick>
 8016928:	4602      	mov	r2, r0
 801692a:	4b18      	ldr	r3, [pc, #96]	@ (801698c <test_timer+0xa0>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	1ad3      	subs	r3, r2, r3
 8016930:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8016934:	4293      	cmp	r3, r2
 8016936:	d901      	bls.n	801693c <test_timer+0x50>
				return TEST_FAILURE;
 8016938:	23ff      	movs	r3, #255	@ 0xff
 801693a:	e01f      	b.n	801697c <test_timer+0x90>
		while (!flag){
 801693c:	4b11      	ldr	r3, [pc, #68]	@ (8016984 <test_timer+0x98>)
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	b2db      	uxtb	r3, r3
 8016942:	2b00      	cmp	r3, #0
 8016944:	d0ee      	beq.n	8016924 <test_timer+0x38>
		}

		uint32_t elapsed = HAL_GetTick() - start_time;
 8016946:	f7eb fbb5 	bl	80020b4 <HAL_GetTick>
 801694a:	4602      	mov	r2, r0
 801694c:	4b0f      	ldr	r3, [pc, #60]	@ (801698c <test_timer+0xa0>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	1ad3      	subs	r3, r2, r3
 8016952:	60bb      	str	r3, [r7, #8]
		if (elapsed < 900 || elapsed > 1100)
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 801695a:	d304      	bcc.n	8016966 <test_timer+0x7a>
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	f240 424c 	movw	r2, #1100	@ 0x44c
 8016962:	4293      	cmp	r3, r2
 8016964:	d901      	bls.n	801696a <test_timer+0x7e>
			return TEST_FAILURE;
 8016966:	23ff      	movs	r3, #255	@ 0xff
 8016968:	e008      	b.n	801697c <test_timer+0x90>
	for(uint8_t i = 0; i < cmd->iterations ; ++i){
 801696a:	7bfb      	ldrb	r3, [r7, #15]
 801696c:	3301      	adds	r3, #1
 801696e:	73fb      	strb	r3, [r7, #15]
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	795b      	ldrb	r3, [r3, #5]
 8016974:	7bfa      	ldrb	r2, [r7, #15]
 8016976:	429a      	cmp	r2, r3
 8016978:	d3bf      	bcc.n	80168fa <test_timer+0xe>
	}
	return TEST_SUCCESS;
 801697a:	2301      	movs	r3, #1
}
 801697c:	4618      	mov	r0, r3
 801697e:	3710      	adds	r7, #16
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}
 8016984:	2000897f 	.word	0x2000897f
 8016988:	200005d4 	.word	0x200005d4
 801698c:	20008980 	.word	0x20008980

08016990 <HAL_UART_TxCpltCallback>:


static volatile uint8_t u2_tx_done,  u2_rx_done,  u5_rx_done, u5_tx_done;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016990:	b480      	push	{r7}
 8016992:	b083      	sub	sp, #12
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) u2_tx_done = 1;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	4a0a      	ldr	r2, [pc, #40]	@ (80169c4 <HAL_UART_TxCpltCallback+0x34>)
 801699c:	4293      	cmp	r3, r2
 801699e:	d103      	bne.n	80169a8 <HAL_UART_TxCpltCallback+0x18>
 80169a0:	4b09      	ldr	r3, [pc, #36]	@ (80169c8 <HAL_UART_TxCpltCallback+0x38>)
 80169a2:	2201      	movs	r2, #1
 80169a4:	701a      	strb	r2, [r3, #0]
    else if (huart == &huart5) u5_tx_done = 1;
}
 80169a6:	e006      	b.n	80169b6 <HAL_UART_TxCpltCallback+0x26>
    else if (huart == &huart5) u5_tx_done = 1;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	4a08      	ldr	r2, [pc, #32]	@ (80169cc <HAL_UART_TxCpltCallback+0x3c>)
 80169ac:	4293      	cmp	r3, r2
 80169ae:	d102      	bne.n	80169b6 <HAL_UART_TxCpltCallback+0x26>
 80169b0:	4b07      	ldr	r3, [pc, #28]	@ (80169d0 <HAL_UART_TxCpltCallback+0x40>)
 80169b2:	2201      	movs	r2, #1
 80169b4:	701a      	strb	r2, [r3, #0]
}
 80169b6:	bf00      	nop
 80169b8:	370c      	adds	r7, #12
 80169ba:	46bd      	mov	sp, r7
 80169bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c0:	4770      	bx	lr
 80169c2:	bf00      	nop
 80169c4:	200006a8 	.word	0x200006a8
 80169c8:	20008984 	.word	0x20008984
 80169cc:	20000620 	.word	0x20000620
 80169d0:	20008987 	.word	0x20008987

080169d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80169d4:	b480      	push	{r7}
 80169d6:	b083      	sub	sp, #12
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
    if (huart == &huart5) u5_rx_done = 1;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	4a0a      	ldr	r2, [pc, #40]	@ (8016a08 <HAL_UART_RxCpltCallback+0x34>)
 80169e0:	4293      	cmp	r3, r2
 80169e2:	d103      	bne.n	80169ec <HAL_UART_RxCpltCallback+0x18>
 80169e4:	4b09      	ldr	r3, [pc, #36]	@ (8016a0c <HAL_UART_RxCpltCallback+0x38>)
 80169e6:	2201      	movs	r2, #1
 80169e8:	701a      	strb	r2, [r3, #0]
    else if (huart == &huart2) u2_rx_done = 1;
}
 80169ea:	e006      	b.n	80169fa <HAL_UART_RxCpltCallback+0x26>
    else if (huart == &huart2) u2_rx_done = 1;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	4a08      	ldr	r2, [pc, #32]	@ (8016a10 <HAL_UART_RxCpltCallback+0x3c>)
 80169f0:	4293      	cmp	r3, r2
 80169f2:	d102      	bne.n	80169fa <HAL_UART_RxCpltCallback+0x26>
 80169f4:	4b07      	ldr	r3, [pc, #28]	@ (8016a14 <HAL_UART_RxCpltCallback+0x40>)
 80169f6:	2201      	movs	r2, #1
 80169f8:	701a      	strb	r2, [r3, #0]
}
 80169fa:	bf00      	nop
 80169fc:	370c      	adds	r7, #12
 80169fe:	46bd      	mov	sp, r7
 8016a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a04:	4770      	bx	lr
 8016a06:	bf00      	nop
 8016a08:	20000620 	.word	0x20000620
 8016a0c:	20008986 	.word	0x20008986
 8016a10:	200006a8 	.word	0x200006a8
 8016a14:	20008985 	.word	0x20008985

08016a18 <wait_flag>:

static uint8_t wait_flag(volatile uint8_t *flag, uint32_t timeout_ms)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	6039      	str	r1, [r7, #0]
    uint32_t t0 = HAL_GetTick();
 8016a22:	f7eb fb47 	bl	80020b4 <HAL_GetTick>
 8016a26:	60f8      	str	r0, [r7, #12]
    while (!(*flag))
 8016a28:	e009      	b.n	8016a3e <wait_flag+0x26>
    {
        if (HAL_GetTick() - t0 > timeout_ms){
 8016a2a:	f7eb fb43 	bl	80020b4 <HAL_GetTick>
 8016a2e:	4602      	mov	r2, r0
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	1ad3      	subs	r3, r2, r3
 8016a34:	683a      	ldr	r2, [r7, #0]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d201      	bcs.n	8016a3e <wait_flag+0x26>
        	return 1;
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	e008      	b.n	8016a50 <wait_flag+0x38>
    while (!(*flag))
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	781b      	ldrb	r3, [r3, #0]
 8016a42:	b2db      	uxtb	r3, r3
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d0f0      	beq.n	8016a2a <wait_flag+0x12>
        }
    }
    *flag =0;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	701a      	strb	r2, [r3, #0]
    return 0;
 8016a4e:	2300      	movs	r3, #0
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3710      	adds	r7, #16
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <test_uart>:


uint8_t test_uart(const test_command_t *cmd){
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8016a5e:	af00      	add	r7, sp, #0
 8016a60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016a64:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016a68:	6018      	str	r0, [r3, #0]
    uint8_t rxBuf2[MAX_PATTERN_LEN] = {};
 8016a6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8016a72:	4618      	mov	r0, r3
 8016a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016a78:	461a      	mov	r2, r3
 8016a7a:	2100      	movs	r1, #0
 8016a7c:	f000 fa2d 	bl	8016eda <memset>
    uint8_t rxBuf5[MAX_PATTERN_LEN] = {};
 8016a80:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016a84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016a8e:	461a      	mov	r2, r3
 8016a90:	2100      	movs	r1, #0
 8016a92:	f000 fa22 	bl	8016eda <memset>

    for(uint8_t i = 0; i < cmd->iterations ; ++i){
 8016a96:	2300      	movs	r3, #0
 8016a98:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8016a9c:	e09a      	b.n	8016bd4 <test_uart+0x17c>
        memset(rxBuf2, 0, sizeof(rxBuf2));
 8016a9e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8016aa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016aa6:	2100      	movs	r1, #0
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f000 fa16 	bl	8016eda <memset>
        memset(rxBuf5, 0, sizeof(rxBuf5));
 8016aae:	f107 030c 	add.w	r3, r7, #12
 8016ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016ab6:	2100      	movs	r1, #0
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f000 fa0e 	bl	8016eda <memset>


        if (HAL_UART_Receive_DMA(&huart5, rxBuf5, cmd->pattern_len) != HAL_OK)
 8016abe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016ac2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	799b      	ldrb	r3, [r3, #6]
 8016aca:	461a      	mov	r2, r3
 8016acc:	f107 030c 	add.w	r3, r7, #12
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	4849      	ldr	r0, [pc, #292]	@ (8016bf8 <test_uart+0x1a0>)
 8016ad4:	f7f2 fff6 	bl	8009ac4 <HAL_UART_Receive_DMA>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d001      	beq.n	8016ae2 <test_uart+0x8a>
            return TEST_FAILURE;
 8016ade:	23ff      	movs	r3, #255	@ 0xff
 8016ae0:	e084      	b.n	8016bec <test_uart+0x194>

        if (HAL_UART_Transmit_DMA(&huart2, cmd->pattern, cmd->pattern_len) != HAL_OK)
 8016ae2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016ae6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	1dd9      	adds	r1, r3, #7
 8016aee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016af2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	799b      	ldrb	r3, [r3, #6]
 8016afa:	461a      	mov	r2, r3
 8016afc:	483f      	ldr	r0, [pc, #252]	@ (8016bfc <test_uart+0x1a4>)
 8016afe:	f7f2 ff65 	bl	80099cc <HAL_UART_Transmit_DMA>
 8016b02:	4603      	mov	r3, r0
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d001      	beq.n	8016b0c <test_uart+0xb4>
            return TEST_FAILURE;
 8016b08:	23ff      	movs	r3, #255	@ 0xff
 8016b0a:	e06f      	b.n	8016bec <test_uart+0x194>

        if (wait_flag(&u2_tx_done, TIMEOUT) || wait_flag(&u5_rx_done, TIMEOUT))
 8016b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b10:	483b      	ldr	r0, [pc, #236]	@ (8016c00 <test_uart+0x1a8>)
 8016b12:	f7ff ff81 	bl	8016a18 <wait_flag>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d107      	bne.n	8016b2c <test_uart+0xd4>
 8016b1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b20:	4838      	ldr	r0, [pc, #224]	@ (8016c04 <test_uart+0x1ac>)
 8016b22:	f7ff ff79 	bl	8016a18 <wait_flag>
 8016b26:	4603      	mov	r3, r0
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d001      	beq.n	8016b30 <test_uart+0xd8>
            return TEST_FAILURE;
 8016b2c:	23ff      	movs	r3, #255	@ 0xff
 8016b2e:	e05d      	b.n	8016bec <test_uart+0x194>


        if (HAL_UART_Receive_DMA(&huart2, rxBuf2, cmd->pattern_len) != HAL_OK)
 8016b30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016b34:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	799b      	ldrb	r3, [r3, #6]
 8016b3c:	461a      	mov	r2, r3
 8016b3e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8016b42:	4619      	mov	r1, r3
 8016b44:	482d      	ldr	r0, [pc, #180]	@ (8016bfc <test_uart+0x1a4>)
 8016b46:	f7f2 ffbd 	bl	8009ac4 <HAL_UART_Receive_DMA>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d001      	beq.n	8016b54 <test_uart+0xfc>
            return TEST_FAILURE;
 8016b50:	23ff      	movs	r3, #255	@ 0xff
 8016b52:	e04b      	b.n	8016bec <test_uart+0x194>

        if (HAL_UART_Transmit_DMA(&huart5, rxBuf5, cmd->pattern_len) != HAL_OK)
 8016b54:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016b58:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	799b      	ldrb	r3, [r3, #6]
 8016b60:	461a      	mov	r2, r3
 8016b62:	f107 030c 	add.w	r3, r7, #12
 8016b66:	4619      	mov	r1, r3
 8016b68:	4823      	ldr	r0, [pc, #140]	@ (8016bf8 <test_uart+0x1a0>)
 8016b6a:	f7f2 ff2f 	bl	80099cc <HAL_UART_Transmit_DMA>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d001      	beq.n	8016b78 <test_uart+0x120>
            return TEST_FAILURE;
 8016b74:	23ff      	movs	r3, #255	@ 0xff
 8016b76:	e039      	b.n	8016bec <test_uart+0x194>

        if (wait_flag(&u5_tx_done, TIMEOUT) || wait_flag(&u2_rx_done, TIMEOUT))
 8016b78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b7c:	4822      	ldr	r0, [pc, #136]	@ (8016c08 <test_uart+0x1b0>)
 8016b7e:	f7ff ff4b 	bl	8016a18 <wait_flag>
 8016b82:	4603      	mov	r3, r0
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d107      	bne.n	8016b98 <test_uart+0x140>
 8016b88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b8c:	481f      	ldr	r0, [pc, #124]	@ (8016c0c <test_uart+0x1b4>)
 8016b8e:	f7ff ff43 	bl	8016a18 <wait_flag>
 8016b92:	4603      	mov	r3, r0
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d001      	beq.n	8016b9c <test_uart+0x144>
            return TEST_FAILURE;
 8016b98:	23ff      	movs	r3, #255	@ 0xff
 8016b9a:	e027      	b.n	8016bec <test_uart+0x194>

        if (memcmp(cmd->pattern, rxBuf2, cmd->pattern_len) != 0)
 8016b9c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016ba0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	1dd8      	adds	r0, r3, #7
 8016ba8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016bac:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	799b      	ldrb	r3, [r3, #6]
 8016bb4:	461a      	mov	r2, r3
 8016bb6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8016bba:	4619      	mov	r1, r3
 8016bbc:	f000 f97d 	bl	8016eba <memcmp>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d001      	beq.n	8016bca <test_uart+0x172>
            return TEST_FAILURE;
 8016bc6:	23ff      	movs	r3, #255	@ 0xff
 8016bc8:	e010      	b.n	8016bec <test_uart+0x194>
    for(uint8_t i = 0; i < cmd->iterations ; ++i){
 8016bca:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016bce:	3301      	adds	r3, #1
 8016bd0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8016bd4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016bd8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	795b      	ldrb	r3, [r3, #5]
 8016be0:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 8016be4:	429a      	cmp	r2, r3
 8016be6:	f4ff af5a 	bcc.w	8016a9e <test_uart+0x46>
    }

    return TEST_SUCCESS;
 8016bea:	2301      	movs	r3, #1
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	20000620 	.word	0x20000620
 8016bfc:	200006a8 	.word	0x200006a8
 8016c00:	20008984 	.word	0x20008984
 8016c04:	20008986 	.word	0x20008986
 8016c08:	20008987 	.word	0x20008987
 8016c0c:	20008985 	.word	0x20008985

08016c10 <rand>:
 8016c10:	4b16      	ldr	r3, [pc, #88]	@ (8016c6c <rand+0x5c>)
 8016c12:	b510      	push	{r4, lr}
 8016c14:	681c      	ldr	r4, [r3, #0]
 8016c16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c18:	b9b3      	cbnz	r3, 8016c48 <rand+0x38>
 8016c1a:	2018      	movs	r0, #24
 8016c1c:	f000 fa4a 	bl	80170b4 <malloc>
 8016c20:	4602      	mov	r2, r0
 8016c22:	6320      	str	r0, [r4, #48]	@ 0x30
 8016c24:	b920      	cbnz	r0, 8016c30 <rand+0x20>
 8016c26:	4b12      	ldr	r3, [pc, #72]	@ (8016c70 <rand+0x60>)
 8016c28:	4812      	ldr	r0, [pc, #72]	@ (8016c74 <rand+0x64>)
 8016c2a:	2152      	movs	r1, #82	@ 0x52
 8016c2c:	f000 f9da 	bl	8016fe4 <__assert_func>
 8016c30:	4911      	ldr	r1, [pc, #68]	@ (8016c78 <rand+0x68>)
 8016c32:	4b12      	ldr	r3, [pc, #72]	@ (8016c7c <rand+0x6c>)
 8016c34:	e9c0 1300 	strd	r1, r3, [r0]
 8016c38:	4b11      	ldr	r3, [pc, #68]	@ (8016c80 <rand+0x70>)
 8016c3a:	6083      	str	r3, [r0, #8]
 8016c3c:	230b      	movs	r3, #11
 8016c3e:	8183      	strh	r3, [r0, #12]
 8016c40:	2100      	movs	r1, #0
 8016c42:	2001      	movs	r0, #1
 8016c44:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016c48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016c4a:	480e      	ldr	r0, [pc, #56]	@ (8016c84 <rand+0x74>)
 8016c4c:	690b      	ldr	r3, [r1, #16]
 8016c4e:	694c      	ldr	r4, [r1, #20]
 8016c50:	4a0d      	ldr	r2, [pc, #52]	@ (8016c88 <rand+0x78>)
 8016c52:	4358      	muls	r0, r3
 8016c54:	fb02 0004 	mla	r0, r2, r4, r0
 8016c58:	fba3 3202 	umull	r3, r2, r3, r2
 8016c5c:	3301      	adds	r3, #1
 8016c5e:	eb40 0002 	adc.w	r0, r0, r2
 8016c62:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016c66:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016c6a:	bd10      	pop	{r4, pc}
 8016c6c:	20000038 	.word	0x20000038
 8016c70:	0801a726 	.word	0x0801a726
 8016c74:	0801a73d 	.word	0x0801a73d
 8016c78:	abcd330e 	.word	0xabcd330e
 8016c7c:	e66d1234 	.word	0xe66d1234
 8016c80:	0005deec 	.word	0x0005deec
 8016c84:	5851f42d 	.word	0x5851f42d
 8016c88:	4c957f2d 	.word	0x4c957f2d

08016c8c <std>:
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	b510      	push	{r4, lr}
 8016c90:	4604      	mov	r4, r0
 8016c92:	e9c0 3300 	strd	r3, r3, [r0]
 8016c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c9a:	6083      	str	r3, [r0, #8]
 8016c9c:	8181      	strh	r1, [r0, #12]
 8016c9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016ca0:	81c2      	strh	r2, [r0, #14]
 8016ca2:	6183      	str	r3, [r0, #24]
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	2208      	movs	r2, #8
 8016ca8:	305c      	adds	r0, #92	@ 0x5c
 8016caa:	f000 f916 	bl	8016eda <memset>
 8016cae:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce4 <std+0x58>)
 8016cb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8016cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce8 <std+0x5c>)
 8016cb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8016cec <std+0x60>)
 8016cb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cba:	4b0d      	ldr	r3, [pc, #52]	@ (8016cf0 <std+0x64>)
 8016cbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8016cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8016cf4 <std+0x68>)
 8016cc0:	6224      	str	r4, [r4, #32]
 8016cc2:	429c      	cmp	r4, r3
 8016cc4:	d006      	beq.n	8016cd4 <std+0x48>
 8016cc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016cca:	4294      	cmp	r4, r2
 8016ccc:	d002      	beq.n	8016cd4 <std+0x48>
 8016cce:	33d0      	adds	r3, #208	@ 0xd0
 8016cd0:	429c      	cmp	r4, r3
 8016cd2:	d105      	bne.n	8016ce0 <std+0x54>
 8016cd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cdc:	f000 b970 	b.w	8016fc0 <__retarget_lock_init_recursive>
 8016ce0:	bd10      	pop	{r4, pc}
 8016ce2:	bf00      	nop
 8016ce4:	08016e35 	.word	0x08016e35
 8016ce8:	08016e57 	.word	0x08016e57
 8016cec:	08016e8f 	.word	0x08016e8f
 8016cf0:	08016eb3 	.word	0x08016eb3
 8016cf4:	20008988 	.word	0x20008988

08016cf8 <stdio_exit_handler>:
 8016cf8:	4a02      	ldr	r2, [pc, #8]	@ (8016d04 <stdio_exit_handler+0xc>)
 8016cfa:	4903      	ldr	r1, [pc, #12]	@ (8016d08 <stdio_exit_handler+0x10>)
 8016cfc:	4803      	ldr	r0, [pc, #12]	@ (8016d0c <stdio_exit_handler+0x14>)
 8016cfe:	f000 b869 	b.w	8016dd4 <_fwalk_sglue>
 8016d02:	bf00      	nop
 8016d04:	2000002c 	.word	0x2000002c
 8016d08:	080178c5 	.word	0x080178c5
 8016d0c:	2000003c 	.word	0x2000003c

08016d10 <cleanup_stdio>:
 8016d10:	6841      	ldr	r1, [r0, #4]
 8016d12:	4b0c      	ldr	r3, [pc, #48]	@ (8016d44 <cleanup_stdio+0x34>)
 8016d14:	4299      	cmp	r1, r3
 8016d16:	b510      	push	{r4, lr}
 8016d18:	4604      	mov	r4, r0
 8016d1a:	d001      	beq.n	8016d20 <cleanup_stdio+0x10>
 8016d1c:	f000 fdd2 	bl	80178c4 <_fflush_r>
 8016d20:	68a1      	ldr	r1, [r4, #8]
 8016d22:	4b09      	ldr	r3, [pc, #36]	@ (8016d48 <cleanup_stdio+0x38>)
 8016d24:	4299      	cmp	r1, r3
 8016d26:	d002      	beq.n	8016d2e <cleanup_stdio+0x1e>
 8016d28:	4620      	mov	r0, r4
 8016d2a:	f000 fdcb 	bl	80178c4 <_fflush_r>
 8016d2e:	68e1      	ldr	r1, [r4, #12]
 8016d30:	4b06      	ldr	r3, [pc, #24]	@ (8016d4c <cleanup_stdio+0x3c>)
 8016d32:	4299      	cmp	r1, r3
 8016d34:	d004      	beq.n	8016d40 <cleanup_stdio+0x30>
 8016d36:	4620      	mov	r0, r4
 8016d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d3c:	f000 bdc2 	b.w	80178c4 <_fflush_r>
 8016d40:	bd10      	pop	{r4, pc}
 8016d42:	bf00      	nop
 8016d44:	20008988 	.word	0x20008988
 8016d48:	200089f0 	.word	0x200089f0
 8016d4c:	20008a58 	.word	0x20008a58

08016d50 <global_stdio_init.part.0>:
 8016d50:	b510      	push	{r4, lr}
 8016d52:	4b0b      	ldr	r3, [pc, #44]	@ (8016d80 <global_stdio_init.part.0+0x30>)
 8016d54:	4c0b      	ldr	r4, [pc, #44]	@ (8016d84 <global_stdio_init.part.0+0x34>)
 8016d56:	4a0c      	ldr	r2, [pc, #48]	@ (8016d88 <global_stdio_init.part.0+0x38>)
 8016d58:	601a      	str	r2, [r3, #0]
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	2104      	movs	r1, #4
 8016d60:	f7ff ff94 	bl	8016c8c <std>
 8016d64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016d68:	2201      	movs	r2, #1
 8016d6a:	2109      	movs	r1, #9
 8016d6c:	f7ff ff8e 	bl	8016c8c <std>
 8016d70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016d74:	2202      	movs	r2, #2
 8016d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d7a:	2112      	movs	r1, #18
 8016d7c:	f7ff bf86 	b.w	8016c8c <std>
 8016d80:	20008ac0 	.word	0x20008ac0
 8016d84:	20008988 	.word	0x20008988
 8016d88:	08016cf9 	.word	0x08016cf9

08016d8c <__sfp_lock_acquire>:
 8016d8c:	4801      	ldr	r0, [pc, #4]	@ (8016d94 <__sfp_lock_acquire+0x8>)
 8016d8e:	f000 b918 	b.w	8016fc2 <__retarget_lock_acquire_recursive>
 8016d92:	bf00      	nop
 8016d94:	20008ac9 	.word	0x20008ac9

08016d98 <__sfp_lock_release>:
 8016d98:	4801      	ldr	r0, [pc, #4]	@ (8016da0 <__sfp_lock_release+0x8>)
 8016d9a:	f000 b913 	b.w	8016fc4 <__retarget_lock_release_recursive>
 8016d9e:	bf00      	nop
 8016da0:	20008ac9 	.word	0x20008ac9

08016da4 <__sinit>:
 8016da4:	b510      	push	{r4, lr}
 8016da6:	4604      	mov	r4, r0
 8016da8:	f7ff fff0 	bl	8016d8c <__sfp_lock_acquire>
 8016dac:	6a23      	ldr	r3, [r4, #32]
 8016dae:	b11b      	cbz	r3, 8016db8 <__sinit+0x14>
 8016db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016db4:	f7ff bff0 	b.w	8016d98 <__sfp_lock_release>
 8016db8:	4b04      	ldr	r3, [pc, #16]	@ (8016dcc <__sinit+0x28>)
 8016dba:	6223      	str	r3, [r4, #32]
 8016dbc:	4b04      	ldr	r3, [pc, #16]	@ (8016dd0 <__sinit+0x2c>)
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d1f5      	bne.n	8016db0 <__sinit+0xc>
 8016dc4:	f7ff ffc4 	bl	8016d50 <global_stdio_init.part.0>
 8016dc8:	e7f2      	b.n	8016db0 <__sinit+0xc>
 8016dca:	bf00      	nop
 8016dcc:	08016d11 	.word	0x08016d11
 8016dd0:	20008ac0 	.word	0x20008ac0

08016dd4 <_fwalk_sglue>:
 8016dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dd8:	4607      	mov	r7, r0
 8016dda:	4688      	mov	r8, r1
 8016ddc:	4614      	mov	r4, r2
 8016dde:	2600      	movs	r6, #0
 8016de0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016de4:	f1b9 0901 	subs.w	r9, r9, #1
 8016de8:	d505      	bpl.n	8016df6 <_fwalk_sglue+0x22>
 8016dea:	6824      	ldr	r4, [r4, #0]
 8016dec:	2c00      	cmp	r4, #0
 8016dee:	d1f7      	bne.n	8016de0 <_fwalk_sglue+0xc>
 8016df0:	4630      	mov	r0, r6
 8016df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016df6:	89ab      	ldrh	r3, [r5, #12]
 8016df8:	2b01      	cmp	r3, #1
 8016dfa:	d907      	bls.n	8016e0c <_fwalk_sglue+0x38>
 8016dfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e00:	3301      	adds	r3, #1
 8016e02:	d003      	beq.n	8016e0c <_fwalk_sglue+0x38>
 8016e04:	4629      	mov	r1, r5
 8016e06:	4638      	mov	r0, r7
 8016e08:	47c0      	blx	r8
 8016e0a:	4306      	orrs	r6, r0
 8016e0c:	3568      	adds	r5, #104	@ 0x68
 8016e0e:	e7e9      	b.n	8016de4 <_fwalk_sglue+0x10>

08016e10 <iprintf>:
 8016e10:	b40f      	push	{r0, r1, r2, r3}
 8016e12:	b507      	push	{r0, r1, r2, lr}
 8016e14:	4906      	ldr	r1, [pc, #24]	@ (8016e30 <iprintf+0x20>)
 8016e16:	ab04      	add	r3, sp, #16
 8016e18:	6808      	ldr	r0, [r1, #0]
 8016e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e1e:	6881      	ldr	r1, [r0, #8]
 8016e20:	9301      	str	r3, [sp, #4]
 8016e22:	f000 fa27 	bl	8017274 <_vfiprintf_r>
 8016e26:	b003      	add	sp, #12
 8016e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e2c:	b004      	add	sp, #16
 8016e2e:	4770      	bx	lr
 8016e30:	20000038 	.word	0x20000038

08016e34 <__sread>:
 8016e34:	b510      	push	{r4, lr}
 8016e36:	460c      	mov	r4, r1
 8016e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e3c:	f000 f878 	bl	8016f30 <_read_r>
 8016e40:	2800      	cmp	r0, #0
 8016e42:	bfab      	itete	ge
 8016e44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016e46:	89a3      	ldrhlt	r3, [r4, #12]
 8016e48:	181b      	addge	r3, r3, r0
 8016e4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016e4e:	bfac      	ite	ge
 8016e50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016e52:	81a3      	strhlt	r3, [r4, #12]
 8016e54:	bd10      	pop	{r4, pc}

08016e56 <__swrite>:
 8016e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e5a:	461f      	mov	r7, r3
 8016e5c:	898b      	ldrh	r3, [r1, #12]
 8016e5e:	05db      	lsls	r3, r3, #23
 8016e60:	4605      	mov	r5, r0
 8016e62:	460c      	mov	r4, r1
 8016e64:	4616      	mov	r6, r2
 8016e66:	d505      	bpl.n	8016e74 <__swrite+0x1e>
 8016e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e6c:	2302      	movs	r3, #2
 8016e6e:	2200      	movs	r2, #0
 8016e70:	f000 f84c 	bl	8016f0c <_lseek_r>
 8016e74:	89a3      	ldrh	r3, [r4, #12]
 8016e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016e7e:	81a3      	strh	r3, [r4, #12]
 8016e80:	4632      	mov	r2, r6
 8016e82:	463b      	mov	r3, r7
 8016e84:	4628      	mov	r0, r5
 8016e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e8a:	f000 b863 	b.w	8016f54 <_write_r>

08016e8e <__sseek>:
 8016e8e:	b510      	push	{r4, lr}
 8016e90:	460c      	mov	r4, r1
 8016e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e96:	f000 f839 	bl	8016f0c <_lseek_r>
 8016e9a:	1c43      	adds	r3, r0, #1
 8016e9c:	89a3      	ldrh	r3, [r4, #12]
 8016e9e:	bf15      	itete	ne
 8016ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016eaa:	81a3      	strheq	r3, [r4, #12]
 8016eac:	bf18      	it	ne
 8016eae:	81a3      	strhne	r3, [r4, #12]
 8016eb0:	bd10      	pop	{r4, pc}

08016eb2 <__sclose>:
 8016eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eb6:	f000 b819 	b.w	8016eec <_close_r>

08016eba <memcmp>:
 8016eba:	b510      	push	{r4, lr}
 8016ebc:	3901      	subs	r1, #1
 8016ebe:	4402      	add	r2, r0
 8016ec0:	4290      	cmp	r0, r2
 8016ec2:	d101      	bne.n	8016ec8 <memcmp+0xe>
 8016ec4:	2000      	movs	r0, #0
 8016ec6:	e005      	b.n	8016ed4 <memcmp+0x1a>
 8016ec8:	7803      	ldrb	r3, [r0, #0]
 8016eca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016ece:	42a3      	cmp	r3, r4
 8016ed0:	d001      	beq.n	8016ed6 <memcmp+0x1c>
 8016ed2:	1b18      	subs	r0, r3, r4
 8016ed4:	bd10      	pop	{r4, pc}
 8016ed6:	3001      	adds	r0, #1
 8016ed8:	e7f2      	b.n	8016ec0 <memcmp+0x6>

08016eda <memset>:
 8016eda:	4402      	add	r2, r0
 8016edc:	4603      	mov	r3, r0
 8016ede:	4293      	cmp	r3, r2
 8016ee0:	d100      	bne.n	8016ee4 <memset+0xa>
 8016ee2:	4770      	bx	lr
 8016ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8016ee8:	e7f9      	b.n	8016ede <memset+0x4>
	...

08016eec <_close_r>:
 8016eec:	b538      	push	{r3, r4, r5, lr}
 8016eee:	4d06      	ldr	r5, [pc, #24]	@ (8016f08 <_close_r+0x1c>)
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	4608      	mov	r0, r1
 8016ef6:	602b      	str	r3, [r5, #0]
 8016ef8:	f7ea fb3c 	bl	8001574 <_close>
 8016efc:	1c43      	adds	r3, r0, #1
 8016efe:	d102      	bne.n	8016f06 <_close_r+0x1a>
 8016f00:	682b      	ldr	r3, [r5, #0]
 8016f02:	b103      	cbz	r3, 8016f06 <_close_r+0x1a>
 8016f04:	6023      	str	r3, [r4, #0]
 8016f06:	bd38      	pop	{r3, r4, r5, pc}
 8016f08:	20008ac4 	.word	0x20008ac4

08016f0c <_lseek_r>:
 8016f0c:	b538      	push	{r3, r4, r5, lr}
 8016f0e:	4d07      	ldr	r5, [pc, #28]	@ (8016f2c <_lseek_r+0x20>)
 8016f10:	4604      	mov	r4, r0
 8016f12:	4608      	mov	r0, r1
 8016f14:	4611      	mov	r1, r2
 8016f16:	2200      	movs	r2, #0
 8016f18:	602a      	str	r2, [r5, #0]
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	f7ea fb51 	bl	80015c2 <_lseek>
 8016f20:	1c43      	adds	r3, r0, #1
 8016f22:	d102      	bne.n	8016f2a <_lseek_r+0x1e>
 8016f24:	682b      	ldr	r3, [r5, #0]
 8016f26:	b103      	cbz	r3, 8016f2a <_lseek_r+0x1e>
 8016f28:	6023      	str	r3, [r4, #0]
 8016f2a:	bd38      	pop	{r3, r4, r5, pc}
 8016f2c:	20008ac4 	.word	0x20008ac4

08016f30 <_read_r>:
 8016f30:	b538      	push	{r3, r4, r5, lr}
 8016f32:	4d07      	ldr	r5, [pc, #28]	@ (8016f50 <_read_r+0x20>)
 8016f34:	4604      	mov	r4, r0
 8016f36:	4608      	mov	r0, r1
 8016f38:	4611      	mov	r1, r2
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	602a      	str	r2, [r5, #0]
 8016f3e:	461a      	mov	r2, r3
 8016f40:	f7ea fadf 	bl	8001502 <_read>
 8016f44:	1c43      	adds	r3, r0, #1
 8016f46:	d102      	bne.n	8016f4e <_read_r+0x1e>
 8016f48:	682b      	ldr	r3, [r5, #0]
 8016f4a:	b103      	cbz	r3, 8016f4e <_read_r+0x1e>
 8016f4c:	6023      	str	r3, [r4, #0]
 8016f4e:	bd38      	pop	{r3, r4, r5, pc}
 8016f50:	20008ac4 	.word	0x20008ac4

08016f54 <_write_r>:
 8016f54:	b538      	push	{r3, r4, r5, lr}
 8016f56:	4d07      	ldr	r5, [pc, #28]	@ (8016f74 <_write_r+0x20>)
 8016f58:	4604      	mov	r4, r0
 8016f5a:	4608      	mov	r0, r1
 8016f5c:	4611      	mov	r1, r2
 8016f5e:	2200      	movs	r2, #0
 8016f60:	602a      	str	r2, [r5, #0]
 8016f62:	461a      	mov	r2, r3
 8016f64:	f7ea faea 	bl	800153c <_write>
 8016f68:	1c43      	adds	r3, r0, #1
 8016f6a:	d102      	bne.n	8016f72 <_write_r+0x1e>
 8016f6c:	682b      	ldr	r3, [r5, #0]
 8016f6e:	b103      	cbz	r3, 8016f72 <_write_r+0x1e>
 8016f70:	6023      	str	r3, [r4, #0]
 8016f72:	bd38      	pop	{r3, r4, r5, pc}
 8016f74:	20008ac4 	.word	0x20008ac4

08016f78 <__libc_init_array>:
 8016f78:	b570      	push	{r4, r5, r6, lr}
 8016f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8016fb0 <__libc_init_array+0x38>)
 8016f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8016fb4 <__libc_init_array+0x3c>)
 8016f7e:	1b64      	subs	r4, r4, r5
 8016f80:	10a4      	asrs	r4, r4, #2
 8016f82:	2600      	movs	r6, #0
 8016f84:	42a6      	cmp	r6, r4
 8016f86:	d109      	bne.n	8016f9c <__libc_init_array+0x24>
 8016f88:	4d0b      	ldr	r5, [pc, #44]	@ (8016fb8 <__libc_init_array+0x40>)
 8016f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8016fbc <__libc_init_array+0x44>)
 8016f8c:	f000 fe48 	bl	8017c20 <_init>
 8016f90:	1b64      	subs	r4, r4, r5
 8016f92:	10a4      	asrs	r4, r4, #2
 8016f94:	2600      	movs	r6, #0
 8016f96:	42a6      	cmp	r6, r4
 8016f98:	d105      	bne.n	8016fa6 <__libc_init_array+0x2e>
 8016f9a:	bd70      	pop	{r4, r5, r6, pc}
 8016f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fa0:	4798      	blx	r3
 8016fa2:	3601      	adds	r6, #1
 8016fa4:	e7ee      	b.n	8016f84 <__libc_init_array+0xc>
 8016fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016faa:	4798      	blx	r3
 8016fac:	3601      	adds	r6, #1
 8016fae:	e7f2      	b.n	8016f96 <__libc_init_array+0x1e>
 8016fb0:	0801a80c 	.word	0x0801a80c
 8016fb4:	0801a80c 	.word	0x0801a80c
 8016fb8:	0801a80c 	.word	0x0801a80c
 8016fbc:	0801a810 	.word	0x0801a810

08016fc0 <__retarget_lock_init_recursive>:
 8016fc0:	4770      	bx	lr

08016fc2 <__retarget_lock_acquire_recursive>:
 8016fc2:	4770      	bx	lr

08016fc4 <__retarget_lock_release_recursive>:
 8016fc4:	4770      	bx	lr

08016fc6 <memcpy>:
 8016fc6:	440a      	add	r2, r1
 8016fc8:	4291      	cmp	r1, r2
 8016fca:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fce:	d100      	bne.n	8016fd2 <memcpy+0xc>
 8016fd0:	4770      	bx	lr
 8016fd2:	b510      	push	{r4, lr}
 8016fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fdc:	4291      	cmp	r1, r2
 8016fde:	d1f9      	bne.n	8016fd4 <memcpy+0xe>
 8016fe0:	bd10      	pop	{r4, pc}
	...

08016fe4 <__assert_func>:
 8016fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016fe6:	4614      	mov	r4, r2
 8016fe8:	461a      	mov	r2, r3
 8016fea:	4b09      	ldr	r3, [pc, #36]	@ (8017010 <__assert_func+0x2c>)
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	4605      	mov	r5, r0
 8016ff0:	68d8      	ldr	r0, [r3, #12]
 8016ff2:	b14c      	cbz	r4, 8017008 <__assert_func+0x24>
 8016ff4:	4b07      	ldr	r3, [pc, #28]	@ (8017014 <__assert_func+0x30>)
 8016ff6:	9100      	str	r1, [sp, #0]
 8016ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016ffc:	4906      	ldr	r1, [pc, #24]	@ (8017018 <__assert_func+0x34>)
 8016ffe:	462b      	mov	r3, r5
 8017000:	f000 fc88 	bl	8017914 <fiprintf>
 8017004:	f000 fd3c 	bl	8017a80 <abort>
 8017008:	4b04      	ldr	r3, [pc, #16]	@ (801701c <__assert_func+0x38>)
 801700a:	461c      	mov	r4, r3
 801700c:	e7f3      	b.n	8016ff6 <__assert_func+0x12>
 801700e:	bf00      	nop
 8017010:	20000038 	.word	0x20000038
 8017014:	0801a795 	.word	0x0801a795
 8017018:	0801a7a2 	.word	0x0801a7a2
 801701c:	0801a7d0 	.word	0x0801a7d0

08017020 <_free_r>:
 8017020:	b538      	push	{r3, r4, r5, lr}
 8017022:	4605      	mov	r5, r0
 8017024:	2900      	cmp	r1, #0
 8017026:	d041      	beq.n	80170ac <_free_r+0x8c>
 8017028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801702c:	1f0c      	subs	r4, r1, #4
 801702e:	2b00      	cmp	r3, #0
 8017030:	bfb8      	it	lt
 8017032:	18e4      	addlt	r4, r4, r3
 8017034:	f000 f8e8 	bl	8017208 <__malloc_lock>
 8017038:	4a1d      	ldr	r2, [pc, #116]	@ (80170b0 <_free_r+0x90>)
 801703a:	6813      	ldr	r3, [r2, #0]
 801703c:	b933      	cbnz	r3, 801704c <_free_r+0x2c>
 801703e:	6063      	str	r3, [r4, #4]
 8017040:	6014      	str	r4, [r2, #0]
 8017042:	4628      	mov	r0, r5
 8017044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017048:	f000 b8e4 	b.w	8017214 <__malloc_unlock>
 801704c:	42a3      	cmp	r3, r4
 801704e:	d908      	bls.n	8017062 <_free_r+0x42>
 8017050:	6820      	ldr	r0, [r4, #0]
 8017052:	1821      	adds	r1, r4, r0
 8017054:	428b      	cmp	r3, r1
 8017056:	bf01      	itttt	eq
 8017058:	6819      	ldreq	r1, [r3, #0]
 801705a:	685b      	ldreq	r3, [r3, #4]
 801705c:	1809      	addeq	r1, r1, r0
 801705e:	6021      	streq	r1, [r4, #0]
 8017060:	e7ed      	b.n	801703e <_free_r+0x1e>
 8017062:	461a      	mov	r2, r3
 8017064:	685b      	ldr	r3, [r3, #4]
 8017066:	b10b      	cbz	r3, 801706c <_free_r+0x4c>
 8017068:	42a3      	cmp	r3, r4
 801706a:	d9fa      	bls.n	8017062 <_free_r+0x42>
 801706c:	6811      	ldr	r1, [r2, #0]
 801706e:	1850      	adds	r0, r2, r1
 8017070:	42a0      	cmp	r0, r4
 8017072:	d10b      	bne.n	801708c <_free_r+0x6c>
 8017074:	6820      	ldr	r0, [r4, #0]
 8017076:	4401      	add	r1, r0
 8017078:	1850      	adds	r0, r2, r1
 801707a:	4283      	cmp	r3, r0
 801707c:	6011      	str	r1, [r2, #0]
 801707e:	d1e0      	bne.n	8017042 <_free_r+0x22>
 8017080:	6818      	ldr	r0, [r3, #0]
 8017082:	685b      	ldr	r3, [r3, #4]
 8017084:	6053      	str	r3, [r2, #4]
 8017086:	4408      	add	r0, r1
 8017088:	6010      	str	r0, [r2, #0]
 801708a:	e7da      	b.n	8017042 <_free_r+0x22>
 801708c:	d902      	bls.n	8017094 <_free_r+0x74>
 801708e:	230c      	movs	r3, #12
 8017090:	602b      	str	r3, [r5, #0]
 8017092:	e7d6      	b.n	8017042 <_free_r+0x22>
 8017094:	6820      	ldr	r0, [r4, #0]
 8017096:	1821      	adds	r1, r4, r0
 8017098:	428b      	cmp	r3, r1
 801709a:	bf04      	itt	eq
 801709c:	6819      	ldreq	r1, [r3, #0]
 801709e:	685b      	ldreq	r3, [r3, #4]
 80170a0:	6063      	str	r3, [r4, #4]
 80170a2:	bf04      	itt	eq
 80170a4:	1809      	addeq	r1, r1, r0
 80170a6:	6021      	streq	r1, [r4, #0]
 80170a8:	6054      	str	r4, [r2, #4]
 80170aa:	e7ca      	b.n	8017042 <_free_r+0x22>
 80170ac:	bd38      	pop	{r3, r4, r5, pc}
 80170ae:	bf00      	nop
 80170b0:	20008ad0 	.word	0x20008ad0

080170b4 <malloc>:
 80170b4:	4b02      	ldr	r3, [pc, #8]	@ (80170c0 <malloc+0xc>)
 80170b6:	4601      	mov	r1, r0
 80170b8:	6818      	ldr	r0, [r3, #0]
 80170ba:	f000 b825 	b.w	8017108 <_malloc_r>
 80170be:	bf00      	nop
 80170c0:	20000038 	.word	0x20000038

080170c4 <sbrk_aligned>:
 80170c4:	b570      	push	{r4, r5, r6, lr}
 80170c6:	4e0f      	ldr	r6, [pc, #60]	@ (8017104 <sbrk_aligned+0x40>)
 80170c8:	460c      	mov	r4, r1
 80170ca:	6831      	ldr	r1, [r6, #0]
 80170cc:	4605      	mov	r5, r0
 80170ce:	b911      	cbnz	r1, 80170d6 <sbrk_aligned+0x12>
 80170d0:	f000 fcc6 	bl	8017a60 <_sbrk_r>
 80170d4:	6030      	str	r0, [r6, #0]
 80170d6:	4621      	mov	r1, r4
 80170d8:	4628      	mov	r0, r5
 80170da:	f000 fcc1 	bl	8017a60 <_sbrk_r>
 80170de:	1c43      	adds	r3, r0, #1
 80170e0:	d103      	bne.n	80170ea <sbrk_aligned+0x26>
 80170e2:	f04f 34ff 	mov.w	r4, #4294967295
 80170e6:	4620      	mov	r0, r4
 80170e8:	bd70      	pop	{r4, r5, r6, pc}
 80170ea:	1cc4      	adds	r4, r0, #3
 80170ec:	f024 0403 	bic.w	r4, r4, #3
 80170f0:	42a0      	cmp	r0, r4
 80170f2:	d0f8      	beq.n	80170e6 <sbrk_aligned+0x22>
 80170f4:	1a21      	subs	r1, r4, r0
 80170f6:	4628      	mov	r0, r5
 80170f8:	f000 fcb2 	bl	8017a60 <_sbrk_r>
 80170fc:	3001      	adds	r0, #1
 80170fe:	d1f2      	bne.n	80170e6 <sbrk_aligned+0x22>
 8017100:	e7ef      	b.n	80170e2 <sbrk_aligned+0x1e>
 8017102:	bf00      	nop
 8017104:	20008acc 	.word	0x20008acc

08017108 <_malloc_r>:
 8017108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801710c:	1ccd      	adds	r5, r1, #3
 801710e:	f025 0503 	bic.w	r5, r5, #3
 8017112:	3508      	adds	r5, #8
 8017114:	2d0c      	cmp	r5, #12
 8017116:	bf38      	it	cc
 8017118:	250c      	movcc	r5, #12
 801711a:	2d00      	cmp	r5, #0
 801711c:	4606      	mov	r6, r0
 801711e:	db01      	blt.n	8017124 <_malloc_r+0x1c>
 8017120:	42a9      	cmp	r1, r5
 8017122:	d904      	bls.n	801712e <_malloc_r+0x26>
 8017124:	230c      	movs	r3, #12
 8017126:	6033      	str	r3, [r6, #0]
 8017128:	2000      	movs	r0, #0
 801712a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801712e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017204 <_malloc_r+0xfc>
 8017132:	f000 f869 	bl	8017208 <__malloc_lock>
 8017136:	f8d8 3000 	ldr.w	r3, [r8]
 801713a:	461c      	mov	r4, r3
 801713c:	bb44      	cbnz	r4, 8017190 <_malloc_r+0x88>
 801713e:	4629      	mov	r1, r5
 8017140:	4630      	mov	r0, r6
 8017142:	f7ff ffbf 	bl	80170c4 <sbrk_aligned>
 8017146:	1c43      	adds	r3, r0, #1
 8017148:	4604      	mov	r4, r0
 801714a:	d158      	bne.n	80171fe <_malloc_r+0xf6>
 801714c:	f8d8 4000 	ldr.w	r4, [r8]
 8017150:	4627      	mov	r7, r4
 8017152:	2f00      	cmp	r7, #0
 8017154:	d143      	bne.n	80171de <_malloc_r+0xd6>
 8017156:	2c00      	cmp	r4, #0
 8017158:	d04b      	beq.n	80171f2 <_malloc_r+0xea>
 801715a:	6823      	ldr	r3, [r4, #0]
 801715c:	4639      	mov	r1, r7
 801715e:	4630      	mov	r0, r6
 8017160:	eb04 0903 	add.w	r9, r4, r3
 8017164:	f000 fc7c 	bl	8017a60 <_sbrk_r>
 8017168:	4581      	cmp	r9, r0
 801716a:	d142      	bne.n	80171f2 <_malloc_r+0xea>
 801716c:	6821      	ldr	r1, [r4, #0]
 801716e:	1a6d      	subs	r5, r5, r1
 8017170:	4629      	mov	r1, r5
 8017172:	4630      	mov	r0, r6
 8017174:	f7ff ffa6 	bl	80170c4 <sbrk_aligned>
 8017178:	3001      	adds	r0, #1
 801717a:	d03a      	beq.n	80171f2 <_malloc_r+0xea>
 801717c:	6823      	ldr	r3, [r4, #0]
 801717e:	442b      	add	r3, r5
 8017180:	6023      	str	r3, [r4, #0]
 8017182:	f8d8 3000 	ldr.w	r3, [r8]
 8017186:	685a      	ldr	r2, [r3, #4]
 8017188:	bb62      	cbnz	r2, 80171e4 <_malloc_r+0xdc>
 801718a:	f8c8 7000 	str.w	r7, [r8]
 801718e:	e00f      	b.n	80171b0 <_malloc_r+0xa8>
 8017190:	6822      	ldr	r2, [r4, #0]
 8017192:	1b52      	subs	r2, r2, r5
 8017194:	d420      	bmi.n	80171d8 <_malloc_r+0xd0>
 8017196:	2a0b      	cmp	r2, #11
 8017198:	d917      	bls.n	80171ca <_malloc_r+0xc2>
 801719a:	1961      	adds	r1, r4, r5
 801719c:	42a3      	cmp	r3, r4
 801719e:	6025      	str	r5, [r4, #0]
 80171a0:	bf18      	it	ne
 80171a2:	6059      	strne	r1, [r3, #4]
 80171a4:	6863      	ldr	r3, [r4, #4]
 80171a6:	bf08      	it	eq
 80171a8:	f8c8 1000 	streq.w	r1, [r8]
 80171ac:	5162      	str	r2, [r4, r5]
 80171ae:	604b      	str	r3, [r1, #4]
 80171b0:	4630      	mov	r0, r6
 80171b2:	f000 f82f 	bl	8017214 <__malloc_unlock>
 80171b6:	f104 000b 	add.w	r0, r4, #11
 80171ba:	1d23      	adds	r3, r4, #4
 80171bc:	f020 0007 	bic.w	r0, r0, #7
 80171c0:	1ac2      	subs	r2, r0, r3
 80171c2:	bf1c      	itt	ne
 80171c4:	1a1b      	subne	r3, r3, r0
 80171c6:	50a3      	strne	r3, [r4, r2]
 80171c8:	e7af      	b.n	801712a <_malloc_r+0x22>
 80171ca:	6862      	ldr	r2, [r4, #4]
 80171cc:	42a3      	cmp	r3, r4
 80171ce:	bf0c      	ite	eq
 80171d0:	f8c8 2000 	streq.w	r2, [r8]
 80171d4:	605a      	strne	r2, [r3, #4]
 80171d6:	e7eb      	b.n	80171b0 <_malloc_r+0xa8>
 80171d8:	4623      	mov	r3, r4
 80171da:	6864      	ldr	r4, [r4, #4]
 80171dc:	e7ae      	b.n	801713c <_malloc_r+0x34>
 80171de:	463c      	mov	r4, r7
 80171e0:	687f      	ldr	r7, [r7, #4]
 80171e2:	e7b6      	b.n	8017152 <_malloc_r+0x4a>
 80171e4:	461a      	mov	r2, r3
 80171e6:	685b      	ldr	r3, [r3, #4]
 80171e8:	42a3      	cmp	r3, r4
 80171ea:	d1fb      	bne.n	80171e4 <_malloc_r+0xdc>
 80171ec:	2300      	movs	r3, #0
 80171ee:	6053      	str	r3, [r2, #4]
 80171f0:	e7de      	b.n	80171b0 <_malloc_r+0xa8>
 80171f2:	230c      	movs	r3, #12
 80171f4:	6033      	str	r3, [r6, #0]
 80171f6:	4630      	mov	r0, r6
 80171f8:	f000 f80c 	bl	8017214 <__malloc_unlock>
 80171fc:	e794      	b.n	8017128 <_malloc_r+0x20>
 80171fe:	6005      	str	r5, [r0, #0]
 8017200:	e7d6      	b.n	80171b0 <_malloc_r+0xa8>
 8017202:	bf00      	nop
 8017204:	20008ad0 	.word	0x20008ad0

08017208 <__malloc_lock>:
 8017208:	4801      	ldr	r0, [pc, #4]	@ (8017210 <__malloc_lock+0x8>)
 801720a:	f7ff beda 	b.w	8016fc2 <__retarget_lock_acquire_recursive>
 801720e:	bf00      	nop
 8017210:	20008ac8 	.word	0x20008ac8

08017214 <__malloc_unlock>:
 8017214:	4801      	ldr	r0, [pc, #4]	@ (801721c <__malloc_unlock+0x8>)
 8017216:	f7ff bed5 	b.w	8016fc4 <__retarget_lock_release_recursive>
 801721a:	bf00      	nop
 801721c:	20008ac8 	.word	0x20008ac8

08017220 <__sfputc_r>:
 8017220:	6893      	ldr	r3, [r2, #8]
 8017222:	3b01      	subs	r3, #1
 8017224:	2b00      	cmp	r3, #0
 8017226:	b410      	push	{r4}
 8017228:	6093      	str	r3, [r2, #8]
 801722a:	da08      	bge.n	801723e <__sfputc_r+0x1e>
 801722c:	6994      	ldr	r4, [r2, #24]
 801722e:	42a3      	cmp	r3, r4
 8017230:	db01      	blt.n	8017236 <__sfputc_r+0x16>
 8017232:	290a      	cmp	r1, #10
 8017234:	d103      	bne.n	801723e <__sfputc_r+0x1e>
 8017236:	f85d 4b04 	ldr.w	r4, [sp], #4
 801723a:	f000 bb7d 	b.w	8017938 <__swbuf_r>
 801723e:	6813      	ldr	r3, [r2, #0]
 8017240:	1c58      	adds	r0, r3, #1
 8017242:	6010      	str	r0, [r2, #0]
 8017244:	7019      	strb	r1, [r3, #0]
 8017246:	4608      	mov	r0, r1
 8017248:	f85d 4b04 	ldr.w	r4, [sp], #4
 801724c:	4770      	bx	lr

0801724e <__sfputs_r>:
 801724e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017250:	4606      	mov	r6, r0
 8017252:	460f      	mov	r7, r1
 8017254:	4614      	mov	r4, r2
 8017256:	18d5      	adds	r5, r2, r3
 8017258:	42ac      	cmp	r4, r5
 801725a:	d101      	bne.n	8017260 <__sfputs_r+0x12>
 801725c:	2000      	movs	r0, #0
 801725e:	e007      	b.n	8017270 <__sfputs_r+0x22>
 8017260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017264:	463a      	mov	r2, r7
 8017266:	4630      	mov	r0, r6
 8017268:	f7ff ffda 	bl	8017220 <__sfputc_r>
 801726c:	1c43      	adds	r3, r0, #1
 801726e:	d1f3      	bne.n	8017258 <__sfputs_r+0xa>
 8017270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017274 <_vfiprintf_r>:
 8017274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017278:	460d      	mov	r5, r1
 801727a:	b09d      	sub	sp, #116	@ 0x74
 801727c:	4614      	mov	r4, r2
 801727e:	4698      	mov	r8, r3
 8017280:	4606      	mov	r6, r0
 8017282:	b118      	cbz	r0, 801728c <_vfiprintf_r+0x18>
 8017284:	6a03      	ldr	r3, [r0, #32]
 8017286:	b90b      	cbnz	r3, 801728c <_vfiprintf_r+0x18>
 8017288:	f7ff fd8c 	bl	8016da4 <__sinit>
 801728c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801728e:	07d9      	lsls	r1, r3, #31
 8017290:	d405      	bmi.n	801729e <_vfiprintf_r+0x2a>
 8017292:	89ab      	ldrh	r3, [r5, #12]
 8017294:	059a      	lsls	r2, r3, #22
 8017296:	d402      	bmi.n	801729e <_vfiprintf_r+0x2a>
 8017298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801729a:	f7ff fe92 	bl	8016fc2 <__retarget_lock_acquire_recursive>
 801729e:	89ab      	ldrh	r3, [r5, #12]
 80172a0:	071b      	lsls	r3, r3, #28
 80172a2:	d501      	bpl.n	80172a8 <_vfiprintf_r+0x34>
 80172a4:	692b      	ldr	r3, [r5, #16]
 80172a6:	b99b      	cbnz	r3, 80172d0 <_vfiprintf_r+0x5c>
 80172a8:	4629      	mov	r1, r5
 80172aa:	4630      	mov	r0, r6
 80172ac:	f000 fb82 	bl	80179b4 <__swsetup_r>
 80172b0:	b170      	cbz	r0, 80172d0 <_vfiprintf_r+0x5c>
 80172b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172b4:	07dc      	lsls	r4, r3, #31
 80172b6:	d504      	bpl.n	80172c2 <_vfiprintf_r+0x4e>
 80172b8:	f04f 30ff 	mov.w	r0, #4294967295
 80172bc:	b01d      	add	sp, #116	@ 0x74
 80172be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172c2:	89ab      	ldrh	r3, [r5, #12]
 80172c4:	0598      	lsls	r0, r3, #22
 80172c6:	d4f7      	bmi.n	80172b8 <_vfiprintf_r+0x44>
 80172c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172ca:	f7ff fe7b 	bl	8016fc4 <__retarget_lock_release_recursive>
 80172ce:	e7f3      	b.n	80172b8 <_vfiprintf_r+0x44>
 80172d0:	2300      	movs	r3, #0
 80172d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80172d4:	2320      	movs	r3, #32
 80172d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80172da:	f8cd 800c 	str.w	r8, [sp, #12]
 80172de:	2330      	movs	r3, #48	@ 0x30
 80172e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017490 <_vfiprintf_r+0x21c>
 80172e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80172e8:	f04f 0901 	mov.w	r9, #1
 80172ec:	4623      	mov	r3, r4
 80172ee:	469a      	mov	sl, r3
 80172f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172f4:	b10a      	cbz	r2, 80172fa <_vfiprintf_r+0x86>
 80172f6:	2a25      	cmp	r2, #37	@ 0x25
 80172f8:	d1f9      	bne.n	80172ee <_vfiprintf_r+0x7a>
 80172fa:	ebba 0b04 	subs.w	fp, sl, r4
 80172fe:	d00b      	beq.n	8017318 <_vfiprintf_r+0xa4>
 8017300:	465b      	mov	r3, fp
 8017302:	4622      	mov	r2, r4
 8017304:	4629      	mov	r1, r5
 8017306:	4630      	mov	r0, r6
 8017308:	f7ff ffa1 	bl	801724e <__sfputs_r>
 801730c:	3001      	adds	r0, #1
 801730e:	f000 80a7 	beq.w	8017460 <_vfiprintf_r+0x1ec>
 8017312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017314:	445a      	add	r2, fp
 8017316:	9209      	str	r2, [sp, #36]	@ 0x24
 8017318:	f89a 3000 	ldrb.w	r3, [sl]
 801731c:	2b00      	cmp	r3, #0
 801731e:	f000 809f 	beq.w	8017460 <_vfiprintf_r+0x1ec>
 8017322:	2300      	movs	r3, #0
 8017324:	f04f 32ff 	mov.w	r2, #4294967295
 8017328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801732c:	f10a 0a01 	add.w	sl, sl, #1
 8017330:	9304      	str	r3, [sp, #16]
 8017332:	9307      	str	r3, [sp, #28]
 8017334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017338:	931a      	str	r3, [sp, #104]	@ 0x68
 801733a:	4654      	mov	r4, sl
 801733c:	2205      	movs	r2, #5
 801733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017342:	4853      	ldr	r0, [pc, #332]	@ (8017490 <_vfiprintf_r+0x21c>)
 8017344:	f7e8 ff64 	bl	8000210 <memchr>
 8017348:	9a04      	ldr	r2, [sp, #16]
 801734a:	b9d8      	cbnz	r0, 8017384 <_vfiprintf_r+0x110>
 801734c:	06d1      	lsls	r1, r2, #27
 801734e:	bf44      	itt	mi
 8017350:	2320      	movmi	r3, #32
 8017352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017356:	0713      	lsls	r3, r2, #28
 8017358:	bf44      	itt	mi
 801735a:	232b      	movmi	r3, #43	@ 0x2b
 801735c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017360:	f89a 3000 	ldrb.w	r3, [sl]
 8017364:	2b2a      	cmp	r3, #42	@ 0x2a
 8017366:	d015      	beq.n	8017394 <_vfiprintf_r+0x120>
 8017368:	9a07      	ldr	r2, [sp, #28]
 801736a:	4654      	mov	r4, sl
 801736c:	2000      	movs	r0, #0
 801736e:	f04f 0c0a 	mov.w	ip, #10
 8017372:	4621      	mov	r1, r4
 8017374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017378:	3b30      	subs	r3, #48	@ 0x30
 801737a:	2b09      	cmp	r3, #9
 801737c:	d94b      	bls.n	8017416 <_vfiprintf_r+0x1a2>
 801737e:	b1b0      	cbz	r0, 80173ae <_vfiprintf_r+0x13a>
 8017380:	9207      	str	r2, [sp, #28]
 8017382:	e014      	b.n	80173ae <_vfiprintf_r+0x13a>
 8017384:	eba0 0308 	sub.w	r3, r0, r8
 8017388:	fa09 f303 	lsl.w	r3, r9, r3
 801738c:	4313      	orrs	r3, r2
 801738e:	9304      	str	r3, [sp, #16]
 8017390:	46a2      	mov	sl, r4
 8017392:	e7d2      	b.n	801733a <_vfiprintf_r+0xc6>
 8017394:	9b03      	ldr	r3, [sp, #12]
 8017396:	1d19      	adds	r1, r3, #4
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	9103      	str	r1, [sp, #12]
 801739c:	2b00      	cmp	r3, #0
 801739e:	bfbb      	ittet	lt
 80173a0:	425b      	neglt	r3, r3
 80173a2:	f042 0202 	orrlt.w	r2, r2, #2
 80173a6:	9307      	strge	r3, [sp, #28]
 80173a8:	9307      	strlt	r3, [sp, #28]
 80173aa:	bfb8      	it	lt
 80173ac:	9204      	strlt	r2, [sp, #16]
 80173ae:	7823      	ldrb	r3, [r4, #0]
 80173b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80173b2:	d10a      	bne.n	80173ca <_vfiprintf_r+0x156>
 80173b4:	7863      	ldrb	r3, [r4, #1]
 80173b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80173b8:	d132      	bne.n	8017420 <_vfiprintf_r+0x1ac>
 80173ba:	9b03      	ldr	r3, [sp, #12]
 80173bc:	1d1a      	adds	r2, r3, #4
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	9203      	str	r2, [sp, #12]
 80173c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80173c6:	3402      	adds	r4, #2
 80173c8:	9305      	str	r3, [sp, #20]
 80173ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80174a0 <_vfiprintf_r+0x22c>
 80173ce:	7821      	ldrb	r1, [r4, #0]
 80173d0:	2203      	movs	r2, #3
 80173d2:	4650      	mov	r0, sl
 80173d4:	f7e8 ff1c 	bl	8000210 <memchr>
 80173d8:	b138      	cbz	r0, 80173ea <_vfiprintf_r+0x176>
 80173da:	9b04      	ldr	r3, [sp, #16]
 80173dc:	eba0 000a 	sub.w	r0, r0, sl
 80173e0:	2240      	movs	r2, #64	@ 0x40
 80173e2:	4082      	lsls	r2, r0
 80173e4:	4313      	orrs	r3, r2
 80173e6:	3401      	adds	r4, #1
 80173e8:	9304      	str	r3, [sp, #16]
 80173ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173ee:	4829      	ldr	r0, [pc, #164]	@ (8017494 <_vfiprintf_r+0x220>)
 80173f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80173f4:	2206      	movs	r2, #6
 80173f6:	f7e8 ff0b 	bl	8000210 <memchr>
 80173fa:	2800      	cmp	r0, #0
 80173fc:	d03f      	beq.n	801747e <_vfiprintf_r+0x20a>
 80173fe:	4b26      	ldr	r3, [pc, #152]	@ (8017498 <_vfiprintf_r+0x224>)
 8017400:	bb1b      	cbnz	r3, 801744a <_vfiprintf_r+0x1d6>
 8017402:	9b03      	ldr	r3, [sp, #12]
 8017404:	3307      	adds	r3, #7
 8017406:	f023 0307 	bic.w	r3, r3, #7
 801740a:	3308      	adds	r3, #8
 801740c:	9303      	str	r3, [sp, #12]
 801740e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017410:	443b      	add	r3, r7
 8017412:	9309      	str	r3, [sp, #36]	@ 0x24
 8017414:	e76a      	b.n	80172ec <_vfiprintf_r+0x78>
 8017416:	fb0c 3202 	mla	r2, ip, r2, r3
 801741a:	460c      	mov	r4, r1
 801741c:	2001      	movs	r0, #1
 801741e:	e7a8      	b.n	8017372 <_vfiprintf_r+0xfe>
 8017420:	2300      	movs	r3, #0
 8017422:	3401      	adds	r4, #1
 8017424:	9305      	str	r3, [sp, #20]
 8017426:	4619      	mov	r1, r3
 8017428:	f04f 0c0a 	mov.w	ip, #10
 801742c:	4620      	mov	r0, r4
 801742e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017432:	3a30      	subs	r2, #48	@ 0x30
 8017434:	2a09      	cmp	r2, #9
 8017436:	d903      	bls.n	8017440 <_vfiprintf_r+0x1cc>
 8017438:	2b00      	cmp	r3, #0
 801743a:	d0c6      	beq.n	80173ca <_vfiprintf_r+0x156>
 801743c:	9105      	str	r1, [sp, #20]
 801743e:	e7c4      	b.n	80173ca <_vfiprintf_r+0x156>
 8017440:	fb0c 2101 	mla	r1, ip, r1, r2
 8017444:	4604      	mov	r4, r0
 8017446:	2301      	movs	r3, #1
 8017448:	e7f0      	b.n	801742c <_vfiprintf_r+0x1b8>
 801744a:	ab03      	add	r3, sp, #12
 801744c:	9300      	str	r3, [sp, #0]
 801744e:	462a      	mov	r2, r5
 8017450:	4b12      	ldr	r3, [pc, #72]	@ (801749c <_vfiprintf_r+0x228>)
 8017452:	a904      	add	r1, sp, #16
 8017454:	4630      	mov	r0, r6
 8017456:	f3af 8000 	nop.w
 801745a:	4607      	mov	r7, r0
 801745c:	1c78      	adds	r0, r7, #1
 801745e:	d1d6      	bne.n	801740e <_vfiprintf_r+0x19a>
 8017460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017462:	07d9      	lsls	r1, r3, #31
 8017464:	d405      	bmi.n	8017472 <_vfiprintf_r+0x1fe>
 8017466:	89ab      	ldrh	r3, [r5, #12]
 8017468:	059a      	lsls	r2, r3, #22
 801746a:	d402      	bmi.n	8017472 <_vfiprintf_r+0x1fe>
 801746c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801746e:	f7ff fda9 	bl	8016fc4 <__retarget_lock_release_recursive>
 8017472:	89ab      	ldrh	r3, [r5, #12]
 8017474:	065b      	lsls	r3, r3, #25
 8017476:	f53f af1f 	bmi.w	80172b8 <_vfiprintf_r+0x44>
 801747a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801747c:	e71e      	b.n	80172bc <_vfiprintf_r+0x48>
 801747e:	ab03      	add	r3, sp, #12
 8017480:	9300      	str	r3, [sp, #0]
 8017482:	462a      	mov	r2, r5
 8017484:	4b05      	ldr	r3, [pc, #20]	@ (801749c <_vfiprintf_r+0x228>)
 8017486:	a904      	add	r1, sp, #16
 8017488:	4630      	mov	r0, r6
 801748a:	f000 f879 	bl	8017580 <_printf_i>
 801748e:	e7e4      	b.n	801745a <_vfiprintf_r+0x1e6>
 8017490:	0801a7d1 	.word	0x0801a7d1
 8017494:	0801a7db 	.word	0x0801a7db
 8017498:	00000000 	.word	0x00000000
 801749c:	0801724f 	.word	0x0801724f
 80174a0:	0801a7d7 	.word	0x0801a7d7

080174a4 <_printf_common>:
 80174a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174a8:	4616      	mov	r6, r2
 80174aa:	4698      	mov	r8, r3
 80174ac:	688a      	ldr	r2, [r1, #8]
 80174ae:	690b      	ldr	r3, [r1, #16]
 80174b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80174b4:	4293      	cmp	r3, r2
 80174b6:	bfb8      	it	lt
 80174b8:	4613      	movlt	r3, r2
 80174ba:	6033      	str	r3, [r6, #0]
 80174bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80174c0:	4607      	mov	r7, r0
 80174c2:	460c      	mov	r4, r1
 80174c4:	b10a      	cbz	r2, 80174ca <_printf_common+0x26>
 80174c6:	3301      	adds	r3, #1
 80174c8:	6033      	str	r3, [r6, #0]
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	0699      	lsls	r1, r3, #26
 80174ce:	bf42      	ittt	mi
 80174d0:	6833      	ldrmi	r3, [r6, #0]
 80174d2:	3302      	addmi	r3, #2
 80174d4:	6033      	strmi	r3, [r6, #0]
 80174d6:	6825      	ldr	r5, [r4, #0]
 80174d8:	f015 0506 	ands.w	r5, r5, #6
 80174dc:	d106      	bne.n	80174ec <_printf_common+0x48>
 80174de:	f104 0a19 	add.w	sl, r4, #25
 80174e2:	68e3      	ldr	r3, [r4, #12]
 80174e4:	6832      	ldr	r2, [r6, #0]
 80174e6:	1a9b      	subs	r3, r3, r2
 80174e8:	42ab      	cmp	r3, r5
 80174ea:	dc26      	bgt.n	801753a <_printf_common+0x96>
 80174ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80174f0:	6822      	ldr	r2, [r4, #0]
 80174f2:	3b00      	subs	r3, #0
 80174f4:	bf18      	it	ne
 80174f6:	2301      	movne	r3, #1
 80174f8:	0692      	lsls	r2, r2, #26
 80174fa:	d42b      	bmi.n	8017554 <_printf_common+0xb0>
 80174fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017500:	4641      	mov	r1, r8
 8017502:	4638      	mov	r0, r7
 8017504:	47c8      	blx	r9
 8017506:	3001      	adds	r0, #1
 8017508:	d01e      	beq.n	8017548 <_printf_common+0xa4>
 801750a:	6823      	ldr	r3, [r4, #0]
 801750c:	6922      	ldr	r2, [r4, #16]
 801750e:	f003 0306 	and.w	r3, r3, #6
 8017512:	2b04      	cmp	r3, #4
 8017514:	bf02      	ittt	eq
 8017516:	68e5      	ldreq	r5, [r4, #12]
 8017518:	6833      	ldreq	r3, [r6, #0]
 801751a:	1aed      	subeq	r5, r5, r3
 801751c:	68a3      	ldr	r3, [r4, #8]
 801751e:	bf0c      	ite	eq
 8017520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017524:	2500      	movne	r5, #0
 8017526:	4293      	cmp	r3, r2
 8017528:	bfc4      	itt	gt
 801752a:	1a9b      	subgt	r3, r3, r2
 801752c:	18ed      	addgt	r5, r5, r3
 801752e:	2600      	movs	r6, #0
 8017530:	341a      	adds	r4, #26
 8017532:	42b5      	cmp	r5, r6
 8017534:	d11a      	bne.n	801756c <_printf_common+0xc8>
 8017536:	2000      	movs	r0, #0
 8017538:	e008      	b.n	801754c <_printf_common+0xa8>
 801753a:	2301      	movs	r3, #1
 801753c:	4652      	mov	r2, sl
 801753e:	4641      	mov	r1, r8
 8017540:	4638      	mov	r0, r7
 8017542:	47c8      	blx	r9
 8017544:	3001      	adds	r0, #1
 8017546:	d103      	bne.n	8017550 <_printf_common+0xac>
 8017548:	f04f 30ff 	mov.w	r0, #4294967295
 801754c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017550:	3501      	adds	r5, #1
 8017552:	e7c6      	b.n	80174e2 <_printf_common+0x3e>
 8017554:	18e1      	adds	r1, r4, r3
 8017556:	1c5a      	adds	r2, r3, #1
 8017558:	2030      	movs	r0, #48	@ 0x30
 801755a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801755e:	4422      	add	r2, r4
 8017560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017568:	3302      	adds	r3, #2
 801756a:	e7c7      	b.n	80174fc <_printf_common+0x58>
 801756c:	2301      	movs	r3, #1
 801756e:	4622      	mov	r2, r4
 8017570:	4641      	mov	r1, r8
 8017572:	4638      	mov	r0, r7
 8017574:	47c8      	blx	r9
 8017576:	3001      	adds	r0, #1
 8017578:	d0e6      	beq.n	8017548 <_printf_common+0xa4>
 801757a:	3601      	adds	r6, #1
 801757c:	e7d9      	b.n	8017532 <_printf_common+0x8e>
	...

08017580 <_printf_i>:
 8017580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017584:	7e0f      	ldrb	r7, [r1, #24]
 8017586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017588:	2f78      	cmp	r7, #120	@ 0x78
 801758a:	4691      	mov	r9, r2
 801758c:	4680      	mov	r8, r0
 801758e:	460c      	mov	r4, r1
 8017590:	469a      	mov	sl, r3
 8017592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017596:	d807      	bhi.n	80175a8 <_printf_i+0x28>
 8017598:	2f62      	cmp	r7, #98	@ 0x62
 801759a:	d80a      	bhi.n	80175b2 <_printf_i+0x32>
 801759c:	2f00      	cmp	r7, #0
 801759e:	f000 80d1 	beq.w	8017744 <_printf_i+0x1c4>
 80175a2:	2f58      	cmp	r7, #88	@ 0x58
 80175a4:	f000 80b8 	beq.w	8017718 <_printf_i+0x198>
 80175a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80175ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80175b0:	e03a      	b.n	8017628 <_printf_i+0xa8>
 80175b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80175b6:	2b15      	cmp	r3, #21
 80175b8:	d8f6      	bhi.n	80175a8 <_printf_i+0x28>
 80175ba:	a101      	add	r1, pc, #4	@ (adr r1, 80175c0 <_printf_i+0x40>)
 80175bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80175c0:	08017619 	.word	0x08017619
 80175c4:	0801762d 	.word	0x0801762d
 80175c8:	080175a9 	.word	0x080175a9
 80175cc:	080175a9 	.word	0x080175a9
 80175d0:	080175a9 	.word	0x080175a9
 80175d4:	080175a9 	.word	0x080175a9
 80175d8:	0801762d 	.word	0x0801762d
 80175dc:	080175a9 	.word	0x080175a9
 80175e0:	080175a9 	.word	0x080175a9
 80175e4:	080175a9 	.word	0x080175a9
 80175e8:	080175a9 	.word	0x080175a9
 80175ec:	0801772b 	.word	0x0801772b
 80175f0:	08017657 	.word	0x08017657
 80175f4:	080176e5 	.word	0x080176e5
 80175f8:	080175a9 	.word	0x080175a9
 80175fc:	080175a9 	.word	0x080175a9
 8017600:	0801774d 	.word	0x0801774d
 8017604:	080175a9 	.word	0x080175a9
 8017608:	08017657 	.word	0x08017657
 801760c:	080175a9 	.word	0x080175a9
 8017610:	080175a9 	.word	0x080175a9
 8017614:	080176ed 	.word	0x080176ed
 8017618:	6833      	ldr	r3, [r6, #0]
 801761a:	1d1a      	adds	r2, r3, #4
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	6032      	str	r2, [r6, #0]
 8017620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017628:	2301      	movs	r3, #1
 801762a:	e09c      	b.n	8017766 <_printf_i+0x1e6>
 801762c:	6833      	ldr	r3, [r6, #0]
 801762e:	6820      	ldr	r0, [r4, #0]
 8017630:	1d19      	adds	r1, r3, #4
 8017632:	6031      	str	r1, [r6, #0]
 8017634:	0606      	lsls	r6, r0, #24
 8017636:	d501      	bpl.n	801763c <_printf_i+0xbc>
 8017638:	681d      	ldr	r5, [r3, #0]
 801763a:	e003      	b.n	8017644 <_printf_i+0xc4>
 801763c:	0645      	lsls	r5, r0, #25
 801763e:	d5fb      	bpl.n	8017638 <_printf_i+0xb8>
 8017640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017644:	2d00      	cmp	r5, #0
 8017646:	da03      	bge.n	8017650 <_printf_i+0xd0>
 8017648:	232d      	movs	r3, #45	@ 0x2d
 801764a:	426d      	negs	r5, r5
 801764c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017650:	4858      	ldr	r0, [pc, #352]	@ (80177b4 <_printf_i+0x234>)
 8017652:	230a      	movs	r3, #10
 8017654:	e011      	b.n	801767a <_printf_i+0xfa>
 8017656:	6821      	ldr	r1, [r4, #0]
 8017658:	6833      	ldr	r3, [r6, #0]
 801765a:	0608      	lsls	r0, r1, #24
 801765c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017660:	d402      	bmi.n	8017668 <_printf_i+0xe8>
 8017662:	0649      	lsls	r1, r1, #25
 8017664:	bf48      	it	mi
 8017666:	b2ad      	uxthmi	r5, r5
 8017668:	2f6f      	cmp	r7, #111	@ 0x6f
 801766a:	4852      	ldr	r0, [pc, #328]	@ (80177b4 <_printf_i+0x234>)
 801766c:	6033      	str	r3, [r6, #0]
 801766e:	bf14      	ite	ne
 8017670:	230a      	movne	r3, #10
 8017672:	2308      	moveq	r3, #8
 8017674:	2100      	movs	r1, #0
 8017676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801767a:	6866      	ldr	r6, [r4, #4]
 801767c:	60a6      	str	r6, [r4, #8]
 801767e:	2e00      	cmp	r6, #0
 8017680:	db05      	blt.n	801768e <_printf_i+0x10e>
 8017682:	6821      	ldr	r1, [r4, #0]
 8017684:	432e      	orrs	r6, r5
 8017686:	f021 0104 	bic.w	r1, r1, #4
 801768a:	6021      	str	r1, [r4, #0]
 801768c:	d04b      	beq.n	8017726 <_printf_i+0x1a6>
 801768e:	4616      	mov	r6, r2
 8017690:	fbb5 f1f3 	udiv	r1, r5, r3
 8017694:	fb03 5711 	mls	r7, r3, r1, r5
 8017698:	5dc7      	ldrb	r7, [r0, r7]
 801769a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801769e:	462f      	mov	r7, r5
 80176a0:	42bb      	cmp	r3, r7
 80176a2:	460d      	mov	r5, r1
 80176a4:	d9f4      	bls.n	8017690 <_printf_i+0x110>
 80176a6:	2b08      	cmp	r3, #8
 80176a8:	d10b      	bne.n	80176c2 <_printf_i+0x142>
 80176aa:	6823      	ldr	r3, [r4, #0]
 80176ac:	07df      	lsls	r7, r3, #31
 80176ae:	d508      	bpl.n	80176c2 <_printf_i+0x142>
 80176b0:	6923      	ldr	r3, [r4, #16]
 80176b2:	6861      	ldr	r1, [r4, #4]
 80176b4:	4299      	cmp	r1, r3
 80176b6:	bfde      	ittt	le
 80176b8:	2330      	movle	r3, #48	@ 0x30
 80176ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80176be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80176c2:	1b92      	subs	r2, r2, r6
 80176c4:	6122      	str	r2, [r4, #16]
 80176c6:	f8cd a000 	str.w	sl, [sp]
 80176ca:	464b      	mov	r3, r9
 80176cc:	aa03      	add	r2, sp, #12
 80176ce:	4621      	mov	r1, r4
 80176d0:	4640      	mov	r0, r8
 80176d2:	f7ff fee7 	bl	80174a4 <_printf_common>
 80176d6:	3001      	adds	r0, #1
 80176d8:	d14a      	bne.n	8017770 <_printf_i+0x1f0>
 80176da:	f04f 30ff 	mov.w	r0, #4294967295
 80176de:	b004      	add	sp, #16
 80176e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176e4:	6823      	ldr	r3, [r4, #0]
 80176e6:	f043 0320 	orr.w	r3, r3, #32
 80176ea:	6023      	str	r3, [r4, #0]
 80176ec:	4832      	ldr	r0, [pc, #200]	@ (80177b8 <_printf_i+0x238>)
 80176ee:	2778      	movs	r7, #120	@ 0x78
 80176f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80176f4:	6823      	ldr	r3, [r4, #0]
 80176f6:	6831      	ldr	r1, [r6, #0]
 80176f8:	061f      	lsls	r7, r3, #24
 80176fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80176fe:	d402      	bmi.n	8017706 <_printf_i+0x186>
 8017700:	065f      	lsls	r7, r3, #25
 8017702:	bf48      	it	mi
 8017704:	b2ad      	uxthmi	r5, r5
 8017706:	6031      	str	r1, [r6, #0]
 8017708:	07d9      	lsls	r1, r3, #31
 801770a:	bf44      	itt	mi
 801770c:	f043 0320 	orrmi.w	r3, r3, #32
 8017710:	6023      	strmi	r3, [r4, #0]
 8017712:	b11d      	cbz	r5, 801771c <_printf_i+0x19c>
 8017714:	2310      	movs	r3, #16
 8017716:	e7ad      	b.n	8017674 <_printf_i+0xf4>
 8017718:	4826      	ldr	r0, [pc, #152]	@ (80177b4 <_printf_i+0x234>)
 801771a:	e7e9      	b.n	80176f0 <_printf_i+0x170>
 801771c:	6823      	ldr	r3, [r4, #0]
 801771e:	f023 0320 	bic.w	r3, r3, #32
 8017722:	6023      	str	r3, [r4, #0]
 8017724:	e7f6      	b.n	8017714 <_printf_i+0x194>
 8017726:	4616      	mov	r6, r2
 8017728:	e7bd      	b.n	80176a6 <_printf_i+0x126>
 801772a:	6833      	ldr	r3, [r6, #0]
 801772c:	6825      	ldr	r5, [r4, #0]
 801772e:	6961      	ldr	r1, [r4, #20]
 8017730:	1d18      	adds	r0, r3, #4
 8017732:	6030      	str	r0, [r6, #0]
 8017734:	062e      	lsls	r6, r5, #24
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	d501      	bpl.n	801773e <_printf_i+0x1be>
 801773a:	6019      	str	r1, [r3, #0]
 801773c:	e002      	b.n	8017744 <_printf_i+0x1c4>
 801773e:	0668      	lsls	r0, r5, #25
 8017740:	d5fb      	bpl.n	801773a <_printf_i+0x1ba>
 8017742:	8019      	strh	r1, [r3, #0]
 8017744:	2300      	movs	r3, #0
 8017746:	6123      	str	r3, [r4, #16]
 8017748:	4616      	mov	r6, r2
 801774a:	e7bc      	b.n	80176c6 <_printf_i+0x146>
 801774c:	6833      	ldr	r3, [r6, #0]
 801774e:	1d1a      	adds	r2, r3, #4
 8017750:	6032      	str	r2, [r6, #0]
 8017752:	681e      	ldr	r6, [r3, #0]
 8017754:	6862      	ldr	r2, [r4, #4]
 8017756:	2100      	movs	r1, #0
 8017758:	4630      	mov	r0, r6
 801775a:	f7e8 fd59 	bl	8000210 <memchr>
 801775e:	b108      	cbz	r0, 8017764 <_printf_i+0x1e4>
 8017760:	1b80      	subs	r0, r0, r6
 8017762:	6060      	str	r0, [r4, #4]
 8017764:	6863      	ldr	r3, [r4, #4]
 8017766:	6123      	str	r3, [r4, #16]
 8017768:	2300      	movs	r3, #0
 801776a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801776e:	e7aa      	b.n	80176c6 <_printf_i+0x146>
 8017770:	6923      	ldr	r3, [r4, #16]
 8017772:	4632      	mov	r2, r6
 8017774:	4649      	mov	r1, r9
 8017776:	4640      	mov	r0, r8
 8017778:	47d0      	blx	sl
 801777a:	3001      	adds	r0, #1
 801777c:	d0ad      	beq.n	80176da <_printf_i+0x15a>
 801777e:	6823      	ldr	r3, [r4, #0]
 8017780:	079b      	lsls	r3, r3, #30
 8017782:	d413      	bmi.n	80177ac <_printf_i+0x22c>
 8017784:	68e0      	ldr	r0, [r4, #12]
 8017786:	9b03      	ldr	r3, [sp, #12]
 8017788:	4298      	cmp	r0, r3
 801778a:	bfb8      	it	lt
 801778c:	4618      	movlt	r0, r3
 801778e:	e7a6      	b.n	80176de <_printf_i+0x15e>
 8017790:	2301      	movs	r3, #1
 8017792:	4632      	mov	r2, r6
 8017794:	4649      	mov	r1, r9
 8017796:	4640      	mov	r0, r8
 8017798:	47d0      	blx	sl
 801779a:	3001      	adds	r0, #1
 801779c:	d09d      	beq.n	80176da <_printf_i+0x15a>
 801779e:	3501      	adds	r5, #1
 80177a0:	68e3      	ldr	r3, [r4, #12]
 80177a2:	9903      	ldr	r1, [sp, #12]
 80177a4:	1a5b      	subs	r3, r3, r1
 80177a6:	42ab      	cmp	r3, r5
 80177a8:	dcf2      	bgt.n	8017790 <_printf_i+0x210>
 80177aa:	e7eb      	b.n	8017784 <_printf_i+0x204>
 80177ac:	2500      	movs	r5, #0
 80177ae:	f104 0619 	add.w	r6, r4, #25
 80177b2:	e7f5      	b.n	80177a0 <_printf_i+0x220>
 80177b4:	0801a7e2 	.word	0x0801a7e2
 80177b8:	0801a7f3 	.word	0x0801a7f3

080177bc <__sflush_r>:
 80177bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80177c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c4:	0716      	lsls	r6, r2, #28
 80177c6:	4605      	mov	r5, r0
 80177c8:	460c      	mov	r4, r1
 80177ca:	d454      	bmi.n	8017876 <__sflush_r+0xba>
 80177cc:	684b      	ldr	r3, [r1, #4]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	dc02      	bgt.n	80177d8 <__sflush_r+0x1c>
 80177d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	dd48      	ble.n	801786a <__sflush_r+0xae>
 80177d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80177da:	2e00      	cmp	r6, #0
 80177dc:	d045      	beq.n	801786a <__sflush_r+0xae>
 80177de:	2300      	movs	r3, #0
 80177e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80177e4:	682f      	ldr	r7, [r5, #0]
 80177e6:	6a21      	ldr	r1, [r4, #32]
 80177e8:	602b      	str	r3, [r5, #0]
 80177ea:	d030      	beq.n	801784e <__sflush_r+0x92>
 80177ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80177ee:	89a3      	ldrh	r3, [r4, #12]
 80177f0:	0759      	lsls	r1, r3, #29
 80177f2:	d505      	bpl.n	8017800 <__sflush_r+0x44>
 80177f4:	6863      	ldr	r3, [r4, #4]
 80177f6:	1ad2      	subs	r2, r2, r3
 80177f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80177fa:	b10b      	cbz	r3, 8017800 <__sflush_r+0x44>
 80177fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80177fe:	1ad2      	subs	r2, r2, r3
 8017800:	2300      	movs	r3, #0
 8017802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017804:	6a21      	ldr	r1, [r4, #32]
 8017806:	4628      	mov	r0, r5
 8017808:	47b0      	blx	r6
 801780a:	1c43      	adds	r3, r0, #1
 801780c:	89a3      	ldrh	r3, [r4, #12]
 801780e:	d106      	bne.n	801781e <__sflush_r+0x62>
 8017810:	6829      	ldr	r1, [r5, #0]
 8017812:	291d      	cmp	r1, #29
 8017814:	d82b      	bhi.n	801786e <__sflush_r+0xb2>
 8017816:	4a2a      	ldr	r2, [pc, #168]	@ (80178c0 <__sflush_r+0x104>)
 8017818:	40ca      	lsrs	r2, r1
 801781a:	07d6      	lsls	r6, r2, #31
 801781c:	d527      	bpl.n	801786e <__sflush_r+0xb2>
 801781e:	2200      	movs	r2, #0
 8017820:	6062      	str	r2, [r4, #4]
 8017822:	04d9      	lsls	r1, r3, #19
 8017824:	6922      	ldr	r2, [r4, #16]
 8017826:	6022      	str	r2, [r4, #0]
 8017828:	d504      	bpl.n	8017834 <__sflush_r+0x78>
 801782a:	1c42      	adds	r2, r0, #1
 801782c:	d101      	bne.n	8017832 <__sflush_r+0x76>
 801782e:	682b      	ldr	r3, [r5, #0]
 8017830:	b903      	cbnz	r3, 8017834 <__sflush_r+0x78>
 8017832:	6560      	str	r0, [r4, #84]	@ 0x54
 8017834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017836:	602f      	str	r7, [r5, #0]
 8017838:	b1b9      	cbz	r1, 801786a <__sflush_r+0xae>
 801783a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801783e:	4299      	cmp	r1, r3
 8017840:	d002      	beq.n	8017848 <__sflush_r+0x8c>
 8017842:	4628      	mov	r0, r5
 8017844:	f7ff fbec 	bl	8017020 <_free_r>
 8017848:	2300      	movs	r3, #0
 801784a:	6363      	str	r3, [r4, #52]	@ 0x34
 801784c:	e00d      	b.n	801786a <__sflush_r+0xae>
 801784e:	2301      	movs	r3, #1
 8017850:	4628      	mov	r0, r5
 8017852:	47b0      	blx	r6
 8017854:	4602      	mov	r2, r0
 8017856:	1c50      	adds	r0, r2, #1
 8017858:	d1c9      	bne.n	80177ee <__sflush_r+0x32>
 801785a:	682b      	ldr	r3, [r5, #0]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d0c6      	beq.n	80177ee <__sflush_r+0x32>
 8017860:	2b1d      	cmp	r3, #29
 8017862:	d001      	beq.n	8017868 <__sflush_r+0xac>
 8017864:	2b16      	cmp	r3, #22
 8017866:	d11e      	bne.n	80178a6 <__sflush_r+0xea>
 8017868:	602f      	str	r7, [r5, #0]
 801786a:	2000      	movs	r0, #0
 801786c:	e022      	b.n	80178b4 <__sflush_r+0xf8>
 801786e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017872:	b21b      	sxth	r3, r3
 8017874:	e01b      	b.n	80178ae <__sflush_r+0xf2>
 8017876:	690f      	ldr	r7, [r1, #16]
 8017878:	2f00      	cmp	r7, #0
 801787a:	d0f6      	beq.n	801786a <__sflush_r+0xae>
 801787c:	0793      	lsls	r3, r2, #30
 801787e:	680e      	ldr	r6, [r1, #0]
 8017880:	bf08      	it	eq
 8017882:	694b      	ldreq	r3, [r1, #20]
 8017884:	600f      	str	r7, [r1, #0]
 8017886:	bf18      	it	ne
 8017888:	2300      	movne	r3, #0
 801788a:	eba6 0807 	sub.w	r8, r6, r7
 801788e:	608b      	str	r3, [r1, #8]
 8017890:	f1b8 0f00 	cmp.w	r8, #0
 8017894:	dde9      	ble.n	801786a <__sflush_r+0xae>
 8017896:	6a21      	ldr	r1, [r4, #32]
 8017898:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801789a:	4643      	mov	r3, r8
 801789c:	463a      	mov	r2, r7
 801789e:	4628      	mov	r0, r5
 80178a0:	47b0      	blx	r6
 80178a2:	2800      	cmp	r0, #0
 80178a4:	dc08      	bgt.n	80178b8 <__sflush_r+0xfc>
 80178a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178ae:	81a3      	strh	r3, [r4, #12]
 80178b0:	f04f 30ff 	mov.w	r0, #4294967295
 80178b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b8:	4407      	add	r7, r0
 80178ba:	eba8 0800 	sub.w	r8, r8, r0
 80178be:	e7e7      	b.n	8017890 <__sflush_r+0xd4>
 80178c0:	20400001 	.word	0x20400001

080178c4 <_fflush_r>:
 80178c4:	b538      	push	{r3, r4, r5, lr}
 80178c6:	690b      	ldr	r3, [r1, #16]
 80178c8:	4605      	mov	r5, r0
 80178ca:	460c      	mov	r4, r1
 80178cc:	b913      	cbnz	r3, 80178d4 <_fflush_r+0x10>
 80178ce:	2500      	movs	r5, #0
 80178d0:	4628      	mov	r0, r5
 80178d2:	bd38      	pop	{r3, r4, r5, pc}
 80178d4:	b118      	cbz	r0, 80178de <_fflush_r+0x1a>
 80178d6:	6a03      	ldr	r3, [r0, #32]
 80178d8:	b90b      	cbnz	r3, 80178de <_fflush_r+0x1a>
 80178da:	f7ff fa63 	bl	8016da4 <__sinit>
 80178de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d0f3      	beq.n	80178ce <_fflush_r+0xa>
 80178e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80178e8:	07d0      	lsls	r0, r2, #31
 80178ea:	d404      	bmi.n	80178f6 <_fflush_r+0x32>
 80178ec:	0599      	lsls	r1, r3, #22
 80178ee:	d402      	bmi.n	80178f6 <_fflush_r+0x32>
 80178f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178f2:	f7ff fb66 	bl	8016fc2 <__retarget_lock_acquire_recursive>
 80178f6:	4628      	mov	r0, r5
 80178f8:	4621      	mov	r1, r4
 80178fa:	f7ff ff5f 	bl	80177bc <__sflush_r>
 80178fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017900:	07da      	lsls	r2, r3, #31
 8017902:	4605      	mov	r5, r0
 8017904:	d4e4      	bmi.n	80178d0 <_fflush_r+0xc>
 8017906:	89a3      	ldrh	r3, [r4, #12]
 8017908:	059b      	lsls	r3, r3, #22
 801790a:	d4e1      	bmi.n	80178d0 <_fflush_r+0xc>
 801790c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801790e:	f7ff fb59 	bl	8016fc4 <__retarget_lock_release_recursive>
 8017912:	e7dd      	b.n	80178d0 <_fflush_r+0xc>

08017914 <fiprintf>:
 8017914:	b40e      	push	{r1, r2, r3}
 8017916:	b503      	push	{r0, r1, lr}
 8017918:	4601      	mov	r1, r0
 801791a:	ab03      	add	r3, sp, #12
 801791c:	4805      	ldr	r0, [pc, #20]	@ (8017934 <fiprintf+0x20>)
 801791e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017922:	6800      	ldr	r0, [r0, #0]
 8017924:	9301      	str	r3, [sp, #4]
 8017926:	f7ff fca5 	bl	8017274 <_vfiprintf_r>
 801792a:	b002      	add	sp, #8
 801792c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017930:	b003      	add	sp, #12
 8017932:	4770      	bx	lr
 8017934:	20000038 	.word	0x20000038

08017938 <__swbuf_r>:
 8017938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801793a:	460e      	mov	r6, r1
 801793c:	4614      	mov	r4, r2
 801793e:	4605      	mov	r5, r0
 8017940:	b118      	cbz	r0, 801794a <__swbuf_r+0x12>
 8017942:	6a03      	ldr	r3, [r0, #32]
 8017944:	b90b      	cbnz	r3, 801794a <__swbuf_r+0x12>
 8017946:	f7ff fa2d 	bl	8016da4 <__sinit>
 801794a:	69a3      	ldr	r3, [r4, #24]
 801794c:	60a3      	str	r3, [r4, #8]
 801794e:	89a3      	ldrh	r3, [r4, #12]
 8017950:	071a      	lsls	r2, r3, #28
 8017952:	d501      	bpl.n	8017958 <__swbuf_r+0x20>
 8017954:	6923      	ldr	r3, [r4, #16]
 8017956:	b943      	cbnz	r3, 801796a <__swbuf_r+0x32>
 8017958:	4621      	mov	r1, r4
 801795a:	4628      	mov	r0, r5
 801795c:	f000 f82a 	bl	80179b4 <__swsetup_r>
 8017960:	b118      	cbz	r0, 801796a <__swbuf_r+0x32>
 8017962:	f04f 37ff 	mov.w	r7, #4294967295
 8017966:	4638      	mov	r0, r7
 8017968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801796a:	6823      	ldr	r3, [r4, #0]
 801796c:	6922      	ldr	r2, [r4, #16]
 801796e:	1a98      	subs	r0, r3, r2
 8017970:	6963      	ldr	r3, [r4, #20]
 8017972:	b2f6      	uxtb	r6, r6
 8017974:	4283      	cmp	r3, r0
 8017976:	4637      	mov	r7, r6
 8017978:	dc05      	bgt.n	8017986 <__swbuf_r+0x4e>
 801797a:	4621      	mov	r1, r4
 801797c:	4628      	mov	r0, r5
 801797e:	f7ff ffa1 	bl	80178c4 <_fflush_r>
 8017982:	2800      	cmp	r0, #0
 8017984:	d1ed      	bne.n	8017962 <__swbuf_r+0x2a>
 8017986:	68a3      	ldr	r3, [r4, #8]
 8017988:	3b01      	subs	r3, #1
 801798a:	60a3      	str	r3, [r4, #8]
 801798c:	6823      	ldr	r3, [r4, #0]
 801798e:	1c5a      	adds	r2, r3, #1
 8017990:	6022      	str	r2, [r4, #0]
 8017992:	701e      	strb	r6, [r3, #0]
 8017994:	6962      	ldr	r2, [r4, #20]
 8017996:	1c43      	adds	r3, r0, #1
 8017998:	429a      	cmp	r2, r3
 801799a:	d004      	beq.n	80179a6 <__swbuf_r+0x6e>
 801799c:	89a3      	ldrh	r3, [r4, #12]
 801799e:	07db      	lsls	r3, r3, #31
 80179a0:	d5e1      	bpl.n	8017966 <__swbuf_r+0x2e>
 80179a2:	2e0a      	cmp	r6, #10
 80179a4:	d1df      	bne.n	8017966 <__swbuf_r+0x2e>
 80179a6:	4621      	mov	r1, r4
 80179a8:	4628      	mov	r0, r5
 80179aa:	f7ff ff8b 	bl	80178c4 <_fflush_r>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d0d9      	beq.n	8017966 <__swbuf_r+0x2e>
 80179b2:	e7d6      	b.n	8017962 <__swbuf_r+0x2a>

080179b4 <__swsetup_r>:
 80179b4:	b538      	push	{r3, r4, r5, lr}
 80179b6:	4b29      	ldr	r3, [pc, #164]	@ (8017a5c <__swsetup_r+0xa8>)
 80179b8:	4605      	mov	r5, r0
 80179ba:	6818      	ldr	r0, [r3, #0]
 80179bc:	460c      	mov	r4, r1
 80179be:	b118      	cbz	r0, 80179c8 <__swsetup_r+0x14>
 80179c0:	6a03      	ldr	r3, [r0, #32]
 80179c2:	b90b      	cbnz	r3, 80179c8 <__swsetup_r+0x14>
 80179c4:	f7ff f9ee 	bl	8016da4 <__sinit>
 80179c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179cc:	0719      	lsls	r1, r3, #28
 80179ce:	d422      	bmi.n	8017a16 <__swsetup_r+0x62>
 80179d0:	06da      	lsls	r2, r3, #27
 80179d2:	d407      	bmi.n	80179e4 <__swsetup_r+0x30>
 80179d4:	2209      	movs	r2, #9
 80179d6:	602a      	str	r2, [r5, #0]
 80179d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80179dc:	81a3      	strh	r3, [r4, #12]
 80179de:	f04f 30ff 	mov.w	r0, #4294967295
 80179e2:	e033      	b.n	8017a4c <__swsetup_r+0x98>
 80179e4:	0758      	lsls	r0, r3, #29
 80179e6:	d512      	bpl.n	8017a0e <__swsetup_r+0x5a>
 80179e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80179ea:	b141      	cbz	r1, 80179fe <__swsetup_r+0x4a>
 80179ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80179f0:	4299      	cmp	r1, r3
 80179f2:	d002      	beq.n	80179fa <__swsetup_r+0x46>
 80179f4:	4628      	mov	r0, r5
 80179f6:	f7ff fb13 	bl	8017020 <_free_r>
 80179fa:	2300      	movs	r3, #0
 80179fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80179fe:	89a3      	ldrh	r3, [r4, #12]
 8017a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017a04:	81a3      	strh	r3, [r4, #12]
 8017a06:	2300      	movs	r3, #0
 8017a08:	6063      	str	r3, [r4, #4]
 8017a0a:	6923      	ldr	r3, [r4, #16]
 8017a0c:	6023      	str	r3, [r4, #0]
 8017a0e:	89a3      	ldrh	r3, [r4, #12]
 8017a10:	f043 0308 	orr.w	r3, r3, #8
 8017a14:	81a3      	strh	r3, [r4, #12]
 8017a16:	6923      	ldr	r3, [r4, #16]
 8017a18:	b94b      	cbnz	r3, 8017a2e <__swsetup_r+0x7a>
 8017a1a:	89a3      	ldrh	r3, [r4, #12]
 8017a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017a24:	d003      	beq.n	8017a2e <__swsetup_r+0x7a>
 8017a26:	4621      	mov	r1, r4
 8017a28:	4628      	mov	r0, r5
 8017a2a:	f000 f856 	bl	8017ada <__smakebuf_r>
 8017a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a32:	f013 0201 	ands.w	r2, r3, #1
 8017a36:	d00a      	beq.n	8017a4e <__swsetup_r+0x9a>
 8017a38:	2200      	movs	r2, #0
 8017a3a:	60a2      	str	r2, [r4, #8]
 8017a3c:	6962      	ldr	r2, [r4, #20]
 8017a3e:	4252      	negs	r2, r2
 8017a40:	61a2      	str	r2, [r4, #24]
 8017a42:	6922      	ldr	r2, [r4, #16]
 8017a44:	b942      	cbnz	r2, 8017a58 <__swsetup_r+0xa4>
 8017a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017a4a:	d1c5      	bne.n	80179d8 <__swsetup_r+0x24>
 8017a4c:	bd38      	pop	{r3, r4, r5, pc}
 8017a4e:	0799      	lsls	r1, r3, #30
 8017a50:	bf58      	it	pl
 8017a52:	6962      	ldrpl	r2, [r4, #20]
 8017a54:	60a2      	str	r2, [r4, #8]
 8017a56:	e7f4      	b.n	8017a42 <__swsetup_r+0x8e>
 8017a58:	2000      	movs	r0, #0
 8017a5a:	e7f7      	b.n	8017a4c <__swsetup_r+0x98>
 8017a5c:	20000038 	.word	0x20000038

08017a60 <_sbrk_r>:
 8017a60:	b538      	push	{r3, r4, r5, lr}
 8017a62:	4d06      	ldr	r5, [pc, #24]	@ (8017a7c <_sbrk_r+0x1c>)
 8017a64:	2300      	movs	r3, #0
 8017a66:	4604      	mov	r4, r0
 8017a68:	4608      	mov	r0, r1
 8017a6a:	602b      	str	r3, [r5, #0]
 8017a6c:	f7e9 fdb6 	bl	80015dc <_sbrk>
 8017a70:	1c43      	adds	r3, r0, #1
 8017a72:	d102      	bne.n	8017a7a <_sbrk_r+0x1a>
 8017a74:	682b      	ldr	r3, [r5, #0]
 8017a76:	b103      	cbz	r3, 8017a7a <_sbrk_r+0x1a>
 8017a78:	6023      	str	r3, [r4, #0]
 8017a7a:	bd38      	pop	{r3, r4, r5, pc}
 8017a7c:	20008ac4 	.word	0x20008ac4

08017a80 <abort>:
 8017a80:	b508      	push	{r3, lr}
 8017a82:	2006      	movs	r0, #6
 8017a84:	f000 f88e 	bl	8017ba4 <raise>
 8017a88:	2001      	movs	r0, #1
 8017a8a:	f7e9 fd2f 	bl	80014ec <_exit>

08017a8e <__swhatbuf_r>:
 8017a8e:	b570      	push	{r4, r5, r6, lr}
 8017a90:	460c      	mov	r4, r1
 8017a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a96:	2900      	cmp	r1, #0
 8017a98:	b096      	sub	sp, #88	@ 0x58
 8017a9a:	4615      	mov	r5, r2
 8017a9c:	461e      	mov	r6, r3
 8017a9e:	da0d      	bge.n	8017abc <__swhatbuf_r+0x2e>
 8017aa0:	89a3      	ldrh	r3, [r4, #12]
 8017aa2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017aa6:	f04f 0100 	mov.w	r1, #0
 8017aaa:	bf14      	ite	ne
 8017aac:	2340      	movne	r3, #64	@ 0x40
 8017aae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017ab2:	2000      	movs	r0, #0
 8017ab4:	6031      	str	r1, [r6, #0]
 8017ab6:	602b      	str	r3, [r5, #0]
 8017ab8:	b016      	add	sp, #88	@ 0x58
 8017aba:	bd70      	pop	{r4, r5, r6, pc}
 8017abc:	466a      	mov	r2, sp
 8017abe:	f000 f879 	bl	8017bb4 <_fstat_r>
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	dbec      	blt.n	8017aa0 <__swhatbuf_r+0x12>
 8017ac6:	9901      	ldr	r1, [sp, #4]
 8017ac8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017acc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017ad0:	4259      	negs	r1, r3
 8017ad2:	4159      	adcs	r1, r3
 8017ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017ad8:	e7eb      	b.n	8017ab2 <__swhatbuf_r+0x24>

08017ada <__smakebuf_r>:
 8017ada:	898b      	ldrh	r3, [r1, #12]
 8017adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ade:	079d      	lsls	r5, r3, #30
 8017ae0:	4606      	mov	r6, r0
 8017ae2:	460c      	mov	r4, r1
 8017ae4:	d507      	bpl.n	8017af6 <__smakebuf_r+0x1c>
 8017ae6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017aea:	6023      	str	r3, [r4, #0]
 8017aec:	6123      	str	r3, [r4, #16]
 8017aee:	2301      	movs	r3, #1
 8017af0:	6163      	str	r3, [r4, #20]
 8017af2:	b003      	add	sp, #12
 8017af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017af6:	ab01      	add	r3, sp, #4
 8017af8:	466a      	mov	r2, sp
 8017afa:	f7ff ffc8 	bl	8017a8e <__swhatbuf_r>
 8017afe:	9f00      	ldr	r7, [sp, #0]
 8017b00:	4605      	mov	r5, r0
 8017b02:	4639      	mov	r1, r7
 8017b04:	4630      	mov	r0, r6
 8017b06:	f7ff faff 	bl	8017108 <_malloc_r>
 8017b0a:	b948      	cbnz	r0, 8017b20 <__smakebuf_r+0x46>
 8017b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b10:	059a      	lsls	r2, r3, #22
 8017b12:	d4ee      	bmi.n	8017af2 <__smakebuf_r+0x18>
 8017b14:	f023 0303 	bic.w	r3, r3, #3
 8017b18:	f043 0302 	orr.w	r3, r3, #2
 8017b1c:	81a3      	strh	r3, [r4, #12]
 8017b1e:	e7e2      	b.n	8017ae6 <__smakebuf_r+0xc>
 8017b20:	89a3      	ldrh	r3, [r4, #12]
 8017b22:	6020      	str	r0, [r4, #0]
 8017b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b28:	81a3      	strh	r3, [r4, #12]
 8017b2a:	9b01      	ldr	r3, [sp, #4]
 8017b2c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017b30:	b15b      	cbz	r3, 8017b4a <__smakebuf_r+0x70>
 8017b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b36:	4630      	mov	r0, r6
 8017b38:	f000 f84e 	bl	8017bd8 <_isatty_r>
 8017b3c:	b128      	cbz	r0, 8017b4a <__smakebuf_r+0x70>
 8017b3e:	89a3      	ldrh	r3, [r4, #12]
 8017b40:	f023 0303 	bic.w	r3, r3, #3
 8017b44:	f043 0301 	orr.w	r3, r3, #1
 8017b48:	81a3      	strh	r3, [r4, #12]
 8017b4a:	89a3      	ldrh	r3, [r4, #12]
 8017b4c:	431d      	orrs	r5, r3
 8017b4e:	81a5      	strh	r5, [r4, #12]
 8017b50:	e7cf      	b.n	8017af2 <__smakebuf_r+0x18>

08017b52 <_raise_r>:
 8017b52:	291f      	cmp	r1, #31
 8017b54:	b538      	push	{r3, r4, r5, lr}
 8017b56:	4605      	mov	r5, r0
 8017b58:	460c      	mov	r4, r1
 8017b5a:	d904      	bls.n	8017b66 <_raise_r+0x14>
 8017b5c:	2316      	movs	r3, #22
 8017b5e:	6003      	str	r3, [r0, #0]
 8017b60:	f04f 30ff 	mov.w	r0, #4294967295
 8017b64:	bd38      	pop	{r3, r4, r5, pc}
 8017b66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017b68:	b112      	cbz	r2, 8017b70 <_raise_r+0x1e>
 8017b6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017b6e:	b94b      	cbnz	r3, 8017b84 <_raise_r+0x32>
 8017b70:	4628      	mov	r0, r5
 8017b72:	f000 f853 	bl	8017c1c <_getpid_r>
 8017b76:	4622      	mov	r2, r4
 8017b78:	4601      	mov	r1, r0
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b80:	f000 b83a 	b.w	8017bf8 <_kill_r>
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	d00a      	beq.n	8017b9e <_raise_r+0x4c>
 8017b88:	1c59      	adds	r1, r3, #1
 8017b8a:	d103      	bne.n	8017b94 <_raise_r+0x42>
 8017b8c:	2316      	movs	r3, #22
 8017b8e:	6003      	str	r3, [r0, #0]
 8017b90:	2001      	movs	r0, #1
 8017b92:	e7e7      	b.n	8017b64 <_raise_r+0x12>
 8017b94:	2100      	movs	r1, #0
 8017b96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017b9a:	4620      	mov	r0, r4
 8017b9c:	4798      	blx	r3
 8017b9e:	2000      	movs	r0, #0
 8017ba0:	e7e0      	b.n	8017b64 <_raise_r+0x12>
	...

08017ba4 <raise>:
 8017ba4:	4b02      	ldr	r3, [pc, #8]	@ (8017bb0 <raise+0xc>)
 8017ba6:	4601      	mov	r1, r0
 8017ba8:	6818      	ldr	r0, [r3, #0]
 8017baa:	f7ff bfd2 	b.w	8017b52 <_raise_r>
 8017bae:	bf00      	nop
 8017bb0:	20000038 	.word	0x20000038

08017bb4 <_fstat_r>:
 8017bb4:	b538      	push	{r3, r4, r5, lr}
 8017bb6:	4d07      	ldr	r5, [pc, #28]	@ (8017bd4 <_fstat_r+0x20>)
 8017bb8:	2300      	movs	r3, #0
 8017bba:	4604      	mov	r4, r0
 8017bbc:	4608      	mov	r0, r1
 8017bbe:	4611      	mov	r1, r2
 8017bc0:	602b      	str	r3, [r5, #0]
 8017bc2:	f7e9 fce3 	bl	800158c <_fstat>
 8017bc6:	1c43      	adds	r3, r0, #1
 8017bc8:	d102      	bne.n	8017bd0 <_fstat_r+0x1c>
 8017bca:	682b      	ldr	r3, [r5, #0]
 8017bcc:	b103      	cbz	r3, 8017bd0 <_fstat_r+0x1c>
 8017bce:	6023      	str	r3, [r4, #0]
 8017bd0:	bd38      	pop	{r3, r4, r5, pc}
 8017bd2:	bf00      	nop
 8017bd4:	20008ac4 	.word	0x20008ac4

08017bd8 <_isatty_r>:
 8017bd8:	b538      	push	{r3, r4, r5, lr}
 8017bda:	4d06      	ldr	r5, [pc, #24]	@ (8017bf4 <_isatty_r+0x1c>)
 8017bdc:	2300      	movs	r3, #0
 8017bde:	4604      	mov	r4, r0
 8017be0:	4608      	mov	r0, r1
 8017be2:	602b      	str	r3, [r5, #0]
 8017be4:	f7e9 fce2 	bl	80015ac <_isatty>
 8017be8:	1c43      	adds	r3, r0, #1
 8017bea:	d102      	bne.n	8017bf2 <_isatty_r+0x1a>
 8017bec:	682b      	ldr	r3, [r5, #0]
 8017bee:	b103      	cbz	r3, 8017bf2 <_isatty_r+0x1a>
 8017bf0:	6023      	str	r3, [r4, #0]
 8017bf2:	bd38      	pop	{r3, r4, r5, pc}
 8017bf4:	20008ac4 	.word	0x20008ac4

08017bf8 <_kill_r>:
 8017bf8:	b538      	push	{r3, r4, r5, lr}
 8017bfa:	4d07      	ldr	r5, [pc, #28]	@ (8017c18 <_kill_r+0x20>)
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	4604      	mov	r4, r0
 8017c00:	4608      	mov	r0, r1
 8017c02:	4611      	mov	r1, r2
 8017c04:	602b      	str	r3, [r5, #0]
 8017c06:	f7e9 fc5f 	bl	80014c8 <_kill>
 8017c0a:	1c43      	adds	r3, r0, #1
 8017c0c:	d102      	bne.n	8017c14 <_kill_r+0x1c>
 8017c0e:	682b      	ldr	r3, [r5, #0]
 8017c10:	b103      	cbz	r3, 8017c14 <_kill_r+0x1c>
 8017c12:	6023      	str	r3, [r4, #0]
 8017c14:	bd38      	pop	{r3, r4, r5, pc}
 8017c16:	bf00      	nop
 8017c18:	20008ac4 	.word	0x20008ac4

08017c1c <_getpid_r>:
 8017c1c:	f7e9 bc4c 	b.w	80014b8 <_getpid>

08017c20 <_init>:
 8017c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c22:	bf00      	nop
 8017c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c26:	bc08      	pop	{r3}
 8017c28:	469e      	mov	lr, r3
 8017c2a:	4770      	bx	lr

08017c2c <_fini>:
 8017c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c2e:	bf00      	nop
 8017c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c32:	bc08      	pop	{r3}
 8017c34:	469e      	mov	lr, r3
 8017c36:	4770      	bx	lr
